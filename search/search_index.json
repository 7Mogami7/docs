{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to the RetroAchievements documentation project!\n\n\nYou can help to improve these docs editing/creating the pages at \nRetroAchievements wiki\n.", 
            "title": "Home"
        }, 
        {
            "location": "/Developer-Toolset/", 
            "text": "There are several tools and options available to a developer. Knowing how to properly utilize them will improve the quality of your sets. For more help regarding these, our Discord channel is always open for assistance.\n\n\nAchievement Tools\n\n\nGroups\n\n\nAchievements can have groups added to them that can act as alternative requirements to unlock an achievement. These are called \nAlt Groups\n.\n\n\nOne extremely important thing to note: For an achievement to unlock it must have it's \nCore group AND at least one Alt group be true.\n If there are no Alt groups present, then only the Core group's conditions need to be true.\n\n\nTip:\n Because the Core group always need to be active, typically you would put conditions there that is common among all the alternative requirements. However, one trick you can use to basically ignore needing a Core group is to give it a condition that is always true such as: \n\n\nMem 0x0001 = Mem 0x0001\n\n\nSince the Core group is now always true, and you can now focus on differentiating the Alt groups.\n\n\nSpecial Flags\n\n\nA unique property of flagged achievement conditions are that they are always considered \ntrue\n unless their comparison is met. In which case, the condition is now \nfalse\n.\n\n\n\n\nPauseIf\n - This will pause activity for all conditions in the same group. Keep in mind this will \nnot\n pause conditions in other groups.\n\n\nResetIf\n - This will reset the hit value of all conditions. Unlike \nPauseIf\n, this will reset conditions in \nall groups.\n\n\n\n\n\n\nWhen developing for \nN64\n, there are additional \n\"arithmetic flag operations\"\n that can be used. These flags are currently exclusive to N64. Please note, any condition with arithmetic flags are always considered \ntrue\n, regardless of their comparison values.\n\n\n\n\nAdd Source\n - Will add the value of the source in the field labeled \nMemory\n to the next achievement condition. The total value will be used in the next achievement condition.\n\n\nSub Source\n - Works similarly to \nAdd Source\n, but will instead subtract the source value.\n\n\nAdd Hits\n - Will add the current hit count to the next condition. The total hit value will be used in the next achievement condition.\n\n\n\n\n\n\nIn this example, conditions #1 and #2 will have their values (\n5\n and \n3\n respectively) added until they reach condition #3. At that point, the value contained in the \nMemory\n field will be \n5 + 3 + 20\n, and it's new value will be \n28\n. Condition #3 will now be \ntrue\n and read as:\n\n28 \n 20", 
            "title": "Developer Toolset"
        }, 
        {
            "location": "/Developer-Toolset/#achievement-tools", 
            "text": "", 
            "title": "Achievement Tools"
        }, 
        {
            "location": "/Developer-Toolset/#groups", 
            "text": "Achievements can have groups added to them that can act as alternative requirements to unlock an achievement. These are called  Alt Groups .  One extremely important thing to note: For an achievement to unlock it must have it's  Core group AND at least one Alt group be true.  If there are no Alt groups present, then only the Core group's conditions need to be true.  Tip:  Because the Core group always need to be active, typically you would put conditions there that is common among all the alternative requirements. However, one trick you can use to basically ignore needing a Core group is to give it a condition that is always true such as:   Mem 0x0001 = Mem 0x0001  Since the Core group is now always true, and you can now focus on differentiating the Alt groups.", 
            "title": "Groups"
        }, 
        {
            "location": "/Developer-Toolset/#special-flags", 
            "text": "A unique property of flagged achievement conditions are that they are always considered  true  unless their comparison is met. In which case, the condition is now  false .   PauseIf  - This will pause activity for all conditions in the same group. Keep in mind this will  not  pause conditions in other groups.  ResetIf  - This will reset the hit value of all conditions. Unlike  PauseIf , this will reset conditions in  all groups.    When developing for  N64 , there are additional  \"arithmetic flag operations\"  that can be used. These flags are currently exclusive to N64. Please note, any condition with arithmetic flags are always considered  true , regardless of their comparison values.   Add Source  - Will add the value of the source in the field labeled  Memory  to the next achievement condition. The total value will be used in the next achievement condition.  Sub Source  - Works similarly to  Add Source , but will instead subtract the source value.  Add Hits  - Will add the current hit count to the next condition. The total hit value will be used in the next achievement condition.    In this example, conditions #1 and #2 will have their values ( 5  and  3  respectively) added until they reach condition #3. At that point, the value contained in the  Memory  field will be  5 + 3 + 20 , and it's new value will be  28 . Condition #3 will now be  true  and read as: 28   20", 
            "title": "Special Flags"
        }, 
        {
            "location": "/Achievement-Creation/", 
            "text": "Welcome to the world of Achievement Creation!\n\n\nFirst Steps\n\n\nBefore start ensure you have an RA emulator from the \nRetroAchievements Download Page\n first and \ncreate an account\n so you can log in using the emulator.\n\n\nIn this guide we'll be using RAGens to demonstrate, and the game \nSonic the Hedgehog\n. You can use whatever you like, but I'll refer to RAGens as the emulator I'm using; the same applies for the other emulators.\n\n\nTo begin, run the RAGens executable, and login when prompted. Next, use File -\n Open and select whatever ROM you would like to find achievements for.\n\n\nMemory Inspector\n\n\nYou should now have your main window running Sonic. There are 3 other dialogs we'll be using, which can be found under \nRetroAchievements\n in the menu. We'll be dealing with the \nMemory Inspector\n first:\n\n\n\n\nThe Memory Inspector can be used to find addresses in RAM for us to use. Essentially you are on a treasure hunt for memory locations - this dialog will help you examine and filter the game's RAM while the game is running. To start or restart a test, click \nNew 8-bit Test\n near the top middle.\n\n\nTo keep things simple, we'll start by looking for the memory address which holds the number of rings we have collected. Our steps will be the following:\n\n\n\n\n\n\nLoad the ROM and start a new game.\n\n\n\n\n\n\nReset the memory dialog: click \nNew 8-bit Test\n.\n\n\n\n\n\n\nReturn to the game and change the number of rings in memory. For example, collect a ring.\n\n\n\n\n\n\nIn the memory dialog, we now want to filter for values that are 'greater than previous values' (symbol \n). We select this, then hit \nFilter\n.\n\n\n\n\n\n\nEach time you perform 3 then 4, the number of possibilities or 'candidates' will get smaller. We will continue doing this until the number of candidates reaches a very small number (as few as possible), it might take 4-5 attempts. Next we can click in the results window, and monitor the memory address in the memory viewer at the bottom. Continue using the game and you should see the values in memory change as you collect rings. If you don't, or if something doesn't look right, try another value. With the first Sonic the Hedgehog, the memory address for the number of rings should be \n0xfe20\n.\n\n\nNote\n: Using save states (F5 to save state, F8 to load state, F6-F7 to toggle which state to use), you can switch back and forth between different states allowing you to alter what is in RAM, and use this to filter out bad candidates. You can search for values that remain the same (I.e. If you know the value didn't change, use \n=\n), or values that are different (use 'not equal', symbol \n!=\n).\n\n\nNote\n: There's unfortunately no guarantee from game to game on how the developers have stored their data (4-bit, 8-bit, 16-bit, binary-coded decimals, negative/inverted, i.e. using 0xff/0xffff to represent 'set', or plain randomly), but eventually you should come across some good address. Note if you are struggling to find good values, post in these forums, or see the note at the end of this post. There are plenty of people who will be very happy to help!!\n\n\nTip\n: if you'd like to experiment with memory, try entering new values directly into the RAM viewer. This can have devastating effects on the game, or it might do exactly what you expect, (or nothing at all!) It can be useful though, to see if you can enter a value and get the result you expect. Use with caution!\n\n\nWhen you've found an address you're happy with, you can write a short note for what it is and hit \nSave Note\n, this will store it on database, and will be automatically restored next time you load up the memory viewer for this game, wherever you are! Note that after clicking 'Save Note', the note will be automatically stored on the database, and shared so all developers will share access to these memory notes. They will all be downloaded afresh when you load a ROM. If you try to overwrite a note, it will check with you first before submitting.\n\n\nAchievement Sets\n\n\nOK so the memory location for the number of rings is stored at \n0xfe20\n (note to a non-programmer, we're dealing in hexadecimal which can be daunting, but don't worry, essentially its just letters instead of numbers), and not forgetting \n0x\n at the start to show that it's a memory location in hex. We've found an address we're interested in and stored it using \nSave Note\n. We now want to create a new achievement. We will now move to the \nAchievement Set\n dialog:\n\n\n\n\nHere we group all the achievements we know about into three sets:\n1. Core Achievements (the main, public Achievement set),\n2. Unofficial/User Achievements (public, but will not award you points: for peer review),\n3. Local Achievements (personal to your PC).\n\n\nIn the Achievements dialog, click \nLocal Achievements\n (top left), then \nAdd New Achievement\n (bottom left). This will add a blank entry to the list in the center. Double click on it: if it's not already open, this should select it and open the \nAchievement Editor\n dialog.\n\n\nAchievement Editor\n\n\nThis is how it looks:\n\n\n\n\nThis is the final dialog where we bring all the data together. Most of the top fields are self explanatory, I.e. Title, Description, Points. The main one is the 'Requirements' part.\n\n\nLets say we want to add an achievement for collecting a certain number of rings. Lets say 15 rings for simplicity. After filling out the fields at the top and selecting a suitable icon (you can upload a new one, I'll just select the gold trophy badge (00136) for now), we need to fill out Requirements. I have one requirement, \nthat the number of rings is at least 15\n. Next click is \nAdd New Requirement\n.\n\n\nClicking this button will add several default values to the Requirements list. These defaults just ensure that something relatively sensible is added to the list. For now, ignoring the field 'Special?', what this says is, 'please check that this value of memory is equal to the value 10.' (10 is just a default value). When we clicked create, the default memory value will be whatever value you last left in the memory dialog.\n\n\nNext we will change these values to the following:\n\n\n\n\nSize: \n16-bit\n\n\nMemory: \n0xfe20\n\n\nCmp: \n=\n - this is the comparison to make. We could have any comparison here, but it's sensible to have \"greater than or equal to\". This is important because if we get 10 rings then a super ring box to have 20, we would miss out having \nexactly\n 15 rings.\n\n\nType: \nValue\n - we're comparing this memory value to a fixed value: 15\n\n\nSize: \nEmpty\n - this is only relevant when comparing memory to memory\n\n\nMem/Val: \n15\n - the number of rings required: the value we are comparing the memory to\n\n\nHit Count: \n0\n - ignore this for now, its useful for when something needs to happen a certain number of times\n\n\n\n\nWith that set, we don't have any more conditions to add, so we return to the \nAchievements Dialog\n. To be safe, we should save our progress by hitting \nSave Local\n! This saves everything to file locally to ensure that we won't lose any progress. \n\n\nTesting the Achievement\n\n\nWe can now 'activate' this achievement locally by hitting \nActivate\n on the right-hand side. This will start monitoring these memory locations and will award the achievement once all the conditions are true. Now we can go ahead and test to see if this achievement works!\n\n\n\n\nIf we press ESCAPE in-game, you will see the achievement show up as a demonstration of what it would look like in the in-game overlay!\n\n\n\n\nOK, the Achievement works. Now What?\n\n\nOnce we have tested that the achievement works locally, there is a two-step commit process that's (mostly) pain-free! First in the Achievements Dialog, we select our achievement and press 'Commit Selected', and agree to the dialog. This will push our achievement to the server and store it under 'Unofficial User-submitted Achievements'. Note that our achievement still exists in this dialog, it's just moved to a different tab.\n\n\nFor the achievement to be enjoyed by many, it must be pushed into the Core Achievement set. For your few first achievements, it must be reviewed by a staff member before it can be pushed to Core. Once you have uploaded a set of achievements, you may be given \nDeveloper\n status, in which case you can push any achievement to Core yourself.\n\n\nNaturally, it's best only to submit achievements that are unique and interesting into the Core Achievements group. If there are duplicates in the Core group, the most recently added duplicates will be manually moderated and deleted. If you don't want your achievement in the Core group, or you think it might not be appropriate for the Core group (i.e. if it's incomplete, or if sometimes it appears to trigger when it's not supposed to, like when the game is showing a demo), leave it in the Unofficial/User Submitted section.\n\n\nExtra Stuff\n\n\nWhen finding addresses, there is potentially a bit of a shortcut. PAR files can come in very useful, see http://bsfree.shadowflareindustries.com/?s=11\nd=5 for examples of PAR codes. PAR codes are commonly used to force an address in RAM to stay a certain value. The addresses are easily decoded: if it begins 'ff', that means 'keep a value stuck in this address'. The next four digits are the address, and after the colon is the value that should be used. For example:\n\n\nFFFE20:00C8\n\n\nThis code is for Sonic 1, and the Action Replay would ensure that the value 00c8 is stuck in the address 0xfe20. This causes sonic to permanently have (hex)c8 rings, which is 200.\n\n\nNote that it is only Action Replay (PAR) codes that will be useful to get addresses for use with RetroAchievements: Game Genie codes modify ROM rather than RAM and aren't what we're looking for.", 
            "title": "Achievement Creation"
        }, 
        {
            "location": "/Achievement-Creation/#first-steps", 
            "text": "Before start ensure you have an RA emulator from the  RetroAchievements Download Page  first and  create an account  so you can log in using the emulator.  In this guide we'll be using RAGens to demonstrate, and the game  Sonic the Hedgehog . You can use whatever you like, but I'll refer to RAGens as the emulator I'm using; the same applies for the other emulators.  To begin, run the RAGens executable, and login when prompted. Next, use File -  Open and select whatever ROM you would like to find achievements for.", 
            "title": "First Steps"
        }, 
        {
            "location": "/Achievement-Creation/#memory-inspector", 
            "text": "You should now have your main window running Sonic. There are 3 other dialogs we'll be using, which can be found under  RetroAchievements  in the menu. We'll be dealing with the  Memory Inspector  first:   The Memory Inspector can be used to find addresses in RAM for us to use. Essentially you are on a treasure hunt for memory locations - this dialog will help you examine and filter the game's RAM while the game is running. To start or restart a test, click  New 8-bit Test  near the top middle.  To keep things simple, we'll start by looking for the memory address which holds the number of rings we have collected. Our steps will be the following:    Load the ROM and start a new game.    Reset the memory dialog: click  New 8-bit Test .    Return to the game and change the number of rings in memory. For example, collect a ring.    In the memory dialog, we now want to filter for values that are 'greater than previous values' (symbol  ). We select this, then hit  Filter .    Each time you perform 3 then 4, the number of possibilities or 'candidates' will get smaller. We will continue doing this until the number of candidates reaches a very small number (as few as possible), it might take 4-5 attempts. Next we can click in the results window, and monitor the memory address in the memory viewer at the bottom. Continue using the game and you should see the values in memory change as you collect rings. If you don't, or if something doesn't look right, try another value. With the first Sonic the Hedgehog, the memory address for the number of rings should be  0xfe20 .  Note : Using save states (F5 to save state, F8 to load state, F6-F7 to toggle which state to use), you can switch back and forth between different states allowing you to alter what is in RAM, and use this to filter out bad candidates. You can search for values that remain the same (I.e. If you know the value didn't change, use  = ), or values that are different (use 'not equal', symbol  != ).  Note : There's unfortunately no guarantee from game to game on how the developers have stored their data (4-bit, 8-bit, 16-bit, binary-coded decimals, negative/inverted, i.e. using 0xff/0xffff to represent 'set', or plain randomly), but eventually you should come across some good address. Note if you are struggling to find good values, post in these forums, or see the note at the end of this post. There are plenty of people who will be very happy to help!!  Tip : if you'd like to experiment with memory, try entering new values directly into the RAM viewer. This can have devastating effects on the game, or it might do exactly what you expect, (or nothing at all!) It can be useful though, to see if you can enter a value and get the result you expect. Use with caution!  When you've found an address you're happy with, you can write a short note for what it is and hit  Save Note , this will store it on database, and will be automatically restored next time you load up the memory viewer for this game, wherever you are! Note that after clicking 'Save Note', the note will be automatically stored on the database, and shared so all developers will share access to these memory notes. They will all be downloaded afresh when you load a ROM. If you try to overwrite a note, it will check with you first before submitting.", 
            "title": "Memory Inspector"
        }, 
        {
            "location": "/Achievement-Creation/#achievement-sets", 
            "text": "OK so the memory location for the number of rings is stored at  0xfe20  (note to a non-programmer, we're dealing in hexadecimal which can be daunting, but don't worry, essentially its just letters instead of numbers), and not forgetting  0x  at the start to show that it's a memory location in hex. We've found an address we're interested in and stored it using  Save Note . We now want to create a new achievement. We will now move to the  Achievement Set  dialog:   Here we group all the achievements we know about into three sets:\n1. Core Achievements (the main, public Achievement set),\n2. Unofficial/User Achievements (public, but will not award you points: for peer review),\n3. Local Achievements (personal to your PC).  In the Achievements dialog, click  Local Achievements  (top left), then  Add New Achievement  (bottom left). This will add a blank entry to the list in the center. Double click on it: if it's not already open, this should select it and open the  Achievement Editor  dialog.", 
            "title": "Achievement Sets"
        }, 
        {
            "location": "/Achievement-Creation/#achievement-editor", 
            "text": "This is how it looks:   This is the final dialog where we bring all the data together. Most of the top fields are self explanatory, I.e. Title, Description, Points. The main one is the 'Requirements' part.  Lets say we want to add an achievement for collecting a certain number of rings. Lets say 15 rings for simplicity. After filling out the fields at the top and selecting a suitable icon (you can upload a new one, I'll just select the gold trophy badge (00136) for now), we need to fill out Requirements. I have one requirement,  that the number of rings is at least 15 . Next click is  Add New Requirement .  Clicking this button will add several default values to the Requirements list. These defaults just ensure that something relatively sensible is added to the list. For now, ignoring the field 'Special?', what this says is, 'please check that this value of memory is equal to the value 10.' (10 is just a default value). When we clicked create, the default memory value will be whatever value you last left in the memory dialog.  Next we will change these values to the following:   Size:  16-bit  Memory:  0xfe20  Cmp:  =  - this is the comparison to make. We could have any comparison here, but it's sensible to have \"greater than or equal to\". This is important because if we get 10 rings then a super ring box to have 20, we would miss out having  exactly  15 rings.  Type:  Value  - we're comparing this memory value to a fixed value: 15  Size:  Empty  - this is only relevant when comparing memory to memory  Mem/Val:  15  - the number of rings required: the value we are comparing the memory to  Hit Count:  0  - ignore this for now, its useful for when something needs to happen a certain number of times   With that set, we don't have any more conditions to add, so we return to the  Achievements Dialog . To be safe, we should save our progress by hitting  Save Local ! This saves everything to file locally to ensure that we won't lose any progress.", 
            "title": "Achievement Editor"
        }, 
        {
            "location": "/Achievement-Creation/#testing-the-achievement", 
            "text": "We can now 'activate' this achievement locally by hitting  Activate  on the right-hand side. This will start monitoring these memory locations and will award the achievement once all the conditions are true. Now we can go ahead and test to see if this achievement works!   If we press ESCAPE in-game, you will see the achievement show up as a demonstration of what it would look like in the in-game overlay!", 
            "title": "Testing the Achievement"
        }, 
        {
            "location": "/Achievement-Creation/#ok-the-achievement-works-now-what", 
            "text": "Once we have tested that the achievement works locally, there is a two-step commit process that's (mostly) pain-free! First in the Achievements Dialog, we select our achievement and press 'Commit Selected', and agree to the dialog. This will push our achievement to the server and store it under 'Unofficial User-submitted Achievements'. Note that our achievement still exists in this dialog, it's just moved to a different tab.  For the achievement to be enjoyed by many, it must be pushed into the Core Achievement set. For your few first achievements, it must be reviewed by a staff member before it can be pushed to Core. Once you have uploaded a set of achievements, you may be given  Developer  status, in which case you can push any achievement to Core yourself.  Naturally, it's best only to submit achievements that are unique and interesting into the Core Achievements group. If there are duplicates in the Core group, the most recently added duplicates will be manually moderated and deleted. If you don't want your achievement in the Core group, or you think it might not be appropriate for the Core group (i.e. if it's incomplete, or if sometimes it appears to trigger when it's not supposed to, like when the game is showing a demo), leave it in the Unofficial/User Submitted section.", 
            "title": "OK, the Achievement works. Now What?"
        }, 
        {
            "location": "/Achievement-Creation/#extra-stuff", 
            "text": "When finding addresses, there is potentially a bit of a shortcut. PAR files can come in very useful, see http://bsfree.shadowflareindustries.com/?s=11 d=5 for examples of PAR codes. PAR codes are commonly used to force an address in RAM to stay a certain value. The addresses are easily decoded: if it begins 'ff', that means 'keep a value stuck in this address'. The next four digits are the address, and after the colon is the value that should be used. For example:  FFFE20:00C8  This code is for Sonic 1, and the Action Replay would ensure that the value 00c8 is stuck in the address 0xfe20. This causes sonic to permanently have (hex)c8 rings, which is 200.  Note that it is only Action Replay (PAR) codes that will be useful to get addresses for use with RetroAchievements: Game Genie codes modify ROM rather than RAM and aren't what we're looking for.", 
            "title": "Extra Stuff"
        }, 
        {
            "location": "/Badge-Creation/", 
            "text": "Badges are the images associated to each achievement from each game, and are used across the site and in the app.\n\n\nFormat\n\n\nWhen uploaded, your file is converted into the following:\n\n\n\n\n128x128 32-bit colour PNG\n\n\n64x64 32-bit colour PNG\n\n\n64x64 greyscale and blurred PNG\n\n\n32x32 32-bit colour PNG\n\n\n32x32 greyscale and blurred PNG \n\n\n\n\nIt's not entirely important how the file is formatted before uploading, but as long as it's square, the file will upload and be converted pretty easily. Naturally it is important not to break any copyright law, or upload anything vulgar, offensive or pornographic, with the possible consequences of being cautioned, potentially reported and potentially removed from RetroAchievements.\n\n\nGuidelines\n\n\n\n\n\n\nBadges should refer in some way to what the achievement is about, i.e. a picture of the boss, level or collectible that the achievement requires the player to get to. \n\n\n\n\n\n\nIn the cases of low-resolution games' achievements, it can be hard to get a badge looking good without it looking \nblocky\n or \nblurry\n, in these cases the \nblocky\n look is often preferable, so that the images have a \nretro\n feel to them.\n\n\n\n\n\n\nChanges and Demotions\n\n\nAs the site does not (in all cases) have a permanent \nchangelog/git-style-rollback/wiki-style-rollback\n for all actions taken on a set it's recommended that when a developer makes changes of any kind to a set that they make a note of it in the forum for that game. \n\n\n\n\nHaving this in considerations, in relation to badges, one of the following:\n- leaving an old copy of the badge in the game thread \n- annotating the old badge ID (number displayed on the badge image's URL) \n\n\nis recommended, to help keep everything orderly so that in cases when rollbacks or change backs are appropriate it is much easier to do them.", 
            "title": "Badge Creation"
        }, 
        {
            "location": "/Badge-Creation/#format", 
            "text": "When uploaded, your file is converted into the following:   128x128 32-bit colour PNG  64x64 32-bit colour PNG  64x64 greyscale and blurred PNG  32x32 32-bit colour PNG  32x32 greyscale and blurred PNG    It's not entirely important how the file is formatted before uploading, but as long as it's square, the file will upload and be converted pretty easily. Naturally it is important not to break any copyright law, or upload anything vulgar, offensive or pornographic, with the possible consequences of being cautioned, potentially reported and potentially removed from RetroAchievements.", 
            "title": "Format"
        }, 
        {
            "location": "/Badge-Creation/#guidelines", 
            "text": "Badges should refer in some way to what the achievement is about, i.e. a picture of the boss, level or collectible that the achievement requires the player to get to.     In the cases of low-resolution games' achievements, it can be hard to get a badge looking good without it looking  blocky  or  blurry , in these cases the  blocky  look is often preferable, so that the images have a  retro  feel to them.", 
            "title": "Guidelines"
        }, 
        {
            "location": "/Badge-Creation/#changes-and-demotions", 
            "text": "As the site does not (in all cases) have a permanent  changelog/git-style-rollback/wiki-style-rollback  for all actions taken on a set it's recommended that when a developer makes changes of any kind to a set that they make a note of it in the forum for that game.    Having this in considerations, in relation to badges, one of the following:\n- leaving an old copy of the badge in the game thread \n- annotating the old badge ID (number displayed on the badge image's URL)   is recommended, to help keep everything orderly so that in cases when rollbacks or change backs are appropriate it is much easier to do them.", 
            "title": "Changes and Demotions"
        }, 
        {
            "location": "/Console-Specific-Tips/", 
            "text": "When excavating the memory of these old consoles it helps to know what the original creators of the games were working with in the first place. If you familiarize yourself with the quirks of your favorite console then set making will be easier and more accurate.\n\n\nNES (RANes)\n\n\nMemory Mirroring\n\n\n\n\nWhen using the memory inspector to find variables for NES games, there will be 4 copies of everything you find. If you're wondering \"which one do I use?\" or \"should I check for all of them?\" it's not as complicated as it seems.\n\n\nThis is a feature of the NES that gave developers more ways of looking at memory. Because the NES itself only has 2KB of RAM, the first result (the one below 0x800) should be used for consistency, and applying additional conditions on the others will do nothing.\n\n\nThis applies to RPS and leaderboards as well.\n\n\nGame Boy (RAVBA)\n\n\nMemory Map\n\n\nCertain ranges of values mean different things in the context of the Game Boy hardware, so having a map of what's where can help you with eliminating useless addresses. Here's the lowdown:\n\n\n\n\n\u274c \n0x0000 - 0x7FFF: ROM Data\n (Typically no reason to use. If you're a super-dedicated developer you could use the 16-bit value at 0x14E along with alt groups to support multiple ROM versions/regions)\n\n\n\u274c \n0x8000 - 0x9FFF: Graphics Data\n (Some things here might correlate with what you're looking for if you're trying to find a map ID or animation, but there will always be a better way of going about what you're doing than using any of these)\n\n\n\u2714\ufe0f \n0xA000 - 0xBFFF: Cartridge RAM\n (IE. save data. Sometimes using these addresses will be unavoidable but then your set could be prone to cheating by loading 100% save files. More info on protecting against save files to come)\n\n\n\u2714\ufe0f \n0xC000 - 0xDFFF: Work RAM\n (The good stuff; almost everything you should use will fall inside this range)\n\n\n\u274c \n0xE000 - 0xFDFF: ECHO RAM\n (Do not use, see below)\n\n\n\u274c \n0xFE00 - 0xFE9F: More Graphics Data\n (same as Graphics Data above)\n\n\n\u274c \n0xFEA0 - 0xFFFF: Miscellaneous\n (Do not use)\n\n\n\n\nFor more info see: http://gameboy.mongenel.com/dmg/asmmemmap.html\n\n\nECHO RAM\n\n\n\n\nSimilarly to the NES, certain variables may show up twice when searching in the Memory Inspector. The second result is in what's called the ECHO RAM, which is a mirror of the actual memory. Since some emulators tend to ignore this area or emulate it incorrectly, it's recommended to NOT use it at all and always use the first result.\n\n\nThe Game Boy has 4KB of RAM starting at 0xC000. ECHO RAM starts at 0xE000, so if your address begins with an E you'll want to replace the first non-zero character with a C. Remember: C is correct, E is echo!", 
            "title": "Console Specific Tips"
        }, 
        {
            "location": "/Console-Specific-Tips/#nes-ranes", 
            "text": "", 
            "title": "NES (RANes)"
        }, 
        {
            "location": "/Console-Specific-Tips/#memory-mirroring", 
            "text": "When using the memory inspector to find variables for NES games, there will be 4 copies of everything you find. If you're wondering \"which one do I use?\" or \"should I check for all of them?\" it's not as complicated as it seems.  This is a feature of the NES that gave developers more ways of looking at memory. Because the NES itself only has 2KB of RAM, the first result (the one below 0x800) should be used for consistency, and applying additional conditions on the others will do nothing.  This applies to RPS and leaderboards as well.", 
            "title": "Memory Mirroring"
        }, 
        {
            "location": "/Console-Specific-Tips/#game-boy-ravba", 
            "text": "", 
            "title": "Game Boy (RAVBA)"
        }, 
        {
            "location": "/Console-Specific-Tips/#memory-map", 
            "text": "Certain ranges of values mean different things in the context of the Game Boy hardware, so having a map of what's where can help you with eliminating useless addresses. Here's the lowdown:   \u274c  0x0000 - 0x7FFF: ROM Data  (Typically no reason to use. If you're a super-dedicated developer you could use the 16-bit value at 0x14E along with alt groups to support multiple ROM versions/regions)  \u274c  0x8000 - 0x9FFF: Graphics Data  (Some things here might correlate with what you're looking for if you're trying to find a map ID or animation, but there will always be a better way of going about what you're doing than using any of these)  \u2714\ufe0f  0xA000 - 0xBFFF: Cartridge RAM  (IE. save data. Sometimes using these addresses will be unavoidable but then your set could be prone to cheating by loading 100% save files. More info on protecting against save files to come)  \u2714\ufe0f  0xC000 - 0xDFFF: Work RAM  (The good stuff; almost everything you should use will fall inside this range)  \u274c  0xE000 - 0xFDFF: ECHO RAM  (Do not use, see below)  \u274c  0xFE00 - 0xFE9F: More Graphics Data  (same as Graphics Data above)  \u274c  0xFEA0 - 0xFFFF: Miscellaneous  (Do not use)   For more info see: http://gameboy.mongenel.com/dmg/asmmemmap.html", 
            "title": "Memory Map"
        }, 
        {
            "location": "/Console-Specific-Tips/#echo-ram", 
            "text": "Similarly to the NES, certain variables may show up twice when searching in the Memory Inspector. The second result is in what's called the ECHO RAM, which is a mirror of the actual memory. Since some emulators tend to ignore this area or emulate it incorrectly, it's recommended to NOT use it at all and always use the first result.  The Game Boy has 4KB of RAM starting at 0xC000. ECHO RAM starts at 0xE000, so if your address begins with an E you'll want to replace the first non-zero character with a C. Remember: C is correct, E is echo!", 
            "title": "ECHO RAM"
        }
    ]
}