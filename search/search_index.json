{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to the \nRetroAchievements documentation project\n!\n\n\nNewcomers, please start with the \nFAQ\n.\n\n\nWe encourage all community members to join our \nDiscord chat server\n, we use this for most communication.\n\n\nYou can help to improve these docs editing/creating the pages at \nRetroAchievements wiki\n.\n\n\nDeveloper docs\n\n\nA brief description of each Achievement developer page you'll see here.\n\n\n\n\n\n\nGetting Started as an Achievement Developer\n: it's for the very first contact with cheevos development tools (Memory Inspector and other Achievements dialogs). \nIF YOU ARE A COMPLETE NEWBIE, START HERE!\n\n\n\n\n\n\nAchievement Logic Features\n: describes the available tools a developer have in order to improve the logic behind the achievements, such as delta values, hit counts, ResetIf, PauseIf, Alt groups, etc.\n\n\n\n\n\n\nReal Examples\n: showing real examples and breaking down the logic behind them. \nAWESOME LEARNING RESOURCE!\n\n\n\n\n\n\nTips and Tricks\n: general tips and tricks about memory digging and achievement creation.\n\n\n\n\n\n\nConsole Specific Tips\n: knowing the peculiarities of your favorite console can help you with memory digging.\n\n\n\n\n\n\nAchievement Templates\n: some generic templates to get inspiration.\n\n\n\n\n\n\nDifficulty Scale and Balance\n: guidelines/suggestions on how to balance the difficulty of your achievement set.\n\n\n\n\n\n\nBadge and Icon Creation\n: some guidelines and tips about badge/icon creation.\n\n\n\n\n\n\nLeaderboards\n: instructions on how to create Leaderboards for a game.\n\n\n\n\n\n\nRich Presence\n: how to write Rich Presence Scripts.\n\n\n\n\n\n\nSet Development Roadmap\n: suggestions of steps to take in order to create a really neat achievement set.", 
            "title": "Home"
        }, 
        {
            "location": "/#developer-docs", 
            "text": "A brief description of each Achievement developer page you'll see here.    Getting Started as an Achievement Developer : it's for the very first contact with cheevos development tools (Memory Inspector and other Achievements dialogs).  IF YOU ARE A COMPLETE NEWBIE, START HERE!    Achievement Logic Features : describes the available tools a developer have in order to improve the logic behind the achievements, such as delta values, hit counts, ResetIf, PauseIf, Alt groups, etc.    Real Examples : showing real examples and breaking down the logic behind them.  AWESOME LEARNING RESOURCE!    Tips and Tricks : general tips and tricks about memory digging and achievement creation.    Console Specific Tips : knowing the peculiarities of your favorite console can help you with memory digging.    Achievement Templates : some generic templates to get inspiration.    Difficulty Scale and Balance : guidelines/suggestions on how to balance the difficulty of your achievement set.    Badge and Icon Creation : some guidelines and tips about badge/icon creation.    Leaderboards : instructions on how to create Leaderboards for a game.    Rich Presence : how to write Rich Presence Scripts.    Set Development Roadmap : suggestions of steps to take in order to create a really neat achievement set.", 
            "title": "Developer docs"
        }, 
        {
            "location": "/Users-Code-of-Conduct/", 
            "text": "Our Standards\n\n\nWe want an open, positive and welcoming environment.\n\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n\n\n\nUsing welcoming and inclusive language.\n\n\nBeing respectful of differing viewpoints and experiences.\n\n\nGracefully accepting constructive criticism.\n\n\nFocusing on what is best for the community.\n\n\nShowing empathy towards other community members.\n\n\n\n\nExamples of unacceptable behavior by participants include:\n\n\n\n\nPost links to download sites where others could download illegal ROMs.\n\n\nCheating: All cheats are disallowed unless it's specified in the achievement's\n  description or comments in the achievement's page. Even ingame cheats, those that\n  already exists on the original console, are considered cheating if not specified.\n  Accounts that are proven to be cheating will be setted to \n\"Untracked\"\n.\n\n\nAttempting to intentionally disrupt the stability of the community: Inciting witch-hunts,\n\n  bandwagoning, or \"site drama\", where such arguments and disagreements should be handled\n  in private.\n\n\nExcessive trolling, insulting/derogatory comments, and personal or political attacks.\n\n\nThe use of sexualized imagery and unwelcome sexual attention or advances.\n\n\nPublic or private harassment.\n\n\nPublishing others' private information, such as a physical or electronic address,\n  without explicit permission.\n\n\n\n\nAdmins Responsibilities\n\n\nAdmins have the right and responsibility to remove, edit, or reject comments,\nachievements, badges, forum posts, and other contributions that are not aligned to\nthis Code of Conduct, or to ban temporarily or permanently any participant for other\nbehaviors that they deem inappropriate, threatening, offensive, or harmful. When the\ninappropriate behavior is not very clear, the admins will discuss among themselves\nwhat action should be taken.\n\n\nAdmins who do not follow or enforce the Code of Conduct in good faith may face temporary\nor permanent repercussions as determined by other members of the project's leadership.\n\n\nReporting\n\n\nInstances of abusive, harassing, cheating or otherwise unacceptable behavior may be reported by\ncontacting the RetroAchievements admins team at \nDiscord Server\n\nand sending a Direct Message to an active admin (Users with red names). You can also contact all\nactive admins by sending a Private Message to the \nRAdmin user in the official website\n.\n\n\nComplaints will be reviewed, investigated and responded to as fitting to the circumstances.", 
            "title": "Users Code of Conduct"
        }, 
        {
            "location": "/Users-Code-of-Conduct/#our-standards", 
            "text": "We want an open, positive and welcoming environment.  Examples of behavior that contributes to creating a positive environment\ninclude:   Using welcoming and inclusive language.  Being respectful of differing viewpoints and experiences.  Gracefully accepting constructive criticism.  Focusing on what is best for the community.  Showing empathy towards other community members.   Examples of unacceptable behavior by participants include:   Post links to download sites where others could download illegal ROMs.  Cheating: All cheats are disallowed unless it's specified in the achievement's\n  description or comments in the achievement's page. Even ingame cheats, those that\n  already exists on the original console, are considered cheating if not specified.\n  Accounts that are proven to be cheating will be setted to  \"Untracked\" .  Attempting to intentionally disrupt the stability of the community: Inciting witch-hunts, \n  bandwagoning, or \"site drama\", where such arguments and disagreements should be handled\n  in private.  Excessive trolling, insulting/derogatory comments, and personal or political attacks.  The use of sexualized imagery and unwelcome sexual attention or advances.  Public or private harassment.  Publishing others' private information, such as a physical or electronic address,\n  without explicit permission.", 
            "title": "Our Standards"
        }, 
        {
            "location": "/Users-Code-of-Conduct/#admins-responsibilities", 
            "text": "Admins have the right and responsibility to remove, edit, or reject comments,\nachievements, badges, forum posts, and other contributions that are not aligned to\nthis Code of Conduct, or to ban temporarily or permanently any participant for other\nbehaviors that they deem inappropriate, threatening, offensive, or harmful. When the\ninappropriate behavior is not very clear, the admins will discuss among themselves\nwhat action should be taken.  Admins who do not follow or enforce the Code of Conduct in good faith may face temporary\nor permanent repercussions as determined by other members of the project's leadership.", 
            "title": "Admins Responsibilities"
        }, 
        {
            "location": "/Users-Code-of-Conduct/#reporting", 
            "text": "Instances of abusive, harassing, cheating or otherwise unacceptable behavior may be reported by\ncontacting the RetroAchievements admins team at  Discord Server \nand sending a Direct Message to an active admin (Users with red names). You can also contact all\nactive admins by sending a Private Message to the  RAdmin user in the official website .  Complaints will be reviewed, investigated and responded to as fitting to the circumstances.", 
            "title": "Reporting"
        }, 
        {
            "location": "/FAQ/", 
            "text": "What is RetroAchievements.org?\n\n\nRetroAchievements.org\n is a community who collaborate and compete to earn custom-made achievements in classic games through emulation. Achievements are made by and for the community. We provide various custom-built emulators for you to use which will detect when you have completed various challenges. Once logged in, the emulators will post the achievements you've completed back to the site, so you can check and compare your progress to your friends.\n\n\nHere's an example of RAGens, playing Streets of Rage 2. You will see two leaderboard attempt counters (bottom-right), one achievement popping and finally the overlay (press ESC):\n\n\n\n\nWhich emulator do I need to use?\n\n\nThe official RetroAchievements.org emulators are all Windows-based. For other Operational Systems you can use RetroArch. More information below:\n\n\nOfficial RetroAchievements.org emulators\n\n\nPlease download the emulator of your choice from \nthe download page\n, log in using your username and password, then load a ROM and play! See the following video for a demonstration:\n\n\nhttps://www.youtube.com/watch?v=rKY2mZjurJw\n\n\nHow do I access the Achievement Overlay?\n\n\nNormally, this will be set up on 'ESC' keyboard key, or the pause function in the game. In most emulators, a game must be active for it to be functional.\n\n\nSome of the emulators should already be setup assigning a controller button to view the achievement overlay. Generally ESC on the keyboard should activate it, but if you want to assign it to a controller, see \nthis link\n.\n\n\nRetroArch emulators\n\n\nFor non-Windows Operational Systems you need to use \nRetroArch\n.\n\n\nCurrently you can earn achievements via RetroArch on the following platforms:\n\n\n\n\nWindows\n\n\nLinux\n\n\nMac\n\n\nAndroid (yes! you can earn cheevos on-the-go with your Android phone!)\n\n\nPS Vita (needs to be hacked with \nHENkaku\n)\n\n\nWii U (needs to be hacked)\n\n\nRaspberry Pi (recommended systems: \nRetroPie\n, \nlakka\n and \nRecalBox\n\n\n\n\nYou can \nget RetroArch here\n.\n\n\nOnce you installed and did the initial configuration, follow this guide to setup Achievements: \nhttps://docs.libretro.com/guides/retroachievements/\n\n\nKeep in mind that not every RetroArch core is compatible with RetroAchievements. \nCheck this list to see wich one to choose\n.\n\n\nMy welcome email has gone missing!\n\n\nUnfortunately sometimes the welcome email has been known to go missing. If this happens, please log in with your username/password you registered with, then visit your settings page. At the top you'll find the option to resend your registration email.\n\n\nWhere can I find ROMs?\n\n\nNot here. Unfortunately it is illegal to host or distribute copyright ROMs. To extract the ROM file from your cartridges, you can use a tool such as the Retrode or similar, then you can use the ROM file with our emulators. Other websites host ROM files that you could use with our emulators, but we do not condone downloading or playing ROMs for games you do not own.\n\n\nWhy is my game not loading up achievement?\n\n\nEither:\n\n\n\n\nIt doesn't have achievements,\n\n\nYou have the incorrect rom.\n\n\n\n\nFor more details read here: \nhttp://retroachievements.org/viewtopic.php?t=5422\nc=27355\n\n\nIf you are a Linux user, you can use this tool to check if your ROM is OK for RetroAchievements: \nhttps://github.com/meleu/hascheevos\n\n\nWhat is hardcore mode?\n\n\nHardcore mode is an additional feature to separate out the good gamers from the great gamers: Hardcore mode disables \nall\n savestate ability in the emulator: you would not be able to save and reload at any time. You would have to complete the game and get the achievements first time, just like it were on the original console. In reward for this, you will earn both the standard and the hardcore achievement, in effect earning double points! A regular game worth 400 points, is now worth 800 if you complete it fully on hardcore! For example: if you complete the game fully for 400 points, you then have the opportunity to earn another 400 on hardcore.\n\n\nThis achievement didn't trigger! (or triggered at a wrong time)\n\n\nThere's a feature built-in to the emulators that allows you to report broken achievements that occur at the wrong time, or not at all. Go to the RetroAchievements -\n Report Broken Achievements.\n\n\nSee this example:\n\n\n.\n\n\nThere's also a detailed video explaining how to use it: \nhttps://www.youtube.com/watch?v=TTHbm700Y-Y\n\n\nAdd details of the state of your game, when it triggered/didn't trigger, what game mode, where you were when it happened/didn't happen, if you had reset the game recently, anything else you think may be relevant to the achievement. This is necessary for our system so the devs know where there is a problem.\n\n\nIf you have an evidence of completion you can also contact an admin and the achievement can be manually awarded to you. Make proof and post in the \n#help-me\n in \nDiscord\n the tag @admin. Or send a PM (personal message) to an admin level user.\n\n\nQualified proof:\n Screenshots that show that one is playing in hardcore and have completed the achievment. \nVideo of such (even better)\n. Examples of achievements you've earned that supersede this achievment, e.g. You got the achievment for 10k points but the one for 5k points didn't trigger.\n\n\nHere's a \nperfect example of ideal proof provided by gr1nya\n.\n\n\nI want to make achievements!\n\n\nGood to hear!\n The best place to start is here: \nGetting Started as an Achievement Developer\n. Once you're familiar with the Memory Inspector and the other Achievements related dialogs, you can go to other \nDeveloper Docs\n.\n\n\nPlease don't hesitate to ask if you need help, don't struggle! The most important thing is to make sure you're enjoying whatever it is you're doing. If you're not having fun, don't do it. But if you get frustrated and want to persist, just drop a message on the \nforums\n or in \nDiscord server\n and someone will get back to you shortly.\n\n\nWhat are the White points?\n\n\nWhite points are secondary based on how hard an achievement is. Explained \nhere in detail\n.\n\n\nWhat's considered cheating (for hardcore)? What if I find evidence of a cheater?\n\n\nExploiting of achievement sets and deliberate alteration or modification of game, emulator, memory, speed (fast-forward allowed) or set. Loading battery saves to get achievements out of place without earning them during normal gameplay.\n\n\nAll in-game cheats are disallowed unless it's specified in the achievement's description or comments in the achievement's page.\n\n\nWe live by an honor code most of all. If you find an evidence of a cheater, send the evidence to \nRAdmin\n or email to \nRAmodmail@gmail.com\n.\n\n\nWhat if I got an achievement I didn't earn?\n\n\nSame with not getting it when you should in most cases you'll want to create a ticket report (see above), leaving an explanation of what went wrong. You'll also want to remove these achievements from your account so you can get the satisfaction of truly earning them.\n\n\n\nResetting unearned achievements\n\n\nHow do I reset my password? (If I don't remember my password)\n\n\nRight Here:\n\nhttp://retroachievements.org/resetPassword.php\n\n\nWhy is my game not loading achievements?\n\n\nSee: \nWhy is my game not loading achievments", 
            "title": "FAQ"
        }, 
        {
            "location": "/FAQ/#what-is-retroachievementsorg", 
            "text": "RetroAchievements.org  is a community who collaborate and compete to earn custom-made achievements in classic games through emulation. Achievements are made by and for the community. We provide various custom-built emulators for you to use which will detect when you have completed various challenges. Once logged in, the emulators will post the achievements you've completed back to the site, so you can check and compare your progress to your friends.  Here's an example of RAGens, playing Streets of Rage 2. You will see two leaderboard attempt counters (bottom-right), one achievement popping and finally the overlay (press ESC):", 
            "title": "What is RetroAchievements.org?"
        }, 
        {
            "location": "/FAQ/#which-emulator-do-i-need-to-use", 
            "text": "The official RetroAchievements.org emulators are all Windows-based. For other Operational Systems you can use RetroArch. More information below:", 
            "title": "Which emulator do I need to use?"
        }, 
        {
            "location": "/FAQ/#official-retroachievementsorg-emulators", 
            "text": "Please download the emulator of your choice from  the download page , log in using your username and password, then load a ROM and play! See the following video for a demonstration:  https://www.youtube.com/watch?v=rKY2mZjurJw", 
            "title": "Official RetroAchievements.org emulators"
        }, 
        {
            "location": "/FAQ/#how-do-i-access-the-achievement-overlay", 
            "text": "Normally, this will be set up on 'ESC' keyboard key, or the pause function in the game. In most emulators, a game must be active for it to be functional.  Some of the emulators should already be setup assigning a controller button to view the achievement overlay. Generally ESC on the keyboard should activate it, but if you want to assign it to a controller, see  this link .", 
            "title": "How do I access the Achievement Overlay?"
        }, 
        {
            "location": "/FAQ/#retroarch-emulators", 
            "text": "For non-Windows Operational Systems you need to use  RetroArch .  Currently you can earn achievements via RetroArch on the following platforms:   Windows  Linux  Mac  Android (yes! you can earn cheevos on-the-go with your Android phone!)  PS Vita (needs to be hacked with  HENkaku )  Wii U (needs to be hacked)  Raspberry Pi (recommended systems:  RetroPie ,  lakka  and  RecalBox   You can  get RetroArch here .  Once you installed and did the initial configuration, follow this guide to setup Achievements:  https://docs.libretro.com/guides/retroachievements/  Keep in mind that not every RetroArch core is compatible with RetroAchievements.  Check this list to see wich one to choose .", 
            "title": "RetroArch emulators"
        }, 
        {
            "location": "/FAQ/#my-welcome-email-has-gone-missing", 
            "text": "Unfortunately sometimes the welcome email has been known to go missing. If this happens, please log in with your username/password you registered with, then visit your settings page. At the top you'll find the option to resend your registration email.", 
            "title": "My welcome email has gone missing!"
        }, 
        {
            "location": "/FAQ/#where-can-i-find-roms", 
            "text": "Not here. Unfortunately it is illegal to host or distribute copyright ROMs. To extract the ROM file from your cartridges, you can use a tool such as the Retrode or similar, then you can use the ROM file with our emulators. Other websites host ROM files that you could use with our emulators, but we do not condone downloading or playing ROMs for games you do not own.", 
            "title": "Where can I find ROMs?"
        }, 
        {
            "location": "/FAQ/#why-is-my-game-not-loading-up-achievement", 
            "text": "Either:   It doesn't have achievements,  You have the incorrect rom.   For more details read here:  http://retroachievements.org/viewtopic.php?t=5422 c=27355  If you are a Linux user, you can use this tool to check if your ROM is OK for RetroAchievements:  https://github.com/meleu/hascheevos", 
            "title": "Why is my game not loading up achievement?"
        }, 
        {
            "location": "/FAQ/#what-is-hardcore-mode", 
            "text": "Hardcore mode is an additional feature to separate out the good gamers from the great gamers: Hardcore mode disables  all  savestate ability in the emulator: you would not be able to save and reload at any time. You would have to complete the game and get the achievements first time, just like it were on the original console. In reward for this, you will earn both the standard and the hardcore achievement, in effect earning double points! A regular game worth 400 points, is now worth 800 if you complete it fully on hardcore! For example: if you complete the game fully for 400 points, you then have the opportunity to earn another 400 on hardcore.", 
            "title": "What is hardcore mode?"
        }, 
        {
            "location": "/FAQ/#this-achievement-didnt-trigger-or-triggered-at-a-wrong-time", 
            "text": "There's a feature built-in to the emulators that allows you to report broken achievements that occur at the wrong time, or not at all. Go to the RetroAchievements -  Report Broken Achievements.  See this example:  .  There's also a detailed video explaining how to use it:  https://www.youtube.com/watch?v=TTHbm700Y-Y  Add details of the state of your game, when it triggered/didn't trigger, what game mode, where you were when it happened/didn't happen, if you had reset the game recently, anything else you think may be relevant to the achievement. This is necessary for our system so the devs know where there is a problem.  If you have an evidence of completion you can also contact an admin and the achievement can be manually awarded to you. Make proof and post in the  #help-me  in  Discord  the tag @admin. Or send a PM (personal message) to an admin level user.  Qualified proof:  Screenshots that show that one is playing in hardcore and have completed the achievment.  Video of such (even better) . Examples of achievements you've earned that supersede this achievment, e.g. You got the achievment for 10k points but the one for 5k points didn't trigger.  Here's a  perfect example of ideal proof provided by gr1nya .", 
            "title": "This achievement didn't trigger! (or triggered at a wrong time)"
        }, 
        {
            "location": "/FAQ/#i-want-to-make-achievements", 
            "text": "Good to hear!  The best place to start is here:  Getting Started as an Achievement Developer . Once you're familiar with the Memory Inspector and the other Achievements related dialogs, you can go to other  Developer Docs .  Please don't hesitate to ask if you need help, don't struggle! The most important thing is to make sure you're enjoying whatever it is you're doing. If you're not having fun, don't do it. But if you get frustrated and want to persist, just drop a message on the  forums  or in  Discord server  and someone will get back to you shortly.", 
            "title": "I want to make achievements!"
        }, 
        {
            "location": "/FAQ/#what-are-the-white-points", 
            "text": "White points are secondary based on how hard an achievement is. Explained  here in detail .", 
            "title": "What are the White points?"
        }, 
        {
            "location": "/FAQ/#whats-considered-cheating-for-hardcore-what-if-i-find-evidence-of-a-cheater", 
            "text": "Exploiting of achievement sets and deliberate alteration or modification of game, emulator, memory, speed (fast-forward allowed) or set. Loading battery saves to get achievements out of place without earning them during normal gameplay.  All in-game cheats are disallowed unless it's specified in the achievement's description or comments in the achievement's page.  We live by an honor code most of all. If you find an evidence of a cheater, send the evidence to  RAdmin  or email to  RAmodmail@gmail.com .", 
            "title": "What's considered cheating (for hardcore)? What if I find evidence of a cheater?"
        }, 
        {
            "location": "/FAQ/#what-if-i-got-an-achievement-i-didnt-earn", 
            "text": "Same with not getting it when you should in most cases you'll want to create a ticket report (see above), leaving an explanation of what went wrong. You'll also want to remove these achievements from your account so you can get the satisfaction of truly earning them.  \nResetting unearned achievements", 
            "title": "What if I got an achievement I didn't earn?"
        }, 
        {
            "location": "/FAQ/#how-do-i-reset-my-password-if-i-dont-remember-my-password", 
            "text": "Right Here: http://retroachievements.org/resetPassword.php", 
            "title": "How do I reset my password? (If I don't remember my password)"
        }, 
        {
            "location": "/FAQ/#why-is-my-game-not-loading-achievements", 
            "text": "See:  Why is my game not loading achievments", 
            "title": "Why is my game not loading achievements?"
        }, 
        {
            "location": "/Downloads/", 
            "text": "Emulator packages\n\n\nThese don't contain Overlay themes, you can download default and custom ones using link's below. These links are kept current.\n\n\n\n\nRAGens\n - Sega Genesis/Mega Drive  \n\n\nRASnes9x\n - Super Nintendo Entertainment System  \n\n\nRAFCEUx\n - Nintendo Entertainment System  \n\n\nRAVBA\n - Nintendo Gameboy/Gameboy Color/Gameboy Advance  \n\n\nRAOotake\n - PCEngine/TurboGrafx  \n\n\nRAMeka\n - Sega Master System  \n\n\nRAP64\n - Nintendo 64  \n\n\nRAHandy\n - Atari Lynx\n\n\nRALibretro\n - (\nWork in Progress\n) a libretro front-end for cheevos development.\n\n\n\n\nOverlay themes\n\n\nPreview gallery\n\n\nSingle\n\n\n\n\nDefault\n by \nScott\n  \n\n\nCrash Bandicoot\n by \nDexterspet\n  \n\n\nMega Man Classic\n by \nSalsa\n  \n\n\nNintendo Mix (Slumber Party)\n by \nSalsa\n  \n\n\nRoll-chan Evolution\n by \nSalsa\n  \n\n\nThe Legend of Zelda Classic\n by \nSalsa\n  \n\n\nYs Book I \n II\n by \nSalsa\n  \n\n\nSonic\n by \nmatheus2653\n  \n\n\nArnold Schwarzenegger\n by \nSalsa\n  \n\n\nReginaldo Rossi\n by \nSalsa\n  \n\n\n\n\nMultiple (customizable)\n\n\n\n\nThe Legend of Zelda franchise\n by \nkdecks\n\n\n\n\nTools\n\n\n\n\nLunar IPS\n - ROM patcher for hacks and other ROM patches\n\n\nAlcohol Portable\n - Virtual Drive Software (For PCEngine)\n\n\n7-Zip\n - For unpacking downloads from this page\n\n\n\n\nOnline Tools\n\n\n\n\nCRC32 checksum\n - For checking that you have the correct ROM\n\n\nMD5 checksum\n - For checking that you have the correct ROM\n\n\nMarc Robledo's online RomPatcher\n - online ROM patcher for hacks and other ROM patches", 
            "title": "Downloads"
        }, 
        {
            "location": "/Downloads/#emulator-packages", 
            "text": "These don't contain Overlay themes, you can download default and custom ones using link's below. These links are kept current.   RAGens  - Sega Genesis/Mega Drive    RASnes9x  - Super Nintendo Entertainment System    RAFCEUx  - Nintendo Entertainment System    RAVBA  - Nintendo Gameboy/Gameboy Color/Gameboy Advance    RAOotake  - PCEngine/TurboGrafx    RAMeka  - Sega Master System    RAP64  - Nintendo 64    RAHandy  - Atari Lynx  RALibretro  - ( Work in Progress ) a libretro front-end for cheevos development.", 
            "title": "Emulator packages"
        }, 
        {
            "location": "/Downloads/#overlay-themes", 
            "text": "Preview gallery", 
            "title": "Overlay themes"
        }, 
        {
            "location": "/Downloads/#single", 
            "text": "Default  by  Scott     Crash Bandicoot  by  Dexterspet     Mega Man Classic  by  Salsa     Nintendo Mix (Slumber Party)  by  Salsa     Roll-chan Evolution  by  Salsa     The Legend of Zelda Classic  by  Salsa     Ys Book I   II  by  Salsa     Sonic  by  matheus2653     Arnold Schwarzenegger  by  Salsa     Reginaldo Rossi  by  Salsa", 
            "title": "Single"
        }, 
        {
            "location": "/Downloads/#multiple-customizable", 
            "text": "The Legend of Zelda franchise  by  kdecks", 
            "title": "Multiple (customizable)"
        }, 
        {
            "location": "/Downloads/#tools", 
            "text": "Lunar IPS  - ROM patcher for hacks and other ROM patches  Alcohol Portable  - Virtual Drive Software (For PCEngine)  7-Zip  - For unpacking downloads from this page", 
            "title": "Tools"
        }, 
        {
            "location": "/Downloads/#online-tools", 
            "text": "CRC32 checksum  - For checking that you have the correct ROM  MD5 checksum  - For checking that you have the correct ROM  Marc Robledo's online RomPatcher  - online ROM patcher for hacks and other ROM patches", 
            "title": "Online Tools"
        }, 
        {
            "location": "/Site-Change-Log/", 
            "text": "22-December-2017\n\n\nSite update\n\n\n\n\nUntracked status has been added as a possible user status. Untracked players do not show up in the global ranking. Instead of banning players who are found to be cheating they can be given the status of untracked. Also players who don't want to show up in the global rankings can also request this status, given by admin.\n\n\n\n\n16-December-2017\n\n\nEmulators Update [v0.068]\n\n\nFor RANes, RAGens, RAVBA, and RASnes9x\n   \n\n\nGeneral Changes\n\n\n\n\nGame Titles with special characters such as \n~\n or \n[\n no long appear at the start of the entry database but at the end.\n\n\n\n\nRich Presence:\n\n\n\n\nParse Rich Presence has been changed into Rich Presence monitor. This will actively display rich presence \n\n\nThe Rich Presence Monitor also supports much more unicode \n\n\nRich presence is displayed every 2 minutes instead of every 10. \n\n\n\n\nLinking:\n \n\n\n\n\nOnly Developers and Admin are allowed to link ROMs to game entries. This is to prevent unsupported ROM versions which will cause achievement errors and to prevent some forms of cheating. \n\n\n\n\nDeveloper Changes\n\n\nAchievement Sets Window:\n\n\n\n\nButton layout reworked and compressed \n\n\nActivate All has been added to Local Achievements \n\n\nButtons removed: Vote Up, Vote Down, Goto Web page, Close \n\n\n\n\nRenames:\n\n\n\n\nFetch Latest \u21d2 Refresh from Server \n\n\nReset Achieved Status, Activate \u21d2 Activate Selected \n\n\nSave Local \u21d2 Save All Local \n\n\nAchievement Processing Active? \u21d2 Processing Active \n\n\nAchievements found \u21d2 Num Achievements Found \n\n\nIn local Commit Selected \u21d2 Promote to Unofficial \n\n\n\n\nBugs Fixes:\n\n\n\n\nChanging the points value of an achievement even after it's been updated the points value in the Achievements window does not update. \n\n\nActivating an achievement and then making changes to it changes it's active status display from Yes to No even though it is still active. \n\n\nAfter committing a change and then fetching latest or reloading the rom the changes made are no longer visible. \n\n\nOther \"under the hood\" bug fixes.\n\n\n\n\n1-December-2017\n\n\nEmulators Update [v0.067]\n\n\nFor RANes, RAGens, RAVBA, and RASnes9x\n\n\nDeveloper Changes\n\n\nMemory Inspector:\n\n\n\n\nYou can now scroll with your mouse-wheel in the memory viewport. \n\n\nThe memory viewer cursor no longer defaults to line 5, instead you are allowed to move it within a current viewport freely. \nWhen you move past the top or bottom the view will scroll up or down and keep the cursor position on the top most or bottom most line. \n\n\nIn the memory viewport hitting page down will go down 1 page depending on how many addresses you have in view. Previously it would only go down 5 lines. \n\n\nIn the memory viewport while selecting an address from the \"Watching\" it will put the selected address in focus on the center of the viewport relative to the length of the viewport. \n\n\nWhile putting values into the Mem Viewport you can wrap around the right side instead of getting stopped at 0xf of that line. This allows for quicker corrupting, which can sometimes be useful for finding addresses. \n\n\nWhen deleting a note in the Mem Viewport the selected stays at current address instead of going to 0x0. \n\n\nNotes window has been extended to 5 from 3 lines. \n\n\nNotes window now has word wrap and accept line returns greater than 3. \n\n\nView Notes Button has been added below Delete. \n\n\nMemory Search Range has been added allowing for Custom Range System RAM and Game RAM. \n\n\nSearching for hex values in Given Value is allowed with the prefix 0x. \n\n\n\n\nAchievement Editor:\n\n\n\n\n\"Clone selected\" achievement has been replaced with \"Copy\" and \"Paste\" buttons. \nYou are now able to copy and paste multiple selected requirements within an achievement, to an alt group or to another achievement! \n\n\n\"Delete Selected\" will now delete ALL selected achievements instead of just one at a time.(edited) \n\n\n\n\nRich Presence:\n\n\n\n\nNo longer displays \"Unknown\". It just leaves a blank non-space. Devs this means you don't need to sweat as much about about those knowing every value state of an address in RPS. \n\n\nIf someone is playing a set without achievement or a Rich Presence script it the Rich Presence will say \"Playing [game name]\".\n\n\n\n\n7-November-2017\n\n\nSite Update\n\n\nTime stamps on user, game pages and in many places now show the year. \n\n\nEmulators Update [v0.066]\n\n\nFor RANes, RAGens, RAVBA, and RASnes9x\n \n\n\nGeneral Changes\n\n\n\n\nMore anti-cheat measures were included. \n\n\nSoft IPS patching is removed in the listed emulators. Caused some incompatibilities. \n\n\nIssue with leaderboards popping twice is resolved. \n\n\n\n\nDeveloper Changes\n\n\n\n\nAchievement Editor window is slightly extended. \n\n\nScroll bar retains position when editing longer achievements. \n\n\nIssue with uploading broken badges is fixed. \n\n\n\n\n30-October-2017\n\n\nSite Update\n\n\n\n\nPassword Reset is fixed and working.\nNow if you forget your password you can have a password reset link emailed to you: \nhttp://retroachievements.org/resetPassword.php\n\n\n\n\n6-October-2017\n\n\nSite Update\n\n\nStarted the log\n\n\n\n\nRich Presence has been fixed: \nNow online shows all online players. Developers are able to create, edit and save rich presence. Number of currently online is no long visible by online players. Active players shows a time stamp of last updated.", 
            "title": "Site Change Log"
        }, 
        {
            "location": "/Site-Change-Log/#22-december-2017", 
            "text": "", 
            "title": "22-December-2017"
        }, 
        {
            "location": "/Site-Change-Log/#site-update", 
            "text": "Untracked status has been added as a possible user status. Untracked players do not show up in the global ranking. Instead of banning players who are found to be cheating they can be given the status of untracked. Also players who don't want to show up in the global rankings can also request this status, given by admin.", 
            "title": "Site update"
        }, 
        {
            "location": "/Site-Change-Log/#16-december-2017", 
            "text": "", 
            "title": "16-December-2017"
        }, 
        {
            "location": "/Site-Change-Log/#emulators-update-v0068", 
            "text": "For RANes, RAGens, RAVBA, and RASnes9x", 
            "title": "Emulators Update [v0.068]"
        }, 
        {
            "location": "/Site-Change-Log/#general-changes", 
            "text": "Game Titles with special characters such as  ~  or  [  no long appear at the start of the entry database but at the end.   Rich Presence:   Parse Rich Presence has been changed into Rich Presence monitor. This will actively display rich presence   The Rich Presence Monitor also supports much more unicode   Rich presence is displayed every 2 minutes instead of every 10.    Linking:     Only Developers and Admin are allowed to link ROMs to game entries. This is to prevent unsupported ROM versions which will cause achievement errors and to prevent some forms of cheating.", 
            "title": "General Changes"
        }, 
        {
            "location": "/Site-Change-Log/#developer-changes", 
            "text": "", 
            "title": "Developer Changes"
        }, 
        {
            "location": "/Site-Change-Log/#achievement-sets-window", 
            "text": "Button layout reworked and compressed   Activate All has been added to Local Achievements   Buttons removed: Vote Up, Vote Down, Goto Web page, Close", 
            "title": "Achievement Sets Window:"
        }, 
        {
            "location": "/Site-Change-Log/#renames", 
            "text": "Fetch Latest \u21d2 Refresh from Server   Reset Achieved Status, Activate \u21d2 Activate Selected   Save Local \u21d2 Save All Local   Achievement Processing Active? \u21d2 Processing Active   Achievements found \u21d2 Num Achievements Found   In local Commit Selected \u21d2 Promote to Unofficial", 
            "title": "Renames:"
        }, 
        {
            "location": "/Site-Change-Log/#bugs-fixes", 
            "text": "Changing the points value of an achievement even after it's been updated the points value in the Achievements window does not update.   Activating an achievement and then making changes to it changes it's active status display from Yes to No even though it is still active.   After committing a change and then fetching latest or reloading the rom the changes made are no longer visible.   Other \"under the hood\" bug fixes.", 
            "title": "Bugs Fixes:"
        }, 
        {
            "location": "/Site-Change-Log/#1-december-2017", 
            "text": "", 
            "title": "1-December-2017"
        }, 
        {
            "location": "/Site-Change-Log/#emulators-update-v0067", 
            "text": "For RANes, RAGens, RAVBA, and RASnes9x", 
            "title": "Emulators Update [v0.067]"
        }, 
        {
            "location": "/Site-Change-Log/#developer-changes_1", 
            "text": "Memory Inspector:   You can now scroll with your mouse-wheel in the memory viewport.   The memory viewer cursor no longer defaults to line 5, instead you are allowed to move it within a current viewport freely. \nWhen you move past the top or bottom the view will scroll up or down and keep the cursor position on the top most or bottom most line.   In the memory viewport hitting page down will go down 1 page depending on how many addresses you have in view. Previously it would only go down 5 lines.   In the memory viewport while selecting an address from the \"Watching\" it will put the selected address in focus on the center of the viewport relative to the length of the viewport.   While putting values into the Mem Viewport you can wrap around the right side instead of getting stopped at 0xf of that line. This allows for quicker corrupting, which can sometimes be useful for finding addresses.   When deleting a note in the Mem Viewport the selected stays at current address instead of going to 0x0.   Notes window has been extended to 5 from 3 lines.   Notes window now has word wrap and accept line returns greater than 3.   View Notes Button has been added below Delete.   Memory Search Range has been added allowing for Custom Range System RAM and Game RAM.   Searching for hex values in Given Value is allowed with the prefix 0x.    Achievement Editor:   \"Clone selected\" achievement has been replaced with \"Copy\" and \"Paste\" buttons. \nYou are now able to copy and paste multiple selected requirements within an achievement, to an alt group or to another achievement!   \"Delete Selected\" will now delete ALL selected achievements instead of just one at a time.(edited)    Rich Presence:   No longer displays \"Unknown\". It just leaves a blank non-space. Devs this means you don't need to sweat as much about about those knowing every value state of an address in RPS.   If someone is playing a set without achievement or a Rich Presence script it the Rich Presence will say \"Playing [game name]\".", 
            "title": "Developer Changes"
        }, 
        {
            "location": "/Site-Change-Log/#7-november-2017", 
            "text": "", 
            "title": "7-November-2017"
        }, 
        {
            "location": "/Site-Change-Log/#site-update_1", 
            "text": "Time stamps on user, game pages and in many places now show the year.", 
            "title": "Site Update"
        }, 
        {
            "location": "/Site-Change-Log/#emulators-update-v0066", 
            "text": "For RANes, RAGens, RAVBA, and RASnes9x", 
            "title": "Emulators Update [v0.066]"
        }, 
        {
            "location": "/Site-Change-Log/#general-changes_1", 
            "text": "More anti-cheat measures were included.   Soft IPS patching is removed in the listed emulators. Caused some incompatibilities.   Issue with leaderboards popping twice is resolved.", 
            "title": "General Changes"
        }, 
        {
            "location": "/Site-Change-Log/#developer-changes_2", 
            "text": "Achievement Editor window is slightly extended.   Scroll bar retains position when editing longer achievements.   Issue with uploading broken badges is fixed.", 
            "title": "Developer Changes"
        }, 
        {
            "location": "/Site-Change-Log/#30-october-2017", 
            "text": "", 
            "title": "30-October-2017"
        }, 
        {
            "location": "/Site-Change-Log/#site-update_2", 
            "text": "Password Reset is fixed and working.\nNow if you forget your password you can have a password reset link emailed to you:  http://retroachievements.org/resetPassword.php", 
            "title": "Site Update"
        }, 
        {
            "location": "/Site-Change-Log/#6-october-2017", 
            "text": "", 
            "title": "6-October-2017"
        }, 
        {
            "location": "/Site-Change-Log/#site-update_3", 
            "text": "Started the log   Rich Presence has been fixed: \nNow online shows all online players. Developers are able to create, edit and save rich presence. Number of currently online is no long visible by online players. Active players shows a time stamp of last updated.", 
            "title": "Site Update"
        }, 
        {
            "location": "/How-to-contribute-if-you-are-not-a-developer/", 
            "text": "Even if you don't know how to create achievements there are many ways to contribute with the RetroAchievements community. Here are some examples.\n\n\nReport broken achievements\n\n\nIf an achievement triggered at a wrong time or didn't trigger at all, please report it.\n\n\nAnother important situation that needs to be reported is a cheevo triggering by using some kind of cheat in the game (e.g. stage select code), or by loading a saved game.\n\n\nTo report a broken cheevo go to RetroAchievements -\n Report Broken Achievements, this feature is only available on official emulators (not on RetroArch).\n\n\nSee this example:\n\n\n.\n\n\nAdd details of the state of your game, when it triggered/didn't trigger, what game mode, where you were when it happened/didn't happen, if you had reset the game recently, anything else you think may be relevant to the achievement. This is necessary for our system so the devs know where there is a problem.\n\n\nSuggest cool achievements/challenges\n\n\nIf you know a game very well, you probably can have some cool ideas of challenges for the game. Post your ideas on the forum topic related to the game.\n\n\nWe have \na guide on how to think about and design good achievements\n, not the technical side but the conceptual. Then even non-developers can get some inspiration from that info.\n\n\nFeedback is always welcome\n\n\nGive feedback in the forums about what you like or dislike about the achievements sets. Be specific and leave details.\n\n\nMake badges for the achievements\n\n\nIf you like to play with graphics you can create some art for the achievements badges or icons for the games. Using the screenshot feature from the emulator itself can help with this, and then you can edit to make something cool.\n\n\nYou can see more info about it on the \nBadge and Icon Creation page\n.\n\n\nParticipate in community events\n\n\nSuch as Achievement of the Week or other events that happens on \nour discord server\n.", 
            "title": "How to contribute if you are not a developer"
        }, 
        {
            "location": "/How-to-contribute-if-you-are-not-a-developer/#report-broken-achievements", 
            "text": "If an achievement triggered at a wrong time or didn't trigger at all, please report it.  Another important situation that needs to be reported is a cheevo triggering by using some kind of cheat in the game (e.g. stage select code), or by loading a saved game.  To report a broken cheevo go to RetroAchievements -  Report Broken Achievements, this feature is only available on official emulators (not on RetroArch).  See this example:  .  Add details of the state of your game, when it triggered/didn't trigger, what game mode, where you were when it happened/didn't happen, if you had reset the game recently, anything else you think may be relevant to the achievement. This is necessary for our system so the devs know where there is a problem.", 
            "title": "Report broken achievements"
        }, 
        {
            "location": "/How-to-contribute-if-you-are-not-a-developer/#suggest-cool-achievementschallenges", 
            "text": "If you know a game very well, you probably can have some cool ideas of challenges for the game. Post your ideas on the forum topic related to the game.  We have  a guide on how to think about and design good achievements , not the technical side but the conceptual. Then even non-developers can get some inspiration from that info.", 
            "title": "Suggest cool achievements/challenges"
        }, 
        {
            "location": "/How-to-contribute-if-you-are-not-a-developer/#feedback-is-always-welcome", 
            "text": "Give feedback in the forums about what you like or dislike about the achievements sets. Be specific and leave details.", 
            "title": "Feedback is always welcome"
        }, 
        {
            "location": "/How-to-contribute-if-you-are-not-a-developer/#make-badges-for-the-achievements", 
            "text": "If you like to play with graphics you can create some art for the achievements badges or icons for the games. Using the screenshot feature from the emulator itself can help with this, and then you can edit to make something cool.  You can see more info about it on the  Badge and Icon Creation page .", 
            "title": "Make badges for the achievements"
        }, 
        {
            "location": "/How-to-contribute-if-you-are-not-a-developer/#participate-in-community-events", 
            "text": "Such as Achievement of the Week or other events that happens on  our discord server .", 
            "title": "Participate in community events"
        }, 
        {
            "location": "/Issues-when-NOT-playing-in-hardcore-mode/", 
            "text": "Hardcore/Softcore\n\n\nSome users like to use the save/load state feature to save their progress in a game. As you may know, this feature isn't allowed when playing with hardcore mode. But some users aren't hardcore gamers and prefer to keep hardcore mode disabled (let's call this mode as softcore).\n\n\nFrom time to time some users report that an achievement isn't triggering, and when asked they say they were playing in softcore.\n\n\nOne thing you all have to keep in mind is:\n\n\n\n\nIf you use the load state feature expect to have issues of cheevos not triggering when they are expected to trigger.\n\n\n\n\nHere we'll try to explain for those who don't know the details of achievements development why this kind of issue happen.\n\n\nBasic concept behind an achievement\n\n\nTechnically an achievement is a group of conditions that must be met in a particular frame of the video game.\n\n\nWhen you launch a game on an emulator with the RetroAchievements feature, the emulator is always checking if those conditions are met in the current frame. When all conditions for a particular achievement are met, it is awarded and the emulator stops checking the conditions for that achievement.\n\n\nExamples of conditions:\n\n\n\n\nlifebar is full\n\n\nlifebar decreased\n\n\nhave 9 lives\n\n\ncurrently on stage 3\n\n\nat the title screen of the game\n\n\nstarting the boss fight\n\n\nthe game is paused\n\n\n\n\nThe problem with the softcore is that when you load a saved state you can ruin the logic behind an achievement.\n\n\nExamples\n\n\nExample 1: Beat the game without passwords\n\n\nImagine a game with 5 stages and with the password feature.\n\n\nProbably the conditions to trigger the \"Beat the game without passwords\" are (in a real cheevo there will be more conditions, but for this explanation let's consider only these ones):\n\n\n\n\nbe at stage 1 (and memorize this event as something that happened)\n\n\nbe at stage 2 (memorize it)\n\n\nbe at stage 3 (memorize it)\n\n\nbe at stage 4 (memorize it)\n\n\nbe at stage 5 (memorize it)\n\n\nfinish stage 5\n\n\n\n\nSo to get this achievement you have to pass through all stages and then beat the game.\n\n\nWhen you are at the stage 1, the emulator memorizes it, same thing for all other stages. And when you finish the stage 5 (beat the game) you get the achievement.\n\n\nNow imagine this scenario:\n\n\n\n\na softcore player started the game and played stages 1, 2 and 3\n\n\nhe needed to stop playing when at stage 4 and then he saved a state to continue later\n\n\nhe closed the emulator\n\n\nlater he could play again, started the game and loaded the state he saved\n\n\nplayed stages 4, 5 and beated the game\n\n\n\n\nIn this scenario the achievement won't trigger.\n\n\nAfter closing the emulator it \"forgets\" that you passed through stages 1, 2 and 3. When you run the emulator/game again and load the state being on stage 4, the emulator won't detect that you passed through the previous stages. Then the achievement won't trigger.\n\n\nExample 2: Defeat boss X without taking damage\n\n\nMost likely the conditions to be met in a frame to make this achievement trigger are:\n\n\n\n\nentered the boss room (and memorize this event as something that happened).\n\n\nif take any damage, forget it entered the boss room.\n\n\nbeat the boss.\n\n\n\n\nIn other words: to get this achievement the emulator must \"know\" that you entered the boss room, didn't get any damage, and beated the boss.\n\n\nThe important detail to pay attention here: when you get any damage, the emulator \"forgets\" that you entered the boss room. Then even if you load a state to a point where you didn't get any damage but already entered the room, the emulator won't detect that you entered the room. And then the achievement won't trigger.\n\n\nFinal Words\n\n\nWhen reporting a broken achievement give as many details as possible, \nand don't forget to mention if you are playing on hardcore mode or not\n.\n\n\nIf you want to request an admin to manually award to you an achievement that didn't triggered, be sure to provide a qualified proof. Specially for achievements like those in the examples above (no damage, no passwords, no death, etc).", 
            "title": "Issues when NOT playing in hardcore mode"
        }, 
        {
            "location": "/Issues-when-NOT-playing-in-hardcore-mode/#hardcoresoftcore", 
            "text": "Some users like to use the save/load state feature to save their progress in a game. As you may know, this feature isn't allowed when playing with hardcore mode. But some users aren't hardcore gamers and prefer to keep hardcore mode disabled (let's call this mode as softcore).  From time to time some users report that an achievement isn't triggering, and when asked they say they were playing in softcore.  One thing you all have to keep in mind is:   If you use the load state feature expect to have issues of cheevos not triggering when they are expected to trigger.   Here we'll try to explain for those who don't know the details of achievements development why this kind of issue happen.", 
            "title": "Hardcore/Softcore"
        }, 
        {
            "location": "/Issues-when-NOT-playing-in-hardcore-mode/#basic-concept-behind-an-achievement", 
            "text": "Technically an achievement is a group of conditions that must be met in a particular frame of the video game.  When you launch a game on an emulator with the RetroAchievements feature, the emulator is always checking if those conditions are met in the current frame. When all conditions for a particular achievement are met, it is awarded and the emulator stops checking the conditions for that achievement.  Examples of conditions:   lifebar is full  lifebar decreased  have 9 lives  currently on stage 3  at the title screen of the game  starting the boss fight  the game is paused   The problem with the softcore is that when you load a saved state you can ruin the logic behind an achievement.", 
            "title": "Basic concept behind an achievement"
        }, 
        {
            "location": "/Issues-when-NOT-playing-in-hardcore-mode/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/Issues-when-NOT-playing-in-hardcore-mode/#example-1-beat-the-game-without-passwords", 
            "text": "Imagine a game with 5 stages and with the password feature.  Probably the conditions to trigger the \"Beat the game without passwords\" are (in a real cheevo there will be more conditions, but for this explanation let's consider only these ones):   be at stage 1 (and memorize this event as something that happened)  be at stage 2 (memorize it)  be at stage 3 (memorize it)  be at stage 4 (memorize it)  be at stage 5 (memorize it)  finish stage 5   So to get this achievement you have to pass through all stages and then beat the game.  When you are at the stage 1, the emulator memorizes it, same thing for all other stages. And when you finish the stage 5 (beat the game) you get the achievement.  Now imagine this scenario:   a softcore player started the game and played stages 1, 2 and 3  he needed to stop playing when at stage 4 and then he saved a state to continue later  he closed the emulator  later he could play again, started the game and loaded the state he saved  played stages 4, 5 and beated the game   In this scenario the achievement won't trigger.  After closing the emulator it \"forgets\" that you passed through stages 1, 2 and 3. When you run the emulator/game again and load the state being on stage 4, the emulator won't detect that you passed through the previous stages. Then the achievement won't trigger.", 
            "title": "Example 1: Beat the game without passwords"
        }, 
        {
            "location": "/Issues-when-NOT-playing-in-hardcore-mode/#example-2-defeat-boss-x-without-taking-damage", 
            "text": "Most likely the conditions to be met in a frame to make this achievement trigger are:   entered the boss room (and memorize this event as something that happened).  if take any damage, forget it entered the boss room.  beat the boss.   In other words: to get this achievement the emulator must \"know\" that you entered the boss room, didn't get any damage, and beated the boss.  The important detail to pay attention here: when you get any damage, the emulator \"forgets\" that you entered the boss room. Then even if you load a state to a point where you didn't get any damage but already entered the room, the emulator won't detect that you entered the room. And then the achievement won't trigger.", 
            "title": "Example 2: Defeat boss X without taking damage"
        }, 
        {
            "location": "/Issues-when-NOT-playing-in-hardcore-mode/#final-words", 
            "text": "When reporting a broken achievement give as many details as possible,  and don't forget to mention if you are playing on hardcore mode or not .  If you want to request an admin to manually award to you an achievement that didn't triggered, be sure to provide a qualified proof. Specially for achievements like those in the examples above (no damage, no passwords, no death, etc).", 
            "title": "Final Words"
        }, 
        {
            "location": "/My-game-is-not-loading-achievements/", 
            "text": "Maybe you loaded up your game but you see a popup:\n\n\n\nThen you check the overlay (typically ESC) and see:\n\n\n\n\nOR\n\n\nMaybe you got these messages:\n\n\n\n\n\n\nEither your game doesn't have achievements yet or more likely you have the incorrect ROM.\n\n\nJust to be sure, search for the game name and check matching results.\n\n\n\nIt's also good to ask on the front page chat or in \nDiscord\n if you are unsure.\n\n\nThere are very many unique and similar ROMs for every game, for reasons we won't get into right now.\n\n\nIf your game has achievements but your ROM isn't in our system either you'll need to find the correct ROM or get support for your ROM. Check the top post of the forum page (Example: \nSuper Mario Bros.\n). Forum pages for games are found at the bottom of the achievement list on game pages:\n\n\n\n\nAlso check some of the last posts in the game forum page and the game page wall comments for clues on which ROM you'll need. The correct ROM name and checksum might not be listed yet and you'll need to ask for it. (We're working on it getting them all visibly listed.) If you can't find it, request it in the game's for page or ask for help in \nDiscord\n or on the site chat on the front page.\n\n\nYou can also contribute to the community by getting support for your ROM, if it's compatible. Post the checksum of your existing ROM in the forum of that game and also the exact name you have for it and a developer will review it with you to see if it is compatible.\n\n\n\nHow to find the checksum of your ROM.\n\n\nfor more details about checksumming read \nhere\n.", 
            "title": "My game is not loading achievements"
        }, 
        {
            "location": "/Getting-Started-as-an-Achievement-Developer/", 
            "text": "Welcome to the world of Achievement Creation!\n\n\nBasic Concepts\n\n\nTechnically \nan achievement is a group of conditions that must be met in a particular frame of the video game\n.\n\n\nWhen you launch a game on an emulator with the RetroAchievements feature, the emulator is always checking if those conditions are met in the current frame. When all conditions for a particular achievement are met, it is awarded and the emulator stops checking the conditions for that achievement.\n\n\nThe process of creating an achievement basically involves 3 steps:\n\n\n\n\n\n\nFinding a place in the game's RAM where the information you want is stored (examples: level, life bar, time, coins, holding a weapon, get an item, etc.).\n\n\n\n\n\n\nCreate conditions that must be met in order to award an Achievement.\n\n\n\n\n\n\nTest if your achievement is working as expected.\n\n\n\n\n\n\nMost likely you'll go back to step 2 and 3 many times to refine the logic of your Achievement.\n\n\nIn this doc we'll see how to accomplish the steps above.\n\n\nAfter you're sure your achievement is triggering at the conditions you want, you can submit it to the server. We'll see more about it later.\n\n\nFirst Steps\n\n\nBefore start ensure you have an RA emulator from the \nRetroAchievements Download Page\n first and \ncreate an account\n so you can log in using the emulator.\n\n\nIn this guide we'll be using RAGens to demonstrate, and the game \nSonic the Hedgehog\n. We are using RAGens but the same applies for the other emulators.\n\n\nTo begin, run the RAGens executable, and login when prompted. Next, use File -\n Open and select whatever ROM you would like to find achievements for.\n\n\nMemory Inspector\n\n\nYou should now have your main window running Sonic. There are 3 other dialogs we'll be using, which can be found under \nRetroAchievements\n in the menu. We'll be dealing with the \nMemory Inspector\n first:\n\n\n\n\nThe Memory Inspector can be used to find addresses in RAM for us to use. Essentially you are on a treasure hunt for memory locations - this dialog will help you examine and filter the game's RAM while the game is running. If you want a step-by-step video explanation on finding memory addresses, \nthis video\n can be very useful.\n\n\nTo start or restart a test, click \nNew 8-bit Test\n near the top middle.\n\n\nTo keep things simple, we'll start by looking for the memory address which holds the number of rings we have collected. Our steps will be the following:\n\n\n\n\n\n\nLoad the ROM and start a new game.\n\n\n\n\n\n\nReset the memory dialog: click \nNew 8-bit Test\n.\n\n\n\n\n\n\nReturn to the game and change the number of rings in memory. For example, collect a ring.\n\n\n\n\n\n\nIn the memory dialog, we now want to filter for values that are 'greater than previous values' (symbol \n). We select this, then hit \nFilter\n.\n\n\n\n\n\n\nEach time you perform 3 then 4, the number of possibilities or 'candidates' will get smaller. We will continue doing this until the number of candidates reaches a very small number (as few as possible), it might take 4-5 attempts. Next we can click in the results window, and monitor the memory address in the memory viewer at the bottom. Continue using the game and you should see the values in memory change as you collect rings. If you don't, or if something doesn't look right, try another value. With the first Sonic the Hedgehog, the memory address for the number of rings should be \n0xfe20\n.\n\n\n\n\n\n\nNote\n: Using save states (F5 to save state, F8 to load state, F6-F7 to toggle which state to use), you can switch back and forth between different states allowing you to alter what is in RAM, and use this to filter out bad candidates. You can search for values that remain the same (I.e. If you know the value didn't change, use \n=\n), or values that are different (use 'not equal', symbol \n!=\n).\n\n\n\n\n\n\nNote\n: There's unfortunately no guarantee from game to game on how the developers have stored their data (4-bit, 8-bit, 16-bit, binary-coded decimals, negative/inverted, i.e. using 0xff/0xffff to represent 'set', or plain randomly), but eventually you should come across some good address. Note if you are struggling to find good values, post \nRetroAchievements.org Development Help forum\n, or \nRetroAchievements Discord server\n. There are plenty of people who will be very happy to help!!\n\n\n\n\n\n\nTip\n: if you'd like to experiment with memory, try entering new values directly into the RAM viewer. This can have devastating effects on the game, or it might do exactly what you expect, (or nothing at all!) It can be useful though, to see if you can enter a value and get the result you expect. Use with caution!\n\n\n\n\n\n\nWhen you've found an address you're happy with, you can write a short note for what it is and hit \nSave Note\n, this will store it on database, and will be automatically restored next time you load up the memory viewer for this game, wherever you are! Note that after clicking 'Save Note', the note will be automatically stored on the database, and shared so all developers will share access to these memory notes. They will all be downloaded afresh when you load a ROM. If you try to overwrite a note, it will check with you first before submitting.\n\n\nYou can find more useful \nMemory Digging Tips here\n.\n\n\nAchievement Sets\n\n\nOK so the memory location for the number of rings is stored at \n0xfe20\n - note to a non-programmer, we're dealing in \nhexadecimal numeral system\n which can be daunting, but don't worry, essentially its just numbers and letters instead of only numbers, and not forgetting \n0x\n at the start to show that it's a memory location in hex. We've found an address we're interested in and stored it using \nSave Note\n. We now want to create a new achievement.\n\n\nGo to the \nRetroAchievements\n in the menu, choose \nAchievement Sets\n and you'll see this dialog:\n\n\n\n\nHere we group all the achievements we know about into three sets:\n1. Core Achievements (the main, public Achievement set),\n2. Unofficial/User Achievements (public, but will not award you points: for peer review),\n3. Local Achievements (personal to your PC).\n\n\nIn the Achievements dialog, click \nLocal Achievements\n (top left), then \nAdd New Achievement\n (bottom left). This will add a blank entry to the list in the center. Double click on it: if it's not already open, this should select it and open the \nAchievement Editor\n dialog.\n\n\nAchievement Editor\n\n\nThis is how it looks:\n\n\n\n\nThis is the final dialog where we bring all the data together. Most of the top fields are self explanatory, I.e. Title, Description, Points. The main one is the 'Requirements' part.\n\n\nLet's say we want to add an achievement for collecting a certain number of rings. Let's say 15 rings for simplicity. After filling out the fields at the top and selecting a suitable icon (in this example we used the gold trophy badge (00136), but you can upload a new one), we need to fill out Requirements. We have one requirement, \nthat the number of rings is at least 15\n. Next click is \nAdd New Requirement\n.\n\n\nClicking this button will add several default values to the Requirements list. These defaults just ensure that something relatively sensible is added to the list. For now, ignoring the field 'Special?'. When we clicked create, the default memory value will be whatever value you last left in the memory dialog.\n\n\nNext we will change these values to the following:\n\n\n\n\nSize\n: \n16-bit\n\n\nMemory\n: \n0xfe20\n\n\nCmp\n: \n=\n - this is the comparison to make. We could have any comparison here, but it's sensible to have \"greater than or equal to\". This is important because if we get 10 rings then a super ring box to have 20, we would miss out having \nexactly\n 15 rings.\n\n\nType\n: \nValue\n - we're comparing this memory value to a fixed value: 15\n\n\nSize\n: \nEmpty\n - this is only relevant when comparing memory to memory\n\n\nMem/Val\n: \n15\n - the number of rings required: the value we are comparing the memory to\n\n\nHit Count\n: \n0\n - ignore this for now, its useful for when something needs to happen a certain number of times\n\n\n\n\nWith that set, we don't have any more conditions to add, so we return to the \nAchievements Dialog\n. To be safe, we should save our progress by hitting \nSave Local\n! This saves everything to file locally to ensure that we won't lose any progress.\n\n\n\n\nNote\n: usually achievements have more than one requirement to avoid it triggering in a wrong time (i.e. playing demo mode). In this example we are using only one requirement just to simplify the explanation. See more \nAchievement Creation Tips here\n.\n\n\n\n\nTesting the Achievement\n\n\nWe can now 'activate' this achievement locally by hitting \nActivate\n on the right-hand side. This will start monitoring these memory locations and will award the achievement once all the conditions are true. Now we can go ahead and test to see if this achievement works!\n\n\n\n\nIf we press ESCAPE in-game, you will see the achievement show up as a demonstration of what it would look like in the in-game overlay!\n\n\n\n\nOK, the Achievement works. Now What?\n\n\nOnce we have tested that the achievement works locally, there is a two-step commit process:\n\n\n\n\n\n\nFirst in the Achievements Dialog, we select our achievement and press \nCommit Selected\n, and agree to the dialog. This will push our achievement to the server and store it under \nUnofficial User-submitted Achievements\n.\n\n\n\n\n\n\nFor the achievement to be enjoyed by many, it must be pushed into the \nCore Achievement set\n. For your few first achievements, it must be reviewed by a staff member before it can be pushed to Core. Once you have uploaded a set of achievements to Unofficial, you need to contact an admin who will, using their judgement and personal standards of quality to approve the set and give you a \nDeveloper status\n on the site. In which case you can push any achievement to Core yourself.\n\n\n\n\n\n\nNaturally, it's best only to submit achievements that are unique and interesting into the Core Achievements group. If there are duplicates in the Core group, the most recently added duplicates will be manually moderated and deleted. If you don't want your achievement in the Core group, or you think it might not be appropriate for the Core group (i.e. if it's incomplete, or if sometimes it appears to trigger when it's not supposed to, like when the game is showing a demo), leave it in the Unofficial/User Submitted section.\n\n\nNext Steps\n\n\nNow that you know how to use the Memory Inspector, and the Achievement Editor. It's time to learn new techniques and practice:\n\n\n\n\n\n\nIn order to refine your achievement logic, you can see what features you have in the \nAchievement Logic Features\n page.\n\n\n\n\n\n\nYou can learn by looking at existing Achievements that other devs made with an extra explanation in the \nReal Examples\n page.\n\n\n\n\n\n\nYou can also see some generic examples in the \nAchievement Templates\n page.\n\n\n\n\n\n\nHave fun!", 
            "title": "Getting Started as an Achievement Developer"
        }, 
        {
            "location": "/Getting-Started-as-an-Achievement-Developer/#basic-concepts", 
            "text": "Technically  an achievement is a group of conditions that must be met in a particular frame of the video game .  When you launch a game on an emulator with the RetroAchievements feature, the emulator is always checking if those conditions are met in the current frame. When all conditions for a particular achievement are met, it is awarded and the emulator stops checking the conditions for that achievement.  The process of creating an achievement basically involves 3 steps:    Finding a place in the game's RAM where the information you want is stored (examples: level, life bar, time, coins, holding a weapon, get an item, etc.).    Create conditions that must be met in order to award an Achievement.    Test if your achievement is working as expected.    Most likely you'll go back to step 2 and 3 many times to refine the logic of your Achievement.  In this doc we'll see how to accomplish the steps above.  After you're sure your achievement is triggering at the conditions you want, you can submit it to the server. We'll see more about it later.", 
            "title": "Basic Concepts"
        }, 
        {
            "location": "/Getting-Started-as-an-Achievement-Developer/#first-steps", 
            "text": "Before start ensure you have an RA emulator from the  RetroAchievements Download Page  first and  create an account  so you can log in using the emulator.  In this guide we'll be using RAGens to demonstrate, and the game  Sonic the Hedgehog . We are using RAGens but the same applies for the other emulators.  To begin, run the RAGens executable, and login when prompted. Next, use File -  Open and select whatever ROM you would like to find achievements for.", 
            "title": "First Steps"
        }, 
        {
            "location": "/Getting-Started-as-an-Achievement-Developer/#memory-inspector", 
            "text": "You should now have your main window running Sonic. There are 3 other dialogs we'll be using, which can be found under  RetroAchievements  in the menu. We'll be dealing with the  Memory Inspector  first:   The Memory Inspector can be used to find addresses in RAM for us to use. Essentially you are on a treasure hunt for memory locations - this dialog will help you examine and filter the game's RAM while the game is running. If you want a step-by-step video explanation on finding memory addresses,  this video  can be very useful.  To start or restart a test, click  New 8-bit Test  near the top middle.  To keep things simple, we'll start by looking for the memory address which holds the number of rings we have collected. Our steps will be the following:    Load the ROM and start a new game.    Reset the memory dialog: click  New 8-bit Test .    Return to the game and change the number of rings in memory. For example, collect a ring.    In the memory dialog, we now want to filter for values that are 'greater than previous values' (symbol  ). We select this, then hit  Filter .    Each time you perform 3 then 4, the number of possibilities or 'candidates' will get smaller. We will continue doing this until the number of candidates reaches a very small number (as few as possible), it might take 4-5 attempts. Next we can click in the results window, and monitor the memory address in the memory viewer at the bottom. Continue using the game and you should see the values in memory change as you collect rings. If you don't, or if something doesn't look right, try another value. With the first Sonic the Hedgehog, the memory address for the number of rings should be  0xfe20 .    Note : Using save states (F5 to save state, F8 to load state, F6-F7 to toggle which state to use), you can switch back and forth between different states allowing you to alter what is in RAM, and use this to filter out bad candidates. You can search for values that remain the same (I.e. If you know the value didn't change, use  = ), or values that are different (use 'not equal', symbol  != ).    Note : There's unfortunately no guarantee from game to game on how the developers have stored their data (4-bit, 8-bit, 16-bit, binary-coded decimals, negative/inverted, i.e. using 0xff/0xffff to represent 'set', or plain randomly), but eventually you should come across some good address. Note if you are struggling to find good values, post  RetroAchievements.org Development Help forum , or  RetroAchievements Discord server . There are plenty of people who will be very happy to help!!    Tip : if you'd like to experiment with memory, try entering new values directly into the RAM viewer. This can have devastating effects on the game, or it might do exactly what you expect, (or nothing at all!) It can be useful though, to see if you can enter a value and get the result you expect. Use with caution!    When you've found an address you're happy with, you can write a short note for what it is and hit  Save Note , this will store it on database, and will be automatically restored next time you load up the memory viewer for this game, wherever you are! Note that after clicking 'Save Note', the note will be automatically stored on the database, and shared so all developers will share access to these memory notes. They will all be downloaded afresh when you load a ROM. If you try to overwrite a note, it will check with you first before submitting.  You can find more useful  Memory Digging Tips here .", 
            "title": "Memory Inspector"
        }, 
        {
            "location": "/Getting-Started-as-an-Achievement-Developer/#achievement-sets", 
            "text": "OK so the memory location for the number of rings is stored at  0xfe20  - note to a non-programmer, we're dealing in  hexadecimal numeral system  which can be daunting, but don't worry, essentially its just numbers and letters instead of only numbers, and not forgetting  0x  at the start to show that it's a memory location in hex. We've found an address we're interested in and stored it using  Save Note . We now want to create a new achievement.  Go to the  RetroAchievements  in the menu, choose  Achievement Sets  and you'll see this dialog:   Here we group all the achievements we know about into three sets:\n1. Core Achievements (the main, public Achievement set),\n2. Unofficial/User Achievements (public, but will not award you points: for peer review),\n3. Local Achievements (personal to your PC).  In the Achievements dialog, click  Local Achievements  (top left), then  Add New Achievement  (bottom left). This will add a blank entry to the list in the center. Double click on it: if it's not already open, this should select it and open the  Achievement Editor  dialog.", 
            "title": "Achievement Sets"
        }, 
        {
            "location": "/Getting-Started-as-an-Achievement-Developer/#achievement-editor", 
            "text": "This is how it looks:   This is the final dialog where we bring all the data together. Most of the top fields are self explanatory, I.e. Title, Description, Points. The main one is the 'Requirements' part.  Let's say we want to add an achievement for collecting a certain number of rings. Let's say 15 rings for simplicity. After filling out the fields at the top and selecting a suitable icon (in this example we used the gold trophy badge (00136), but you can upload a new one), we need to fill out Requirements. We have one requirement,  that the number of rings is at least 15 . Next click is  Add New Requirement .  Clicking this button will add several default values to the Requirements list. These defaults just ensure that something relatively sensible is added to the list. For now, ignoring the field 'Special?'. When we clicked create, the default memory value will be whatever value you last left in the memory dialog.  Next we will change these values to the following:   Size :  16-bit  Memory :  0xfe20  Cmp :  =  - this is the comparison to make. We could have any comparison here, but it's sensible to have \"greater than or equal to\". This is important because if we get 10 rings then a super ring box to have 20, we would miss out having  exactly  15 rings.  Type :  Value  - we're comparing this memory value to a fixed value: 15  Size :  Empty  - this is only relevant when comparing memory to memory  Mem/Val :  15  - the number of rings required: the value we are comparing the memory to  Hit Count :  0  - ignore this for now, its useful for when something needs to happen a certain number of times   With that set, we don't have any more conditions to add, so we return to the  Achievements Dialog . To be safe, we should save our progress by hitting  Save Local ! This saves everything to file locally to ensure that we won't lose any progress.   Note : usually achievements have more than one requirement to avoid it triggering in a wrong time (i.e. playing demo mode). In this example we are using only one requirement just to simplify the explanation. See more  Achievement Creation Tips here .", 
            "title": "Achievement Editor"
        }, 
        {
            "location": "/Getting-Started-as-an-Achievement-Developer/#testing-the-achievement", 
            "text": "We can now 'activate' this achievement locally by hitting  Activate  on the right-hand side. This will start monitoring these memory locations and will award the achievement once all the conditions are true. Now we can go ahead and test to see if this achievement works!   If we press ESCAPE in-game, you will see the achievement show up as a demonstration of what it would look like in the in-game overlay!", 
            "title": "Testing the Achievement"
        }, 
        {
            "location": "/Getting-Started-as-an-Achievement-Developer/#ok-the-achievement-works-now-what", 
            "text": "Once we have tested that the achievement works locally, there is a two-step commit process:    First in the Achievements Dialog, we select our achievement and press  Commit Selected , and agree to the dialog. This will push our achievement to the server and store it under  Unofficial User-submitted Achievements .    For the achievement to be enjoyed by many, it must be pushed into the  Core Achievement set . For your few first achievements, it must be reviewed by a staff member before it can be pushed to Core. Once you have uploaded a set of achievements to Unofficial, you need to contact an admin who will, using their judgement and personal standards of quality to approve the set and give you a  Developer status  on the site. In which case you can push any achievement to Core yourself.    Naturally, it's best only to submit achievements that are unique and interesting into the Core Achievements group. If there are duplicates in the Core group, the most recently added duplicates will be manually moderated and deleted. If you don't want your achievement in the Core group, or you think it might not be appropriate for the Core group (i.e. if it's incomplete, or if sometimes it appears to trigger when it's not supposed to, like when the game is showing a demo), leave it in the Unofficial/User Submitted section.", 
            "title": "OK, the Achievement works. Now What?"
        }, 
        {
            "location": "/Getting-Started-as-an-Achievement-Developer/#next-steps", 
            "text": "Now that you know how to use the Memory Inspector, and the Achievement Editor. It's time to learn new techniques and practice:    In order to refine your achievement logic, you can see what features you have in the  Achievement Logic Features  page.    You can learn by looking at existing Achievements that other devs made with an extra explanation in the  Real Examples  page.    You can also see some generic examples in the  Achievement Templates  page.    Have fun!", 
            "title": "Next Steps"
        }, 
        {
            "location": "/Achievement-Logic-Features/", 
            "text": "There are several tools and options available to a developer. Knowing how to properly utilize them will improve the quality of your sets. These tools/options can be used in the Achievement Editor:\n\n\n\n\nFor more help regarding these, our \nDiscord server\n is always open for assistance.\n\n\nDelta Values\n\n\nA \nDelta\n value is the previous frame's value.\n\n\nExamples of how it can be used:\n\n\n\n\nDetect if the level has been increased: \nlevel \n delta level\n. It means \"current level  is greater than the previous frame's level\".\n\n\nDetect damage: \nhealth \n delta health\n. It means \"current health is smaller than the previous frame's health\". Or you can just make the previous frame's value a requirement. \nhealth delta = 1\n means \"the previous frame's value for health must be 1 when the achievement pops up.\"\n\n\n\n\nYou can see how it works in the \nReal Examples page\n.\n\n\nHit Counts\n\n\nIn the Achievement Editor, it's the field on the far right side is Hit Count.\n\n\nZero is default, none. It means the condition must be true when the achievement pops.\n\n\nIf you set a manual hit count, like 1, it means the condition must be true for at least 1 frame, and once that hit count is met, it doesn't need to be met again at any other time.\n\n\nPLEASE NOTE\n: if a condition has a hit count, and reaches the number required, this condition is no longer tested. It is true and remains true, \nUNLESS\n you have a \nReset If\n, which we will discuss below.\n\n\nYou can see how it works in the \nReal Examples page\n.\n\n\nSpecial Flags\n\n\nIn the Achievement Editor, it's the field titled as \nSpecial?\n\n\nThese flags conditions only work if you set a manual hit count for a condition.\n\n\nPauseIf\n\n\nThis will pause activity for all conditions in the same group.\n\n\nNote\n: Keep in mind this will \nnot\n pause conditions in other groups.\n\n\nThe \nPauseIf\n is used to pause hit count going up during a specific situation (like pausing the game). It's used when you want to keep previously earned hit count, but don't want to reset it when someone simply pauses the game, for example.\n\n\nResetIf\n\n\nThis will reset the hit count for conditions you set a manual hit count for. It's much more common to use than \nPauseIf\n\n\nNote\n: Unlike \nPauseIf\n, this will reset conditions in \nall groups\n\n\nYou can see how it works in the \nReal Examples page\n.\n\n\nN64 Special Flags\n\n\nWhen developing for \nN64\n, there are additional \n\"arithmetic flag operations\"\n that can be used. These flags are currently exclusive to N64. Please note, any condition with arithmetic flags are always considered \ntrue\n, regardless of their comparison values.\n\n\nAdd Source\n\n\nWill add the value of the source in the field labeled \nMemory\n to the next achievement condition. The total value will be used in the next achievement condition.\n\n\nSub Source\n\n\nWorks similarly to \nAdd Source\n, but will instead subtract the source value.\n\n\nAdd Hits\n\n\nWill add the current hit count to the next condition. The total hit value will be used in the next achievement condition.\n\n\n\n\nIn this example, conditions #1 and #2 will have their values (\n5\n and \n3\n respectively) added until they reach condition #3. At that point, the value contained in the \nMemory\n field will be \n5 + 3 + 20\n, and it's new value will be \n28\n. Condition #3 will now be \ntrue\n and read as:\n\n28 \n 20\n\n\nGroups\n\n\nAchievements can have groups added to them that can act as alternative requirements to unlock an achievement. These are called \nAlt Groups\n.\n\n\nOne extremely important thing to note: For an achievement to unlock it must have it's \nCore group AND at least one Alt group be true.\n If there are no Alt groups present, then only the Core group's conditions need to be true.\n\n\nTip:\n Because the Core group always need to be active, typically you would put conditions there that is common among all the alternative requirements. However, one trick you can use to basically ignore needing a Core group is to give it a condition that is always true such as: \n\n\nMem 0x0001 = Mem 0x0001\n\n\nSince the Core group is now always true, and you can now focus on differentiating the Alt groups.", 
            "title": "Achievement Logic Features"
        }, 
        {
            "location": "/Achievement-Logic-Features/#delta-values", 
            "text": "A  Delta  value is the previous frame's value.  Examples of how it can be used:   Detect if the level has been increased:  level   delta level . It means \"current level  is greater than the previous frame's level\".  Detect damage:  health   delta health . It means \"current health is smaller than the previous frame's health\". Or you can just make the previous frame's value a requirement.  health delta = 1  means \"the previous frame's value for health must be 1 when the achievement pops up.\"   You can see how it works in the  Real Examples page .", 
            "title": "Delta Values"
        }, 
        {
            "location": "/Achievement-Logic-Features/#hit-counts", 
            "text": "In the Achievement Editor, it's the field on the far right side is Hit Count.  Zero is default, none. It means the condition must be true when the achievement pops.  If you set a manual hit count, like 1, it means the condition must be true for at least 1 frame, and once that hit count is met, it doesn't need to be met again at any other time.  PLEASE NOTE : if a condition has a hit count, and reaches the number required, this condition is no longer tested. It is true and remains true,  UNLESS  you have a  Reset If , which we will discuss below.  You can see how it works in the  Real Examples page .", 
            "title": "Hit Counts"
        }, 
        {
            "location": "/Achievement-Logic-Features/#special-flags", 
            "text": "In the Achievement Editor, it's the field titled as  Special?  These flags conditions only work if you set a manual hit count for a condition.", 
            "title": "Special Flags"
        }, 
        {
            "location": "/Achievement-Logic-Features/#pauseif", 
            "text": "This will pause activity for all conditions in the same group.  Note : Keep in mind this will  not  pause conditions in other groups.  The  PauseIf  is used to pause hit count going up during a specific situation (like pausing the game). It's used when you want to keep previously earned hit count, but don't want to reset it when someone simply pauses the game, for example.", 
            "title": "PauseIf"
        }, 
        {
            "location": "/Achievement-Logic-Features/#resetif", 
            "text": "This will reset the hit count for conditions you set a manual hit count for. It's much more common to use than  PauseIf  Note : Unlike  PauseIf , this will reset conditions in  all groups  You can see how it works in the  Real Examples page .", 
            "title": "ResetIf"
        }, 
        {
            "location": "/Achievement-Logic-Features/#n64-special-flags", 
            "text": "When developing for  N64 , there are additional  \"arithmetic flag operations\"  that can be used. These flags are currently exclusive to N64. Please note, any condition with arithmetic flags are always considered  true , regardless of their comparison values.", 
            "title": "N64 Special Flags"
        }, 
        {
            "location": "/Achievement-Logic-Features/#add-source", 
            "text": "Will add the value of the source in the field labeled  Memory  to the next achievement condition. The total value will be used in the next achievement condition.", 
            "title": "Add Source"
        }, 
        {
            "location": "/Achievement-Logic-Features/#sub-source", 
            "text": "Works similarly to  Add Source , but will instead subtract the source value.", 
            "title": "Sub Source"
        }, 
        {
            "location": "/Achievement-Logic-Features/#add-hits", 
            "text": "Will add the current hit count to the next condition. The total hit value will be used in the next achievement condition.   In this example, conditions #1 and #2 will have their values ( 5  and  3  respectively) added until they reach condition #3. At that point, the value contained in the  Memory  field will be  5 + 3 + 20 , and it's new value will be  28 . Condition #3 will now be  true  and read as: 28   20", 
            "title": "Add Hits"
        }, 
        {
            "location": "/Achievement-Logic-Features/#groups", 
            "text": "Achievements can have groups added to them that can act as alternative requirements to unlock an achievement. These are called  Alt Groups .  One extremely important thing to note: For an achievement to unlock it must have it's  Core group AND at least one Alt group be true.  If there are no Alt groups present, then only the Core group's conditions need to be true.  Tip:  Because the Core group always need to be active, typically you would put conditions there that is common among all the alternative requirements. However, one trick you can use to basically ignore needing a Core group is to give it a condition that is always true such as:   Mem 0x0001 = Mem 0x0001  Since the Core group is now always true, and you can now focus on differentiating the Alt groups.", 
            "title": "Groups"
        }, 
        {
            "location": "/Real-Examples/", 
            "text": "One of the best learning resource is looking at some real examples. In this section we wil look deep into some achievements and break down the logic behind them.\n\n\n\n\nUsing Hit Counts and ResetIf\n\n\nUsing Delta Values and ResetIf\n\n\nSimple Example of How to Avoid Load State Abusing", 
            "title": "Real Examples"
        }, 
        {
            "location": "/Tips-and-Tricks/", 
            "text": "General Tips\n\n\n\n\n\n\nDo not use accented/special characters like the \"\u00e9\" in Pokemon, as they currently break a few things like feed if they appear on feed. They are also not visible in search without the special character.\n\n\n\n\n\n\nChoose NTSC (U) ROMs if available, because 60 FPS is a smoother experience. (E) is PAL(50 FPS), (J) is also NTSC, but is only used if it was a Japan-exclusive game.\n\n\n\n\n\n\nDo not use a ROM with a modded/custom launch screen like Mode7 and RisingSun -sometimes- have because it messes up RAM.\n\n\n\n\n\n\nMemory Digging Tips\n\n\n\n\n\n\nYou can input values in the memory viewer to see if it affects the game.\n\n\n\n\n\n\nIf you find an address, also search the same region surrounding it and you could find many more useful addresses.\n\n\n\n\n\n\nEven if something is visibly decreasing in-game, like health, the value isn't necessarily decreasing. It's possible for it to be increasing, so since it's uncommon for you to know for sure, you should just filter \n!=\n and \n==\n\n\n\n\n\n\nIf you absolutely cannot reduce the results of a filter, you can try guessing some values or at least how the value is acting(\n or \n). For example, no health is usually \"0\", Stage 1 is usually value \"0\", Stage 2 is usually value \"1\" depending on the type of game.\n\n\n\n\n\n\nIf the game has a demo mode (AI plays the game after you wait a while on the title screen), make sure to find the address for it and add \nmode != demo\n or something similar in your achievements.\n\n\n\n\n\n\nAlways use 8-bit view in the Memory Viewer, just remember that when adding a 16-bit address that the address to the right comes first. Example: AB CD WX YZ in 8-bit will becomes CDAB YZWX in 16-bit.\n\n\n\n\n\n\nAchivement Creation Tips\n\n\n\n\n\n\nAvoid using only one condition as the achievement will most likely pop at the wrong time.\n\n\n\n\n\n\nIf the game has a demo mode (AI plays the game after you wait a while on the title screen), make sure to find the address for it and add \nmode != demo\n or something similar in your achievements.\n\n\n\n\n\n\nTry to avoid achievement spam. If a game has 100 levels, do not make an achievement for each level. Do every 10 or so.\n\n\n\n\n\n\nSome emulators send some addresses in RAM a specific value when reset/reloaded. It's only for the first frame, but it can cause achievements to pop up, so you need to prepare for it. It's usually all one value like FF. You can see the value if you use Frame Advance / Next Frame while resetting the game.\n\n\n\n\n\n\nGet as creative as possible with achievements. \"Beat X without using/doing Y\", \"Beat X in 5 seconds\", \"3 heart run\"\n\n\n\n\n\n\nUncheck \"Show Decimal Values\" in the Achievement Editor so you can enter the hex values you see in the Memory Viewer.\n\n\n\n\n\n\nThere's a 100 achievement cap, 400 point cap, and a character cap for single achievements (try not to put 50+ conditions in one achievement).\n\n\n\n\n\n\nDo not make achievements requiring glitches.\n\n\n\n\n\n\n16-bit requirements do not have to be used on an even number of RAM, they can be used in-between properly, even if 16-bit view doesn't show it right. Ex: 0 1 2 3 4 5, in 16-bit it's usually viewed as 10 32 54, but if you start the address at the 1 here in your requirement, \"21\" will be read by the achievement, even if 16-bit view in the memory viewer isn't showing it. It also works if it's the last address in the line(starting at F, going to 0).\n\n\n\n\n\n\nUse single bits(0-7) for things that only change a single bit. In the Memory Viewer, when an address is selected, there will be \"bits 0 1 2 3 4 5 6 7\" above the addresses, and below those numbers will be either \"0\" or \"1\" like \"0 0 0 0 0 0 0 0\" if bit3 has a 1 under it, bit3=1 for that address. Single bit usage is very common for game events/unlocks/etc.. You'll want to use these in games where you can do things in different orders, dialogues, events, unlocks.. If you check for \"8-bit x = 7\" and someone did something different like skip something or get something extra, their 8-bit value will very likely be different because the single bits within are different and the achievement won't unlock, so in this case you check for specific bits inside the 8-bit address. Now if for example, item unlocks use all 8 bits of the 8-bit address, and you want to do \"unlock all items,\" you can just do \"8-bit x = 0xff\" This may be confusing, but it's very important to understand.\n\n\n\n\n\n\nAlt groups (left side of editor) are used for \"or\" conditions. The core group is always there and must always be true with at least one alt group being completely true to get the achievement. The entire group is your \"or\" condition. See the forum thread for an image explanation of this.", 
            "title": "Tips and Tricks"
        }, 
        {
            "location": "/Tips-and-Tricks/#general-tips", 
            "text": "Do not use accented/special characters like the \"\u00e9\" in Pokemon, as they currently break a few things like feed if they appear on feed. They are also not visible in search without the special character.    Choose NTSC (U) ROMs if available, because 60 FPS is a smoother experience. (E) is PAL(50 FPS), (J) is also NTSC, but is only used if it was a Japan-exclusive game.    Do not use a ROM with a modded/custom launch screen like Mode7 and RisingSun -sometimes- have because it messes up RAM.", 
            "title": "General Tips"
        }, 
        {
            "location": "/Tips-and-Tricks/#memory-digging-tips", 
            "text": "You can input values in the memory viewer to see if it affects the game.    If you find an address, also search the same region surrounding it and you could find many more useful addresses.    Even if something is visibly decreasing in-game, like health, the value isn't necessarily decreasing. It's possible for it to be increasing, so since it's uncommon for you to know for sure, you should just filter  !=  and  ==    If you absolutely cannot reduce the results of a filter, you can try guessing some values or at least how the value is acting(  or  ). For example, no health is usually \"0\", Stage 1 is usually value \"0\", Stage 2 is usually value \"1\" depending on the type of game.    If the game has a demo mode (AI plays the game after you wait a while on the title screen), make sure to find the address for it and add  mode != demo  or something similar in your achievements.    Always use 8-bit view in the Memory Viewer, just remember that when adding a 16-bit address that the address to the right comes first. Example: AB CD WX YZ in 8-bit will becomes CDAB YZWX in 16-bit.", 
            "title": "Memory Digging Tips"
        }, 
        {
            "location": "/Tips-and-Tricks/#achivement-creation-tips", 
            "text": "Avoid using only one condition as the achievement will most likely pop at the wrong time.    If the game has a demo mode (AI plays the game after you wait a while on the title screen), make sure to find the address for it and add  mode != demo  or something similar in your achievements.    Try to avoid achievement spam. If a game has 100 levels, do not make an achievement for each level. Do every 10 or so.    Some emulators send some addresses in RAM a specific value when reset/reloaded. It's only for the first frame, but it can cause achievements to pop up, so you need to prepare for it. It's usually all one value like FF. You can see the value if you use Frame Advance / Next Frame while resetting the game.    Get as creative as possible with achievements. \"Beat X without using/doing Y\", \"Beat X in 5 seconds\", \"3 heart run\"    Uncheck \"Show Decimal Values\" in the Achievement Editor so you can enter the hex values you see in the Memory Viewer.    There's a 100 achievement cap, 400 point cap, and a character cap for single achievements (try not to put 50+ conditions in one achievement).    Do not make achievements requiring glitches.    16-bit requirements do not have to be used on an even number of RAM, they can be used in-between properly, even if 16-bit view doesn't show it right. Ex: 0 1 2 3 4 5, in 16-bit it's usually viewed as 10 32 54, but if you start the address at the 1 here in your requirement, \"21\" will be read by the achievement, even if 16-bit view in the memory viewer isn't showing it. It also works if it's the last address in the line(starting at F, going to 0).    Use single bits(0-7) for things that only change a single bit. In the Memory Viewer, when an address is selected, there will be \"bits 0 1 2 3 4 5 6 7\" above the addresses, and below those numbers will be either \"0\" or \"1\" like \"0 0 0 0 0 0 0 0\" if bit3 has a 1 under it, bit3=1 for that address. Single bit usage is very common for game events/unlocks/etc.. You'll want to use these in games where you can do things in different orders, dialogues, events, unlocks.. If you check for \"8-bit x = 7\" and someone did something different like skip something or get something extra, their 8-bit value will very likely be different because the single bits within are different and the achievement won't unlock, so in this case you check for specific bits inside the 8-bit address. Now if for example, item unlocks use all 8 bits of the 8-bit address, and you want to do \"unlock all items,\" you can just do \"8-bit x = 0xff\" This may be confusing, but it's very important to understand.    Alt groups (left side of editor) are used for \"or\" conditions. The core group is always there and must always be true with at least one alt group being completely true to get the achievement. The entire group is your \"or\" condition. See the forum thread for an image explanation of this.", 
            "title": "Achivement Creation Tips"
        }, 
        {
            "location": "/Console-Specific-Tips/", 
            "text": "When excavating the memory of these old consoles it helps to know what the original creators of the games were working with in the first place. If you familiarize yourself with the quirks of your favorite console then set making will be easier and more accurate.\n\n\nNES (RANes)\n\n\nMemory Mirroring\n\n\n\n\nWhen using the memory inspector to find variables for NES games, there will be 4 copies of everything you find. If you're wondering \"which one do I use?\" or \"should I check for all of them?\" it's not as complicated as it seems.\n\n\nThis is a feature of the NES that gave developers more ways of looking at memory. Because the NES itself only has 2KB of RAM, the first result (the one below 0x800) should be used for consistency, and applying additional conditions on the others will do nothing.\n\n\nThis applies to RPS and leaderboards as well.\n\n\nGame Boy (RAVBA)\n\n\nMemory Map\n\n\nCertain ranges of values mean different things in the context of the Game Boy hardware, so having a map of what's where can help you with eliminating useless addresses. Here's the lowdown:\n\n\n\n\n\u274c \n0x0000 - 0x7FFF: ROM Data\n (Typically no reason to use. If you're a super-dedicated developer you could use the 16-bit value at 0x14E along with alt groups to support multiple ROM versions/regions)\n\n\n\u274c \n0x8000 - 0x9FFF: Graphics Data\n (Some things here might correlate with what you're looking for if you're trying to find a map ID or animation, but there will always be a better way of going about what you're doing than using any of these)\n\n\n\u2714\ufe0f \n0xA000 - 0xBFFF: Cartridge RAM\n (IE. save data. Sometimes using these addresses will be unavoidable but then your set could be prone to cheating by loading 100% save files. More info on protecting against save files to come)\n\n\n\u2714\ufe0f \n0xC000 - 0xDFFF: Work RAM\n (The good stuff; almost everything you should use will fall inside this range)\n\n\n\u274c \n0xE000 - 0xFDFF: ECHO RAM\n (Do not use, see below)\n\n\n\u274c \n0xFE00 - 0xFE9F: More Graphics Data\n (same as Graphics Data above)\n\n\n\u274c \n0xFEA0 - 0xFFFF: Miscellaneous\n (Do not use)\n\n\n\n\nFor more info see: http://gameboy.mongenel.com/dmg/asmmemmap.html\n\n\nECHO RAM\n\n\n\n\nSimilarly to the NES, certain variables may show up twice when searching in the Memory Inspector. The second result is in what's called the ECHO RAM, which is a mirror of the actual memory. Since some emulators tend to ignore this area or emulate it incorrectly, it's recommended to NOT use it at all and always use the first result.\n\n\nThe Game Boy has 4KB of RAM starting at 0xC000. ECHO RAM starts at 0xE000, so if your address begins with an E you'll want to replace the first non-zero character with a C. Remember: C is correct, E is echo!\n\n\nNintendo 64 (RAP64)\n\n\nUsing GameShark Codes for Addresses\n\n\nGameShark codes can be a valuable resource for finding addresses you can't or don't feel like finding. They have 12 characters per line and are fairly easy to parse.\n\n\n[AA][BBBBBB] [CCCC]\n\n\n[AA] is the codetype. This is a short instruction to the GameShark that defines what to do with the next value. If you understand what the GameShark code does you can use it to help with condition-making.\n\n\n\n\n80, 88:\n The address is 8-bit. Sets the value [00CC] to the address [BBBBBB].\n\n\n81, 89:\n The address is 16-bit. Sets the value [CCCC] to the address [BBBBBB].\n\n\nD0:\n The address is 8-bit. Checks if [00CC] is equal to the value at address [BBBBBB] then executes the next line if it is.\n\n\nD2:\n The address is 8-bit. Checks if [00CC] is DIFFERENT to the value at address [BBBBBB] then executes the next line if it is.\n\n\nD1:\n The address is 16-bit. Checks if [CCCC] is equal to the value at address [BBBBBB] then executes the next line if it is.\n\n\nD3:\n The address is 16-bit. Checks if [CCCC] is DIFFERENT to the value at address [BBBBBB] then executes the next line if it is.\n\n\n\n\nHere are some examples:\n* Paper Mario: Infinite HP:\n\n\n[80][10F292] [0032]\n\n\nSets the 8-bit value at 0x10F292 to 0x32 (50). So this means Mario's HP is an 8-bit value at 0x10F292.\n\n\n\n\nDonkey Kong 64: Play as Rambi: \n\n\n\n\n[80][74E77C] [0006]\n\n\nSets the 8-bit value at 0x74E77C to 6. So this means the character you're playing as is an 8-bit value at 0x74E77C.\n\n\n\n\nChameleon Twist 2: Hold L to Moon Jump:\n\n\n\n\n[D0][18BAB5] [0020] \n- Looking at this one\n\n\n[81][18B9E0] [4200]\n\n\nChecks if the 8-bit value at 0x18BAB5 is equal to 0x20. This means 0x18BAB5 contains a button press variable and Bit5 (0x20) corresponds to L.\n\n\nAnti-GSC\n and \nGameHacking\n are both good resources for finding GameShark codes.", 
            "title": "Console Specific Tips"
        }, 
        {
            "location": "/Console-Specific-Tips/#nes-ranes", 
            "text": "", 
            "title": "NES (RANes)"
        }, 
        {
            "location": "/Console-Specific-Tips/#memory-mirroring", 
            "text": "When using the memory inspector to find variables for NES games, there will be 4 copies of everything you find. If you're wondering \"which one do I use?\" or \"should I check for all of them?\" it's not as complicated as it seems.  This is a feature of the NES that gave developers more ways of looking at memory. Because the NES itself only has 2KB of RAM, the first result (the one below 0x800) should be used for consistency, and applying additional conditions on the others will do nothing.  This applies to RPS and leaderboards as well.", 
            "title": "Memory Mirroring"
        }, 
        {
            "location": "/Console-Specific-Tips/#game-boy-ravba", 
            "text": "", 
            "title": "Game Boy (RAVBA)"
        }, 
        {
            "location": "/Console-Specific-Tips/#memory-map", 
            "text": "Certain ranges of values mean different things in the context of the Game Boy hardware, so having a map of what's where can help you with eliminating useless addresses. Here's the lowdown:   \u274c  0x0000 - 0x7FFF: ROM Data  (Typically no reason to use. If you're a super-dedicated developer you could use the 16-bit value at 0x14E along with alt groups to support multiple ROM versions/regions)  \u274c  0x8000 - 0x9FFF: Graphics Data  (Some things here might correlate with what you're looking for if you're trying to find a map ID or animation, but there will always be a better way of going about what you're doing than using any of these)  \u2714\ufe0f  0xA000 - 0xBFFF: Cartridge RAM  (IE. save data. Sometimes using these addresses will be unavoidable but then your set could be prone to cheating by loading 100% save files. More info on protecting against save files to come)  \u2714\ufe0f  0xC000 - 0xDFFF: Work RAM  (The good stuff; almost everything you should use will fall inside this range)  \u274c  0xE000 - 0xFDFF: ECHO RAM  (Do not use, see below)  \u274c  0xFE00 - 0xFE9F: More Graphics Data  (same as Graphics Data above)  \u274c  0xFEA0 - 0xFFFF: Miscellaneous  (Do not use)   For more info see: http://gameboy.mongenel.com/dmg/asmmemmap.html", 
            "title": "Memory Map"
        }, 
        {
            "location": "/Console-Specific-Tips/#echo-ram", 
            "text": "Similarly to the NES, certain variables may show up twice when searching in the Memory Inspector. The second result is in what's called the ECHO RAM, which is a mirror of the actual memory. Since some emulators tend to ignore this area or emulate it incorrectly, it's recommended to NOT use it at all and always use the first result.  The Game Boy has 4KB of RAM starting at 0xC000. ECHO RAM starts at 0xE000, so if your address begins with an E you'll want to replace the first non-zero character with a C. Remember: C is correct, E is echo!", 
            "title": "ECHO RAM"
        }, 
        {
            "location": "/Console-Specific-Tips/#nintendo-64-rap64", 
            "text": "", 
            "title": "Nintendo 64 (RAP64)"
        }, 
        {
            "location": "/Console-Specific-Tips/#using-gameshark-codes-for-addresses", 
            "text": "GameShark codes can be a valuable resource for finding addresses you can't or don't feel like finding. They have 12 characters per line and are fairly easy to parse.  [AA][BBBBBB] [CCCC]  [AA] is the codetype. This is a short instruction to the GameShark that defines what to do with the next value. If you understand what the GameShark code does you can use it to help with condition-making.   80, 88:  The address is 8-bit. Sets the value [00CC] to the address [BBBBBB].  81, 89:  The address is 16-bit. Sets the value [CCCC] to the address [BBBBBB].  D0:  The address is 8-bit. Checks if [00CC] is equal to the value at address [BBBBBB] then executes the next line if it is.  D2:  The address is 8-bit. Checks if [00CC] is DIFFERENT to the value at address [BBBBBB] then executes the next line if it is.  D1:  The address is 16-bit. Checks if [CCCC] is equal to the value at address [BBBBBB] then executes the next line if it is.  D3:  The address is 16-bit. Checks if [CCCC] is DIFFERENT to the value at address [BBBBBB] then executes the next line if it is.   Here are some examples:\n* Paper Mario: Infinite HP:  [80][10F292] [0032]  Sets the 8-bit value at 0x10F292 to 0x32 (50). So this means Mario's HP is an 8-bit value at 0x10F292.   Donkey Kong 64: Play as Rambi:    [80][74E77C] [0006]  Sets the 8-bit value at 0x74E77C to 6. So this means the character you're playing as is an 8-bit value at 0x74E77C.   Chameleon Twist 2: Hold L to Moon Jump:   [D0][18BAB5] [0020]  - Looking at this one  [81][18B9E0] [4200]  Checks if the 8-bit value at 0x18BAB5 is equal to 0x20. This means 0x18BAB5 contains a button press variable and Bit5 (0x20) corresponds to L.  Anti-GSC  and  GameHacking  are both good resources for finding GameShark codes.", 
            "title": "Using GameShark Codes for Addresses"
        }, 
        {
            "location": "/Achievement-Templates/", 
            "text": "WARNING: EVERY GAME IS DIFFERENT!\n\n\nHere you'll see examples of some typical achievements. You can use them as inspiration to create your own achievement. But keep in mind the following:\n\n\nEVERY GAME IS DIFFERENT! The memory has a different behavior from game to game.\n\n\nSo do \nNOT\n take these examples as a rule. They are here just for educational purposes.\n\n\nIn these examples we use the following convention \n0xLEVEL\n is the memory address with the level ID; \n0xLIFE\n is the address used for the character life; \n0xTIME\n for time, \n0xITEM\n for getting an item, etc...\n\n\nFinish Level N\n\n\nIn this example we want to award when the player finish the level \nN\n and goes to level \nN+1\n.\n\n\n\n\n\n\n\n\nID\n\n\nSpecial?\n\n\nMemory\n\n\nCmp\n\n\nType\n\n\nMem/Val\n\n\nHits\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n0xLEVEL\n\n\n=\n\n\nValue\n\n\nN\n\n\n(1)\n\n\n\n\n\n\n2\n\n\n\n\n0xLEVEL\n\n\n=\n\n\nValue\n\n\nN+1\n\n\n\n\n\n\n\n\n3\n\n\n\n\n0xLEVEL\n\n\n\n\nDelta\n\n\n0xLEVEL\n\n\n\n\n\n\n\n\n4\n\n\nResetIf\n\n\n0xLEVEL\n\n\n=\n\n\nValue\n\n\nTITLE\n\n\n\n\n\n\n\n\n\n\nRequirements\n\n\n\n\n1: On level \nN\n at least one time\n\n\n2: Currently at level \nN+1\n\n\n3: The level has been increased\n\n\n4: Reset the hit counter when back to title screen\n\n\n\n\nThe value \n0xTITLE\n means \"at game's title screen\". You need to \nResetIf\n going to the title screen to avoid the awarding at a wrong time.\n\n\nHere is an example of game flow that could make the achievement trigger at a wrong time if it wasn't for that ReseIf:\n\n\n\n\nStart the game and reach level 2 (this make the hit counter goes to 1)\n\n\nGet a game over while on level 2\n\n\nGo back to the title screen\n\n\nUse a password for level 3\n\n\n\n\nIf not using the ResetIf we will have these conditions:\n\n\n\n\nHit level 2: TRUE\n\n\nCurrent level = level 3: TRUE\n\n\nLevel increased (from title/password screen to level 3): TRUE\n\n\n\n\nAnd it would be enough to trigger the cheevo (at a wrong time). That's why we're using the \nResetIf\n in this example.\n\n\nFinish Level N before Time reaches T\n\n\nIn this example we consider a game where the time decreases (e.g.: Super Mario Bros). Adapt it accordingly the time on your game has a different behavior.\n\n\nWe want to award if the player finishes the level \nN\n while time is greater than \nT\n.\n\n\n\n\n\n\n\n\nID\n\n\nSpecial?\n\n\nMemory\n\n\nCmp\n\n\nType\n\n\nMem/Val\n\n\nHits\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n0xLEVEL\n\n\n=\n\n\nValue\n\n\nN\n\n\n(1)\n\n\n\n\n\n\n2\n\n\n\n\n0xLEVEL\n\n\n=\n\n\nValue\n\n\nN+1\n\n\n\n\n\n\n\n\n3\n\n\n\n\n0xLEVEL\n\n\n\n\nDelta\n\n\n0xLEVEL\n\n\n\n\n\n\n\n\n4\n\n\nResetIf\n\n\n0xLEVEL\n\n\n=\n\n\nValue\n\n\nTITLE\n\n\n\n\n\n\n\n\n5\n\n\n\n\n0xTIME\n\n\n=\n\n\nValue\n\n\nT\n\n\n\n\n\n\n\n\n\n\nRequirements\n\n\nRequirements 1-4 are the same as \nFinish Level N\n template.\n\n\n\n\n5: timer is greater than \nT\n.\n\n\n\n\nKeep in mind that besides knowing how the time behaves in game you also need to research how it behaves in memory.\n\n\nFinish Level N without Dying (or getting hit, using a weapon, etc.)\n\n\n\n\n\n\n\n\nID\n\n\nSpecial?\n\n\nMemory\n\n\nCmp\n\n\nType\n\n\nMem/Val\n\n\nHits\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n0xLEVEL\n\n\n=\n\n\nValue\n\n\nN\n\n\n(1)\n\n\n\n\n\n\n2\n\n\n\n\n0xLEVEL\n\n\n=\n\n\nValue\n\n\nN+1\n\n\n\n\n\n\n\n\n3\n\n\n\n\n0xLEVEL\n\n\n\n\nDelta\n\n\n0xLEVEL\n\n\n\n\n\n\n\n\n4\n\n\nResetIf\n\n\n0xLEVEL\n\n\n=\n\n\nValue\n\n\nTITLE\n\n\n\n\n\n\n\n\n5\n\n\n\n\n0xSCREEN\n\n\n=\n\n\nValue\n\n\nLVL_N_INTRO\n\n\n(1)\n\n\n\n\n\n\n6\n\n\nResetIf\n\n\n0xLIFE\n\n\n\n\nDelta\n\n\n0xLIFE\n\n\n\n\n\n\n\n\n\n\nRequirements\n\n\nRequirements 1-4 are the same as \nFinish Level N\n template.\n\n\n\n\n5: a checkpoint to represent the point from where the player is suposed to start the chalenge of not losing a life. If the game has a level intro screen, it can be a good checkpoint.\n\n\n6: reset hit count if life decreased.\n\n\n\n\nThe requirement 6 can also be used to reset hit count if a weapon was used, damage taken, or anything else that you want the player to NOT do.\n\n\nFinish Level N with Item\n\n\n\n\n\n\n\n\nID\n\n\nSpecial?\n\n\nMemory\n\n\nCmp\n\n\nType\n\n\nMem/Val\n\n\nHits\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n0xLEVEL\n\n\n=\n\n\nValue\n\n\nN\n\n\n(1)\n\n\n\n\n\n\n2\n\n\n\n\n0xLEVEL\n\n\n=\n\n\nValue\n\n\nN+1\n\n\n\n\n\n\n\n\n3\n\n\n\n\n0xLEVEL\n\n\n\n\nDelta\n\n\n0xLEVEL\n\n\n\n\n\n\n\n\n4\n\n\nResetIf\n\n\n0xLEVEL\n\n\n=\n\n\nValue\n\n\nTITLE\n\n\n\n\n\n\n\n\n5\n\n\n\n\n0xITEM\n\n\n=\n\n\nValue\n\n\nTRUE\n\n\n\n\n\n\n\n\n\n\nRequirements\n\n\nRequirements 1-4 are the same as \nFinish Level N\n template.\n\n\n\n\n5: the player have the item\n\n\n\n\nCollect an Item in a specific Level\n\n\nHere's a way to check if an item is collected in the level/room ID it is supposed to be collected. It avoids awarding an \"get item X\" by loading a savestate where player already has the item.\n\n\n\n\n\n\n\n\nID\n\n\nSpecial?\n\n\nMemory\n\n\nCmp\n\n\nType\n\n\nMem/Val\n\n\nHits\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\n0xITEM\n\n\n=\n\n\nValue\n\n\nFALSE\n\n\n(1)\n\n\n\n\n\n\n2\n\n\n\n\n0xITEM\n\n\n=\n\n\nValue\n\n\nTRUE\n\n\n\n\n\n\n\n\n3\n\n\nResetIf\n\n\n0xLEVEL\n\n\n!=\n\n\nValue\n\n\ncollect level\n\n\n\n\n\n\n\n\n\n\nRequirements\n\n\n\n\n1: Do not have the item when entered the collect level, the hit is a checkpoint so 1\n2 can both be true at once.\n\n\n2: Have the item\n\n\n3: Reset hit counter if in a level different than the one where the item must be obtained\n\n\n\n\nRequirements 1 and 3 together mean \"arrived the level/Room ID without the item\".\n\n\nEven if the player loads a savestate and goes to the required level they will not be able to add hits to condition 1, thus they can't get it except in normal gameplay.  \n\n\nIt does not necessarily have to be level/Room ID. There are other ways to approach this problem, for example a unique Mem/Val that only occurs on collection. Etc.\n\n\nCheck for a specific value changing to another specific value ten times\n\n\nIn this example we want to detect a value changing from \nV1\n to \nV2\n ten times:\n\n\n\n\n\n\n\n\nID\n\n\nSpecial?\n\n\nType\n\n\nMemory\n\n\nCmp\n\n\nType\n\n\nMem/Val\n\n\nHits\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\nMem\n\n\n0xADDRESS\n\n\n=\n\n\nValue\n\n\n0xV1\n\n\n(10)\n\n\n\n\n\n\n2\n\n\n\n\nDelta\n\n\n0xADDRESS\n\n\n=\n\n\nValue\n\n\n0xV2\n\n\n(10)\n\n\n\n\n\n\n3\n\n\nPauseIf\n\n\nMem\n\n\n0xADDRESS\n\n\n=\n\n\nDelta\n\n\n0xADDRESS\n\n\n\n\n\n\n\n\n\n\nConditional Resets\n\n\nConditional resets can be used for many things.\n\n\nLets say you want to have a reset if a player enters a certain X and Y zone of a level:\n\n\nCORE\n  \n\n\n\n\nThe Core is whatever condition(s) you need for your achievement to be true. It can also include normal reset behavior.\n\n\n\n\nALT1\n\n\n\n\n\n\n\n\nID\n\n\nSpecial?\n\n\nType\n\n\nMemory\n\n\nCmp\n\n\nType\n\n\nMem/Val\n\n\n\n\n\n\n\n\n\n\n1\n\n\nResetIf\n\n\nMem\n\n\n0xLEVEL\n\n\n=\n\n\nValue\n\n\nLEVELID\n\n\n\n\n\n\n2\n\n\nPauseIf\n\n\nMem\n\n\n0xX-COORDS\n\n\n\n\nValue\n\n\nRESET-X-ZONE\n\n\n\n\n\n\n3\n\n\nPauseIf\n\n\nMem\n\n\n0xX-COORDS\n\n\n\n\nValue\n\n\nRESET-X-ZONE\n\n\n\n\n\n\n4\n\n\nPauseIf\n\n\nMem\n\n\n0xY-COORDS\n\n\n\n\nValue\n\n\nRESET-Y-ZONE\n\n\n\n\n\n\n5\n\n\nPauseIf\n\n\nMem\n\n\n0xY-COORDS\n\n\n\n\nValue\n\n\nRESET-Y-ZONE\n\n\n\n\n\n\n\n\n\n\nThe reset will only happen if all of the Pauseif conditions are not true.\n\n\nThe pause is local to the alt but the reset resets the entire achievement.\n\n\n\n\nALT2\n\n\n\n\n\n\n\n\nID\n\n\nSpecial?\n\n\nType\n\n\nMemory\n\n\nCmp\n\n\nType\n\n\nMem/Val\n\n\n\n\n\n\n\n\n\n\n1\n\n\n\n\nMem\n\n\n0x1\n\n\n=\n\n\nMem\n\n\n0x1\n\n\n\n\n\n\n\n\n\n\n\n\nAny true condition. (to satisfy alt behavior having an always true alt is needed)\n\n\n\n\n\n\nNote:\n You can use multiple conditional resets, each one in their own alt group to have far greater control of reset behavior.\n\n\n\n\n\n\nConcept For Not allowing worn mask in Majora's Mask in 3 certain zones and collecting and depositing all eggs\n\n\nCore:\nEgg in fortress 1 hit (not collected)\nEgg not in fortress 1 hit (collected)\n\n above 2 for each egg\nDelta was Great Bay Area ID 1 hit (a checkpoint for before getting egg 1)\n\nALT 1 \nResetIf mask on\nPauseIf != Zone ID1\n\nALT 2\nResetIf mask on\nPauseIf != Zone ID2\n\nALT 3\nResetIf mask on\nPauseIf != Zone ID3\n\nALT 4\nAll eggs turned in 0 hits", 
            "title": "Achievement Templates"
        }, 
        {
            "location": "/Achievement-Templates/#warning-every-game-is-different", 
            "text": "Here you'll see examples of some typical achievements. You can use them as inspiration to create your own achievement. But keep in mind the following:  EVERY GAME IS DIFFERENT! The memory has a different behavior from game to game.  So do  NOT  take these examples as a rule. They are here just for educational purposes.  In these examples we use the following convention  0xLEVEL  is the memory address with the level ID;  0xLIFE  is the address used for the character life;  0xTIME  for time,  0xITEM  for getting an item, etc...", 
            "title": "WARNING: EVERY GAME IS DIFFERENT!"
        }, 
        {
            "location": "/Achievement-Templates/#finish-level-n", 
            "text": "In this example we want to award when the player finish the level  N  and goes to level  N+1 .     ID  Special?  Memory  Cmp  Type  Mem/Val  Hits      1   0xLEVEL  =  Value  N  (1)    2   0xLEVEL  =  Value  N+1     3   0xLEVEL   Delta  0xLEVEL     4  ResetIf  0xLEVEL  =  Value  TITLE      Requirements   1: On level  N  at least one time  2: Currently at level  N+1  3: The level has been increased  4: Reset the hit counter when back to title screen   The value  0xTITLE  means \"at game's title screen\". You need to  ResetIf  going to the title screen to avoid the awarding at a wrong time.  Here is an example of game flow that could make the achievement trigger at a wrong time if it wasn't for that ReseIf:   Start the game and reach level 2 (this make the hit counter goes to 1)  Get a game over while on level 2  Go back to the title screen  Use a password for level 3   If not using the ResetIf we will have these conditions:   Hit level 2: TRUE  Current level = level 3: TRUE  Level increased (from title/password screen to level 3): TRUE   And it would be enough to trigger the cheevo (at a wrong time). That's why we're using the  ResetIf  in this example.", 
            "title": "Finish Level N"
        }, 
        {
            "location": "/Achievement-Templates/#finish-level-n-before-time-reaches-t", 
            "text": "In this example we consider a game where the time decreases (e.g.: Super Mario Bros). Adapt it accordingly the time on your game has a different behavior.  We want to award if the player finishes the level  N  while time is greater than  T .     ID  Special?  Memory  Cmp  Type  Mem/Val  Hits      1   0xLEVEL  =  Value  N  (1)    2   0xLEVEL  =  Value  N+1     3   0xLEVEL   Delta  0xLEVEL     4  ResetIf  0xLEVEL  =  Value  TITLE     5   0xTIME  =  Value  T      Requirements  Requirements 1-4 are the same as  Finish Level N  template.   5: timer is greater than  T .   Keep in mind that besides knowing how the time behaves in game you also need to research how it behaves in memory.", 
            "title": "Finish Level N before Time reaches T"
        }, 
        {
            "location": "/Achievement-Templates/#finish-level-n-without-dying-or-getting-hit-using-a-weapon-etc", 
            "text": "ID  Special?  Memory  Cmp  Type  Mem/Val  Hits      1   0xLEVEL  =  Value  N  (1)    2   0xLEVEL  =  Value  N+1     3   0xLEVEL   Delta  0xLEVEL     4  ResetIf  0xLEVEL  =  Value  TITLE     5   0xSCREEN  =  Value  LVL_N_INTRO  (1)    6  ResetIf  0xLIFE   Delta  0xLIFE      Requirements  Requirements 1-4 are the same as  Finish Level N  template.   5: a checkpoint to represent the point from where the player is suposed to start the chalenge of not losing a life. If the game has a level intro screen, it can be a good checkpoint.  6: reset hit count if life decreased.   The requirement 6 can also be used to reset hit count if a weapon was used, damage taken, or anything else that you want the player to NOT do.", 
            "title": "Finish Level N without Dying (or getting hit, using a weapon, etc.)"
        }, 
        {
            "location": "/Achievement-Templates/#finish-level-n-with-item", 
            "text": "ID  Special?  Memory  Cmp  Type  Mem/Val  Hits      1   0xLEVEL  =  Value  N  (1)    2   0xLEVEL  =  Value  N+1     3   0xLEVEL   Delta  0xLEVEL     4  ResetIf  0xLEVEL  =  Value  TITLE     5   0xITEM  =  Value  TRUE      Requirements  Requirements 1-4 are the same as  Finish Level N  template.   5: the player have the item", 
            "title": "Finish Level N with Item"
        }, 
        {
            "location": "/Achievement-Templates/#collect-an-item-in-a-specific-level", 
            "text": "Here's a way to check if an item is collected in the level/room ID it is supposed to be collected. It avoids awarding an \"get item X\" by loading a savestate where player already has the item.     ID  Special?  Memory  Cmp  Type  Mem/Val  Hits      1   0xITEM  =  Value  FALSE  (1)    2   0xITEM  =  Value  TRUE     3  ResetIf  0xLEVEL  !=  Value  collect level      Requirements   1: Do not have the item when entered the collect level, the hit is a checkpoint so 1 2 can both be true at once.  2: Have the item  3: Reset hit counter if in a level different than the one where the item must be obtained   Requirements 1 and 3 together mean \"arrived the level/Room ID without the item\".  Even if the player loads a savestate and goes to the required level they will not be able to add hits to condition 1, thus they can't get it except in normal gameplay.    It does not necessarily have to be level/Room ID. There are other ways to approach this problem, for example a unique Mem/Val that only occurs on collection. Etc.", 
            "title": "Collect an Item in a specific Level"
        }, 
        {
            "location": "/Achievement-Templates/#check-for-a-specific-value-changing-to-another-specific-value-ten-times", 
            "text": "In this example we want to detect a value changing from  V1  to  V2  ten times:     ID  Special?  Type  Memory  Cmp  Type  Mem/Val  Hits      1   Mem  0xADDRESS  =  Value  0xV1  (10)    2   Delta  0xADDRESS  =  Value  0xV2  (10)    3  PauseIf  Mem  0xADDRESS  =  Delta  0xADDRESS", 
            "title": "Check for a specific value changing to another specific value ten times"
        }, 
        {
            "location": "/Achievement-Templates/#conditional-resets", 
            "text": "Conditional resets can be used for many things.  Lets say you want to have a reset if a player enters a certain X and Y zone of a level:  CORE      The Core is whatever condition(s) you need for your achievement to be true. It can also include normal reset behavior.   ALT1     ID  Special?  Type  Memory  Cmp  Type  Mem/Val      1  ResetIf  Mem  0xLEVEL  =  Value  LEVELID    2  PauseIf  Mem  0xX-COORDS   Value  RESET-X-ZONE    3  PauseIf  Mem  0xX-COORDS   Value  RESET-X-ZONE    4  PauseIf  Mem  0xY-COORDS   Value  RESET-Y-ZONE    5  PauseIf  Mem  0xY-COORDS   Value  RESET-Y-ZONE      The reset will only happen if all of the Pauseif conditions are not true.  The pause is local to the alt but the reset resets the entire achievement.   ALT2     ID  Special?  Type  Memory  Cmp  Type  Mem/Val      1   Mem  0x1  =  Mem  0x1       Any true condition. (to satisfy alt behavior having an always true alt is needed)    Note:  You can use multiple conditional resets, each one in their own alt group to have far greater control of reset behavior.", 
            "title": "Conditional Resets"
        }, 
        {
            "location": "/Achievement-Templates/#concept-for-not-allowing-worn-mask-in-majoras-mask-in-3-certain-zones-and-collecting-and-depositing-all-eggs", 
            "text": "Core:\nEgg in fortress 1 hit (not collected)\nEgg not in fortress 1 hit (collected)  above 2 for each egg\nDelta was Great Bay Area ID 1 hit (a checkpoint for before getting egg 1)\n\nALT 1 \nResetIf mask on\nPauseIf != Zone ID1\n\nALT 2\nResetIf mask on\nPauseIf != Zone ID2\n\nALT 3\nResetIf mask on\nPauseIf != Zone ID3\n\nALT 4\nAll eggs turned in 0 hits", 
            "title": "Concept For Not allowing worn mask in Majora's Mask in 3 certain zones and collecting and depositing all eggs"
        }, 
        {
            "location": "/Difficulty-Scale-and-Balance/", 
            "text": "This doc has some suggestions about difficulty, set balance and on keeping a set fun, approachable, and challenging. What you're going to see here are not rules, just suggestions.\n\n\nNote\n: be aware of \nDevelopers Code of Conduct\n\n\nDifficulty Scale:\n\n\n\n\nFreebie\n\n\nEasy\n\n\nMedium\n\n\nMed-hard\n\n\nHard\n\n\nVery-Hard\n\n\nSuper-Hard\n\n\n\n\nMore details on these \nat the bottom\n.\n\n\nIn general there should be an steady sloping balance of difficulty. One should think of the overall difficulty of a set while building it. One should not make sets excessively difficult.\n\n\nA good set balance on a 50 cheeves in an average set would have roughly: 4 freebies, 6 easy cheeves, 10 medium, 10 med-hard, 14 hard, and 6 very-hard, 0 kaizo.\n\n\nA well balanced difficulty distribution has rewards for every type of player. It gives each skill level something to accomplish until mastery.\n\n\nAchievements should not just be a check-mark of completing a game\n, (too easy) but create fun new memories for the game (diversity of challenges).\n\n\nIt leaves space for freebies that are featuring curious or fun elements of the game. It expects enough difficulty that once you've mastered the set you are a master of the game. But it doesn't ask too much from the player either.\n\n\nIt also shouldn't ask the player to be doing seemingly endless repetitive grinding to make a set seem harder. Doing the same task over and over isn't hard, it's typically dull. It should almost always avoid making marathon types with a hill at the end (ones that require long setup times with low or repetitive difficulty and then a spike of high difficulty at the end. Don't do it!).\n\n\nSets should be mastereable by a skilled player who gives a dedicated effort.\n\n\nSets should reflect the content of the game. Grinding cheeves in games that require grinding are reasonable, where in other places they would often be inappropriate.\n\n\nSets should also break out of just what is expected from a game, pushing the player to need to find new solutions for problems a veteran player never considered.\n\n\nSet Quantity:\n\n\nSet quantity should not have such hard rules. Quality is the key factor.\n\n\nThe set quantity strongly depends on how much fun and challenges the game can give. That's why the set developer must know the game very well.\n\n\nSet Variety:\n\n\nKeep it fun, give it variety, challenge the player, give the player new things to do.\n\n\nSome achievements can give much fun to the player when they are like a meta-game. Where the player is required to rethink the game entirely.\n\n\nSome notable examples:\n\n\n\n\n\n\nFabulous ComboFabulous Combo (15)\n - it turns the game into a puzzle game, completing this can be really satifying\n\n\n\n\n\n\nSwordless Adventurer (20)\n - with no sword you are forced to rethink the entire game. You can discover how useful all the subweapons are. Very fun!\n\n\n\n\n\n\nThere Are No Bullets in the Energy Zone (10)\n - pacifist challenges, when possible force a lot more agility from the player and break old habits. Very fun!\n\n\n\n\n\n\nDefinitions of Difficulty\n\n\n0 - freebie\n\n\nTakes almost no effort for basically all players to achieve this OR the player gets it without any conscious effort. The player gets these on accident and they pop up on the screen. Sometimes the player will have no idea why they earned them. Some freebies are good some are bad.\n\n\nExamples:\n Starting the game, picking a character, collecting an easily accessible item, killing your first enemy. Stumbling on a cheeve that took no forethought but highlights elements of the game.\n\n\n1 - Easy\n\n\nMost players could get these on their first attempt, Some on their second or third attempt. Rarely players can mess it up.\n\n\nExamples:\n Progress on easy stages, getting 100 coins, collecting a feather, collecting 20 rings. Getting the first upgrade, getting to a well known secret stage. Fighting a simple boss: most bosses in Super Mario World, completing early stages in Sonic.\n\n\n2 - Medium\n\n\nMany players could get this on their first attempt. Many could after a few attempts. Some will need to practice. Very few will struggle with them.\n\n\nExamples:\n Getting all the colored switches in Super Mario World, collecting all of the items in a Castlevania stage, getting a bonus item in a more hidden area, like moons in SMW. Beating Contra with the Konami code.\n\n\n3 - Medium-Hard\n\n\nA low amount of players could get this on their first attempt. Some after a few attempts and most will take some effort and practice to complete these. A few will find them very challenging, and give up.\n\n\nExamples:\n Getting some of the chaos emeralds in Sonic 2. Beating Super Mario World.\n\n\n4 - Hard\n\n\nVery few player can get these on their first attempt, perhaps if they already know the game (not really a first attempt is it?) Most can complete these with a solid effort, many attempts and some practice, and some need to practice other games first.\n\n\nExamples:\n Getting all of the Chaos emeralds in Sonic 1,2,3. Beating Contra without the Konami code.\n\n\n5 - Very Hard\n\n\nOnly the rarest of players can complete these on a first attempt. Most can complete it after many attempts, Many players will drop off here and won't be willing to complete the set unless they are completionists or fans of the game. Many are not able to complete this after very many attempts. Usually takes significant practice, high skills, experience, research, or guides to complete.\n\n\nExamples:\n Beating Contra in one life. Escaping Zebes (Super Metroid) in under two minutes. Beating many of the Megaman bosses without taking damage. Many damagless stages, depending on the game.\n\n\n6 - Super Hard\n\n\nMost players are not able to complete this after dozens of attempts. Many players will never be able to complete it as it could require beyond normal reaction speeds. The top-most skilled players still consider these blisteringly hard. It may take marathon efforts to restart.\n\n\nExamples:\n Completing a game without taking damage especially if the player has a lifebar, challenges that drastically restrict the player and require near frame perfect accuracy tor success. Beating contra twice in one life. Penniless plumber. Beating Megaman without taking damage.", 
            "title": "Difficulty Scale and Balance"
        }, 
        {
            "location": "/Difficulty-Scale-and-Balance/#difficulty-scale", 
            "text": "Freebie  Easy  Medium  Med-hard  Hard  Very-Hard  Super-Hard   More details on these  at the bottom .  In general there should be an steady sloping balance of difficulty. One should think of the overall difficulty of a set while building it. One should not make sets excessively difficult.  A good set balance on a 50 cheeves in an average set would have roughly: 4 freebies, 6 easy cheeves, 10 medium, 10 med-hard, 14 hard, and 6 very-hard, 0 kaizo.  A well balanced difficulty distribution has rewards for every type of player. It gives each skill level something to accomplish until mastery.  Achievements should not just be a check-mark of completing a game , (too easy) but create fun new memories for the game (diversity of challenges).  It leaves space for freebies that are featuring curious or fun elements of the game. It expects enough difficulty that once you've mastered the set you are a master of the game. But it doesn't ask too much from the player either.  It also shouldn't ask the player to be doing seemingly endless repetitive grinding to make a set seem harder. Doing the same task over and over isn't hard, it's typically dull. It should almost always avoid making marathon types with a hill at the end (ones that require long setup times with low or repetitive difficulty and then a spike of high difficulty at the end. Don't do it!).  Sets should be mastereable by a skilled player who gives a dedicated effort.  Sets should reflect the content of the game. Grinding cheeves in games that require grinding are reasonable, where in other places they would often be inappropriate.  Sets should also break out of just what is expected from a game, pushing the player to need to find new solutions for problems a veteran player never considered.", 
            "title": "Difficulty Scale:"
        }, 
        {
            "location": "/Difficulty-Scale-and-Balance/#set-quantity", 
            "text": "Set quantity should not have such hard rules. Quality is the key factor.  The set quantity strongly depends on how much fun and challenges the game can give. That's why the set developer must know the game very well.", 
            "title": "Set Quantity:"
        }, 
        {
            "location": "/Difficulty-Scale-and-Balance/#set-variety", 
            "text": "Keep it fun, give it variety, challenge the player, give the player new things to do.  Some achievements can give much fun to the player when they are like a meta-game. Where the player is required to rethink the game entirely.  Some notable examples:    Fabulous ComboFabulous Combo (15)  - it turns the game into a puzzle game, completing this can be really satifying    Swordless Adventurer (20)  - with no sword you are forced to rethink the entire game. You can discover how useful all the subweapons are. Very fun!    There Are No Bullets in the Energy Zone (10)  - pacifist challenges, when possible force a lot more agility from the player and break old habits. Very fun!", 
            "title": "Set Variety:"
        }, 
        {
            "location": "/Difficulty-Scale-and-Balance/#definitions-of-difficulty", 
            "text": "", 
            "title": "Definitions of Difficulty"
        }, 
        {
            "location": "/Difficulty-Scale-and-Balance/#0-freebie", 
            "text": "Takes almost no effort for basically all players to achieve this OR the player gets it without any conscious effort. The player gets these on accident and they pop up on the screen. Sometimes the player will have no idea why they earned them. Some freebies are good some are bad.  Examples:  Starting the game, picking a character, collecting an easily accessible item, killing your first enemy. Stumbling on a cheeve that took no forethought but highlights elements of the game.", 
            "title": "0 - freebie"
        }, 
        {
            "location": "/Difficulty-Scale-and-Balance/#1-easy", 
            "text": "Most players could get these on their first attempt, Some on their second or third attempt. Rarely players can mess it up.  Examples:  Progress on easy stages, getting 100 coins, collecting a feather, collecting 20 rings. Getting the first upgrade, getting to a well known secret stage. Fighting a simple boss: most bosses in Super Mario World, completing early stages in Sonic.", 
            "title": "1 - Easy"
        }, 
        {
            "location": "/Difficulty-Scale-and-Balance/#2-medium", 
            "text": "Many players could get this on their first attempt. Many could after a few attempts. Some will need to practice. Very few will struggle with them.  Examples:  Getting all the colored switches in Super Mario World, collecting all of the items in a Castlevania stage, getting a bonus item in a more hidden area, like moons in SMW. Beating Contra with the Konami code.", 
            "title": "2 - Medium"
        }, 
        {
            "location": "/Difficulty-Scale-and-Balance/#3-medium-hard", 
            "text": "A low amount of players could get this on their first attempt. Some after a few attempts and most will take some effort and practice to complete these. A few will find them very challenging, and give up.  Examples:  Getting some of the chaos emeralds in Sonic 2. Beating Super Mario World.", 
            "title": "3 - Medium-Hard"
        }, 
        {
            "location": "/Difficulty-Scale-and-Balance/#4-hard", 
            "text": "Very few player can get these on their first attempt, perhaps if they already know the game (not really a first attempt is it?) Most can complete these with a solid effort, many attempts and some practice, and some need to practice other games first.  Examples:  Getting all of the Chaos emeralds in Sonic 1,2,3. Beating Contra without the Konami code.", 
            "title": "4 - Hard"
        }, 
        {
            "location": "/Difficulty-Scale-and-Balance/#5-very-hard", 
            "text": "Only the rarest of players can complete these on a first attempt. Most can complete it after many attempts, Many players will drop off here and won't be willing to complete the set unless they are completionists or fans of the game. Many are not able to complete this after very many attempts. Usually takes significant practice, high skills, experience, research, or guides to complete.  Examples:  Beating Contra in one life. Escaping Zebes (Super Metroid) in under two minutes. Beating many of the Megaman bosses without taking damage. Many damagless stages, depending on the game.", 
            "title": "5 - Very Hard"
        }, 
        {
            "location": "/Difficulty-Scale-and-Balance/#6-super-hard", 
            "text": "Most players are not able to complete this after dozens of attempts. Many players will never be able to complete it as it could require beyond normal reaction speeds. The top-most skilled players still consider these blisteringly hard. It may take marathon efforts to restart.  Examples:  Completing a game without taking damage especially if the player has a lifebar, challenges that drastically restrict the player and require near frame perfect accuracy tor success. Beating contra twice in one life. Penniless plumber. Beating Megaman without taking damage.", 
            "title": "6 - Super Hard"
        }, 
        {
            "location": "/Badge-and-Icon-Creation/", 
            "text": "Intro\n\n\nBadges and Icon are used across the site, and are a good way to represent achievement in the game.\n\n\nBadges are the images for the achievements of a game. They are stored on site in the following manner and place: \ni.retroachievements.org/Badge/00136.png\n; the number coincidences with the badge ID found in the Achievement editor. \n\n\nIcons are stored on the site in the following manner and place: \ni.retroachievements.org/Images/000705.png\n, stored in the same folder as other game images such as the game box and game screenshots. \n\n\nBadge Format\n\n\nWhen uploaded, your file is converted into the following:\n\n\n\n\n64x64 32-bit colour PNG  \n\n\n64x64 greyscale and blurred PNG \n\n\n\n\nIt's not entirely important how the file is formatted before uploading, but as long as it's square, the file will upload and be converted pretty easily. Naturally it is important not to break any copyright law, or upload anything vulgar, offensive or pornographic, with the possible consequences of being cautioned, potentially reported and potentially removed from RetroAchievements.\n\n\nIcon Format\n\n\nWhen uploaded, your Icon images are reduced to a maximum 96x96 32-bit colour PNG. If you upload an Icon that is smaller than 96x96 the image uploaded will retain it's original size. \n\n\nPlaces and sizes Icons are displayed: \n- On leaderboards: 96x96 \n- Game Pages: 64x64 \n- User Pages: 48x48 \n- Currently Playing and Global Feed: 32x32 \n\n\nSame thing as with badges, the actual image is not being resized only the display size, if you use android or increase your browser zoom you will see the images more clearly. \n\n\nGuidelines\n\n\n\n\n\n\nUploaded images for badges should be square, as an equal number of x \n y, otherwise the resulting image will be distorted and ugly.\n\n\n\n\n\n\nIt's recommended to make Badges at 64x64 for sharpest clarity. Icons should be made in a way that the subject is clear even when sized at 32x32.\n\n\n\n\n\n\nBadges should refer in some way to what the achievement is about, i.e. a picture of the boss, level or collectible that the achievement requires the player to get to. \n\n\n\n\n\n\nIn the cases of low-resolution games' achievements, it can be hard to get a badge looking good without it looking \nblocky\n or \nblurry\n, in these cases the \nblocky\n look is often preferable, so that the images have a \nretro\n feel to them.\n\n\n\n\n\n\nChanges and Demotions\n\n\nAs the site does not in most cases have a permanent \nchangelog/git-style-rollback/wiki-style-rollback\n for all actions taken on a set it's recommended that when a developer makes changes of any kind to a set that they make a note of it in the forum for that game. \n\n\nIn relation to badges, post in the Game's forum page one of the following:\n- leaving an old copy of the badge in the game thread (example: \n[img=\"http://retroarchievement.org/badge/1234]\n)\n- annotating the old badge ID (number displayed on the badge image's URL) \n\n\nHere is a perfect example of \nhow to properly back up changed badges\n.\n\n\nis recommended, to help keep everything orderly so that in cases when rollbacks or change backs are appropriate it is much easier to do them.", 
            "title": "Badge and Icon Creation"
        }, 
        {
            "location": "/Badge-and-Icon-Creation/#intro", 
            "text": "Badges and Icon are used across the site, and are a good way to represent achievement in the game.  Badges are the images for the achievements of a game. They are stored on site in the following manner and place:  i.retroachievements.org/Badge/00136.png ; the number coincidences with the badge ID found in the Achievement editor.   Icons are stored on the site in the following manner and place:  i.retroachievements.org/Images/000705.png , stored in the same folder as other game images such as the game box and game screenshots.", 
            "title": "Intro"
        }, 
        {
            "location": "/Badge-and-Icon-Creation/#badge-format", 
            "text": "When uploaded, your file is converted into the following:   64x64 32-bit colour PNG    64x64 greyscale and blurred PNG    It's not entirely important how the file is formatted before uploading, but as long as it's square, the file will upload and be converted pretty easily. Naturally it is important not to break any copyright law, or upload anything vulgar, offensive or pornographic, with the possible consequences of being cautioned, potentially reported and potentially removed from RetroAchievements.", 
            "title": "Badge Format"
        }, 
        {
            "location": "/Badge-and-Icon-Creation/#icon-format", 
            "text": "When uploaded, your Icon images are reduced to a maximum 96x96 32-bit colour PNG. If you upload an Icon that is smaller than 96x96 the image uploaded will retain it's original size.   Places and sizes Icons are displayed: \n- On leaderboards: 96x96 \n- Game Pages: 64x64 \n- User Pages: 48x48 \n- Currently Playing and Global Feed: 32x32   Same thing as with badges, the actual image is not being resized only the display size, if you use android or increase your browser zoom you will see the images more clearly.", 
            "title": "Icon Format"
        }, 
        {
            "location": "/Badge-and-Icon-Creation/#guidelines", 
            "text": "Uploaded images for badges should be square, as an equal number of x   y, otherwise the resulting image will be distorted and ugly.    It's recommended to make Badges at 64x64 for sharpest clarity. Icons should be made in a way that the subject is clear even when sized at 32x32.    Badges should refer in some way to what the achievement is about, i.e. a picture of the boss, level or collectible that the achievement requires the player to get to.     In the cases of low-resolution games' achievements, it can be hard to get a badge looking good without it looking  blocky  or  blurry , in these cases the  blocky  look is often preferable, so that the images have a  retro  feel to them.", 
            "title": "Guidelines"
        }, 
        {
            "location": "/Badge-and-Icon-Creation/#changes-and-demotions", 
            "text": "As the site does not in most cases have a permanent  changelog/git-style-rollback/wiki-style-rollback  for all actions taken on a set it's recommended that when a developer makes changes of any kind to a set that they make a note of it in the forum for that game.   In relation to badges, post in the Game's forum page one of the following:\n- leaving an old copy of the badge in the game thread (example:  [img=\"http://retroarchievement.org/badge/1234] )\n- annotating the old badge ID (number displayed on the badge image's URL)   Here is a perfect example of  how to properly back up changed badges .  is recommended, to help keep everything orderly so that in cases when rollbacks or change backs are appropriate it is much easier to do them.", 
            "title": "Changes and Demotions"
        }, 
        {
            "location": "/Leaderboards/", 
            "text": "Currently Leaderboards can be edited by developers on the website. It's a pretty hefty interface and a difficult job to get a leaderboard working just right. It genuinely takes some care and attention to get a good leaderboard working, so in this doc we'll try to understand how it works.\n\n\nOverview\n\n\nThis is how a game's Leaderboard List looks like on the website:\n\n\n\n\nIn the center you can see every already made Leaderboard, and in the right column you can see the \nCode Notes\n for the game. The Code Notes are here to help with some conditions we'll see below.\n\n\nHere's a brief explanation of each field of a single Leaderboard:\n\n\n\n\nTitle\n: the leaderboard's title.\n\n\nDescription\n: the leaderboard's description.\n\n\nFormat\n: it can be \nScore\n, \nTime (Frames)\n, \nTime (Milliseconds)\n or \nValue\n. It's used to distinguish what sort of leaderboard this is (we'll go into this below).\n\n\n\"LowerIsBetter\" checkbox\n: when checked, it means that a lower value is a better thing. It's usually the case for time based leaderboards, whereas a larger score generally is better.\n\n\nStart\n: start conditions, aka \nSTA\n.\n\n\nCancel\n: cancel conditions, aka \nCAN\n.\n\n\nSubmit\n: submit conditions, aka \nSUB\n.\n\n\nValue\n: a value interpreter, aka \nVAL\n.\n\n\n\n\nNote\n: A valid leaderboard MUST have all four of these conditions.\n\n\nThose last 4 fields are really important and \nLOTS\n of care must be taken over the entry of any characters into these strings. That's why they deserve a further explanation:\n\n\nThe \nSTA\n or \nStart\n condition is a series of values, like an achievement, that must be true in order to start looking for a leaderboard submission. Once the \nSTA\n is true, the game will activate the other three, and will keep processing them constantly.\n\n\nIf a \nCancel\n (\nCAN\n) condition is true, then it will cancel all progress towards the leaderboard submission. If however the \nSubmit\n (\nSUB\n) condition is true, then the leaderboard entry will be submitted.\n\n\nFinally, the \nValue\n (\nVAL\n) is a special case, and will be taken from memory using the formula stated in the memory box.\n\n\nAddress Format\n\n\nThe memory addresses for STA/CAN/SUB/VAL have the following format:\n\n\n\n\n\n\n\n\nlocation/size\n\n\nprefix (the letters can be in lower case)\n\n\nexample\n\n\n\n\n\n\n\n\n\n\nbit0\n\n\n0xM\n\n\n0xM01234\n\n\n\n\n\n\nbit1\n\n\n0xN\n\n\n0xN01234\n\n\n\n\n\n\nbit2\n\n\n0xO\n\n\n0xO01234\n\n\n\n\n\n\nbit3\n\n\n0xP\n\n\n0xP01234\n\n\n\n\n\n\nbit4\n\n\n0xQ\n\n\n0xQ01234\n\n\n\n\n\n\nbit5\n\n\n0xR\n\n\n0xR01234\n\n\n\n\n\n\nbit6\n\n\n0xS\n\n\n0xS01234\n\n\n\n\n\n\nbit7\n\n\n0xT\n\n\n0xT01234\n\n\n\n\n\n\nLower4\n\n\n0xL\n\n\n0xL01234\n\n\n\n\n\n\nUpper4\n\n\n0xU\n\n\n0xU01234\n\n\n\n\n\n\n8bit\n\n\n0xH\n\n\n0xH01234\n\n\n\n\n\n\n16bit\n\n\n0x\n\n\n0x01234\n\n\n\n\n\n\n32bit\n\n\n0xX\n\n\n0xX01234\n\n\n\n\n\n\n\n\nExample\n\n\nThe best place to start is to look at one of the existing leaderboards \nhttp://retroachievements.org/leaderboardList.php\n and break it down to see how it works. We're going to use the \nGreen Hill Act 1 (Sonic the Hedgehog) Leaderboard\n for this purpose. Then let's see how it looks:\n\n\n\n\nThe \nTitle/Description\n fields are quite obvious.\n\n\nThe \nType\n is \"Time (Frames)\". In Sonic every 60 frames is 1 second, then we'll monitor the time using the frames.\n\n\nThe \nLower Is Better\n flag is checked, then the one who makes the shortest time will be the #1.\n\n\nNow we're going to break down the most important parts.\n\n\nStart Conditions\n\n\nSTA\n: \n0xfe10=h0000_0xhf601=h0c_d0xhf601!=h0c_0xfff0=0\n\n\n\n\n0xfe10=h0000\n: If RAM address 0xfe10 is equivalent to hex 0000,\n\n\n_\n: AND,\n\n\n0xhf601=h0c\n: If 8-bit RAM address 0xf601 is equivalent to hex 0c,\n\n\n_\n: AND,\n\n\nd0xhf601!=h0c\n: If the previous 8-bit RAM address 0xf601 is NOT equivalent to hex 0c,\n\n\n_\n: AND,\n\n\n0xfff0=0\n If RAM address 0xfff0 is equivalent to 0.\n\n\n\n\nThis might seem daunting, because we don't know what these addresses mean. That's why the \nCode Notes\n in the right column are pretty handy! You can see how these addresses are labelled in memory. In our example we have:\n\n\n\n\n0xfe10 is the level, and is expected to be 0 (the first level).\n\n\n0xf601 is an 8-bit memory address, and we use the prefix '0xh' instead of '0x' to signify this. 0xf601 is the screen mode. The second and third parts of this start statement are saying 'the current mode should be 'ingame' (0c), and the previous mode should NOT be 'ingame'. Note that 'd' represents delta, or \"the previous frame's value\". In other words, trigger this if we've JUST arrived in a level (the start of the level, when we want to start testing their time).\n\n\nFinally we also expect 0xfff0 to be equivalent to 0, because 0xfff0 is the demo mode, and we don't want to award a leaderboard entry when the demo is active!\n\n\n\n\nCancel Conditions\n\n\nCAN\n: \n0xhfe13\nd0xhfe13\n\n\n\n\n0xfe13 is the number of lives.\n\n\n\n\nThe cancel section checks if the player's LIVES counter ever becomes lower. Literally, it says \"Cancel if the CURRENT value at 0xfe13 is less than the PREVIOUS value at 0xfe13\". We want to do this because you could reach the final checkpoint and run out of time, resetting your timer to 0:00. We don't want to allow this, because it's not the correct way of completing the level. So if the player dies, we reset their leaderboard progress.\n\n\nSubmit Conditions\n\n\nSUB\n: \n0xf7cc!=0_d0xf7cc=0\n\n\n\n\n0xf7cc is the endlevel flag, non-interactive.\n\n\n\n\nThe submit section checks if the current frame has the 'endlevel' flag set to true (or \n!=0\n, 'nonzero'), and the previous frame (delta) has it set to false (or \n=0\n, 'zero'). This suggests that the player has reached the end of the level, and has proven to be a fairly sturdy benchmark.\n\n\nTip\n: it can be useful to watch these values in memory to see how they perform, and what sort of values they end up at in different circumstances.\n\n\nValue Interpreter\n\n\nVAL\n: \n0xhfe24*1_0xhfe25*60_0xhfe22*3600\n\n\nFinally, value. Once the player has reached the start condition, they will be shown a popup which remains on-screen, showing their progress so far. If it's a time leaderboard, it will be a clock, and if it's a score, it will just be the value. If they fulfill the cancel condition, they will be told that they have failed, and the popup will be removed. If they successfully reach the submit condition, the current value will be taken and submitted as their score, and on successful submission, an ingame popup will inform the player of the leaderboard so far, and their position in the leaderboard.\n\n\nThe value condition is special in a few ways. It is evaluated constantly and shown on-screen all the time when the leaderboard is active. It doesn't work like the other conditions, it expects addresses in the following way:\n\n\naddress*modifier\n (address times modifier)\n\n\nand it uses the \n_\n underscore operator as a 'plus'. The \n*\n asterisk signifies 'multiply', so in the value\n\n\n0xhfe24*1_0xhfe25*60_0xhfe22*3600\n\n\nrepresents:\n\n\n8-bit 0xfe24 times 1, PLUS\n8-bit 0xfe25 times 60, PLUS\n8-bit 0xfe22 times 3600\n\n\nThe reason for this is that the values in each of these addresses signifies frames, seconds, and minutes respectively. When we add these values together, we get a grand total in frames that we submit to the database.\n\n\nRemember that 'Format' field that can be either \nScore\n, \nTime (Frames)\n, \nTime (Milliseconds)\n or \nValue\n? \nTime (Frames)\n is the most common one, and represents 'frames'. \nTime (Milliseconds)\n expects a value that we can convert directly into millisecs (Super Mario Kart uses this). However to convert a value in frames into a human-readible format, we should divide the value by 60 to get an accurate representation of seconds, and a value in millisecs should be divided by 100 to get the number of seconds. This is used both on the website and in the app to display the value properly, and is important to distinguish so we can be sure we get the most accurate value out of the emulator, by using whatever format they use to record time.\n\n\nFurther help\n\n\nThere are unfortunately \nMANY\n ways to get this process wrong, so if you are having any trouble feel free to ask for help in our \nDiscord server\n.\n\n\nIf you want to practice, it's highly recommended to create your own leaderboard and attempting something on a new game, rather than using an existing leaderboard.\n\n\nPlease remember that these files are pulled directly into someone's game if they decide to play it, and a badly formed memory address or string could cause their emulator to crash, so please test your leaderboard code!", 
            "title": "Leaderboards"
        }, 
        {
            "location": "/Leaderboards/#overview", 
            "text": "This is how a game's Leaderboard List looks like on the website:   In the center you can see every already made Leaderboard, and in the right column you can see the  Code Notes  for the game. The Code Notes are here to help with some conditions we'll see below.  Here's a brief explanation of each field of a single Leaderboard:   Title : the leaderboard's title.  Description : the leaderboard's description.  Format : it can be  Score ,  Time (Frames) ,  Time (Milliseconds)  or  Value . It's used to distinguish what sort of leaderboard this is (we'll go into this below).  \"LowerIsBetter\" checkbox : when checked, it means that a lower value is a better thing. It's usually the case for time based leaderboards, whereas a larger score generally is better.  Start : start conditions, aka  STA .  Cancel : cancel conditions, aka  CAN .  Submit : submit conditions, aka  SUB .  Value : a value interpreter, aka  VAL .   Note : A valid leaderboard MUST have all four of these conditions.  Those last 4 fields are really important and  LOTS  of care must be taken over the entry of any characters into these strings. That's why they deserve a further explanation:  The  STA  or  Start  condition is a series of values, like an achievement, that must be true in order to start looking for a leaderboard submission. Once the  STA  is true, the game will activate the other three, and will keep processing them constantly.  If a  Cancel  ( CAN ) condition is true, then it will cancel all progress towards the leaderboard submission. If however the  Submit  ( SUB ) condition is true, then the leaderboard entry will be submitted.  Finally, the  Value  ( VAL ) is a special case, and will be taken from memory using the formula stated in the memory box.", 
            "title": "Overview"
        }, 
        {
            "location": "/Leaderboards/#address-format", 
            "text": "The memory addresses for STA/CAN/SUB/VAL have the following format:     location/size  prefix (the letters can be in lower case)  example      bit0  0xM  0xM01234    bit1  0xN  0xN01234    bit2  0xO  0xO01234    bit3  0xP  0xP01234    bit4  0xQ  0xQ01234    bit5  0xR  0xR01234    bit6  0xS  0xS01234    bit7  0xT  0xT01234    Lower4  0xL  0xL01234    Upper4  0xU  0xU01234    8bit  0xH  0xH01234    16bit  0x  0x01234    32bit  0xX  0xX01234", 
            "title": "Address Format"
        }, 
        {
            "location": "/Leaderboards/#example", 
            "text": "The best place to start is to look at one of the existing leaderboards  http://retroachievements.org/leaderboardList.php  and break it down to see how it works. We're going to use the  Green Hill Act 1 (Sonic the Hedgehog) Leaderboard  for this purpose. Then let's see how it looks:   The  Title/Description  fields are quite obvious.  The  Type  is \"Time (Frames)\". In Sonic every 60 frames is 1 second, then we'll monitor the time using the frames.  The  Lower Is Better  flag is checked, then the one who makes the shortest time will be the #1.  Now we're going to break down the most important parts.", 
            "title": "Example"
        }, 
        {
            "location": "/Leaderboards/#start-conditions", 
            "text": "STA :  0xfe10=h0000_0xhf601=h0c_d0xhf601!=h0c_0xfff0=0   0xfe10=h0000 : If RAM address 0xfe10 is equivalent to hex 0000,  _ : AND,  0xhf601=h0c : If 8-bit RAM address 0xf601 is equivalent to hex 0c,  _ : AND,  d0xhf601!=h0c : If the previous 8-bit RAM address 0xf601 is NOT equivalent to hex 0c,  _ : AND,  0xfff0=0  If RAM address 0xfff0 is equivalent to 0.   This might seem daunting, because we don't know what these addresses mean. That's why the  Code Notes  in the right column are pretty handy! You can see how these addresses are labelled in memory. In our example we have:   0xfe10 is the level, and is expected to be 0 (the first level).  0xf601 is an 8-bit memory address, and we use the prefix '0xh' instead of '0x' to signify this. 0xf601 is the screen mode. The second and third parts of this start statement are saying 'the current mode should be 'ingame' (0c), and the previous mode should NOT be 'ingame'. Note that 'd' represents delta, or \"the previous frame's value\". In other words, trigger this if we've JUST arrived in a level (the start of the level, when we want to start testing their time).  Finally we also expect 0xfff0 to be equivalent to 0, because 0xfff0 is the demo mode, and we don't want to award a leaderboard entry when the demo is active!", 
            "title": "Start Conditions"
        }, 
        {
            "location": "/Leaderboards/#cancel-conditions", 
            "text": "CAN :  0xhfe13 d0xhfe13   0xfe13 is the number of lives.   The cancel section checks if the player's LIVES counter ever becomes lower. Literally, it says \"Cancel if the CURRENT value at 0xfe13 is less than the PREVIOUS value at 0xfe13\". We want to do this because you could reach the final checkpoint and run out of time, resetting your timer to 0:00. We don't want to allow this, because it's not the correct way of completing the level. So if the player dies, we reset their leaderboard progress.", 
            "title": "Cancel Conditions"
        }, 
        {
            "location": "/Leaderboards/#submit-conditions", 
            "text": "SUB :  0xf7cc!=0_d0xf7cc=0   0xf7cc is the endlevel flag, non-interactive.   The submit section checks if the current frame has the 'endlevel' flag set to true (or  !=0 , 'nonzero'), and the previous frame (delta) has it set to false (or  =0 , 'zero'). This suggests that the player has reached the end of the level, and has proven to be a fairly sturdy benchmark.  Tip : it can be useful to watch these values in memory to see how they perform, and what sort of values they end up at in different circumstances.", 
            "title": "Submit Conditions"
        }, 
        {
            "location": "/Leaderboards/#value-interpreter", 
            "text": "VAL :  0xhfe24*1_0xhfe25*60_0xhfe22*3600  Finally, value. Once the player has reached the start condition, they will be shown a popup which remains on-screen, showing their progress so far. If it's a time leaderboard, it will be a clock, and if it's a score, it will just be the value. If they fulfill the cancel condition, they will be told that they have failed, and the popup will be removed. If they successfully reach the submit condition, the current value will be taken and submitted as their score, and on successful submission, an ingame popup will inform the player of the leaderboard so far, and their position in the leaderboard.  The value condition is special in a few ways. It is evaluated constantly and shown on-screen all the time when the leaderboard is active. It doesn't work like the other conditions, it expects addresses in the following way:  address*modifier  (address times modifier)  and it uses the  _  underscore operator as a 'plus'. The  *  asterisk signifies 'multiply', so in the value  0xhfe24*1_0xhfe25*60_0xhfe22*3600  represents:  8-bit 0xfe24 times 1, PLUS\n8-bit 0xfe25 times 60, PLUS\n8-bit 0xfe22 times 3600  The reason for this is that the values in each of these addresses signifies frames, seconds, and minutes respectively. When we add these values together, we get a grand total in frames that we submit to the database.  Remember that 'Format' field that can be either  Score ,  Time (Frames) ,  Time (Milliseconds)  or  Value ?  Time (Frames)  is the most common one, and represents 'frames'.  Time (Milliseconds)  expects a value that we can convert directly into millisecs (Super Mario Kart uses this). However to convert a value in frames into a human-readible format, we should divide the value by 60 to get an accurate representation of seconds, and a value in millisecs should be divided by 100 to get the number of seconds. This is used both on the website and in the app to display the value properly, and is important to distinguish so we can be sure we get the most accurate value out of the emulator, by using whatever format they use to record time.", 
            "title": "Value Interpreter"
        }, 
        {
            "location": "/Leaderboards/#further-help", 
            "text": "There are unfortunately  MANY  ways to get this process wrong, so if you are having any trouble feel free to ask for help in our  Discord server .  If you want to practice, it's highly recommended to create your own leaderboard and attempting something on a new game, rather than using an existing leaderboard.  Please remember that these files are pulled directly into someone's game if they decide to play it, and a badly formed memory address or string could cause their emulator to crash, so please test your leaderboard code!", 
            "title": "Further help"
        }, 
        {
            "location": "/Rich-Presence/", 
            "text": "Introduction\n\n\nRich Presence \n(RP)\n is brief overview of what active players are currently doing in their game. To have RP in a game you need a Rich Presence Script \n(RPS)\n which is created by Developers. The Script check the player's game memory and as programmed reports the values of certain addresses with definitions assigned by the Developer such as which stage the player is on, how many lives they have, if the game is paused, what game mode they are playing, what the player has accomplished, etc. This information is reported back to the website. \nEvery game published needs at least a basic RPS.\n\n\nExample of RP in action:\n\n\n  \n\n\nTo see the RP live in a game click on the RetroAchievements menu in your emulator and then click on Rich Presence Monitor. A small window will show you your active RP. (Good for debugging)\n\n\n\n\nThe best way to understand Rich Presence is to look at various examples in game, look at the addresses used and look at how the text is displayed in the Rich Presence Monitor and on site.\n\n\nHow Does it work?\n\n\nEvery time a game is launched, it fetches the achievements in a 'patch' file for the ROM which details all the achievements and memory addresses (and leaderboards) that can be watched for. It will also request a Rich Presence Script for the currently loaded ROM. The emulator will report back to the website every 120 seconds. Similarly, every 120 seconds or so, the 'active players' box on the frontpage will refresh, detailing the last known activity of all active players. If there isn't a rich presence script given, the text will be 'earning achievements' if playing a game with achievements, 'playing [game]' if playing a game without achievements, or 'developing achievements' if the memory dialog is open and visible. \n\n\nThe RPS for each game can be found under the development section on each game's page: \n\n\n\n\n\n\nExample (Super Mario Bros.)\n\n\nFormat:Digit\nFormatType=VALUE\n\nLookup:Mode\n0=[Demo] \n2=[World Complete] \n\nLookup:Paused\n0x81=\u258c\u258c \n0x80=\u258c\u258c \n1=\u258c\u258c \n\nLookup:Star\n5=\ud83c\udf1f \n4=\ud83c\udf1f \n3=\ud83c\udf1f \n2=\ud83c\udf1f \n1=\ud83c\udf1f \n\nLookup:Powerup\n0=Small\n1=Super\n2=Fire\n\nLookup:Swimming\n1= swimming\n\nLookup:Status\n0= [Loading]\n1= taking a vine warp\n2= entering a warp pipe\n3= entering a warp pipe\n4= \ud83d\udea9\n5= [Stage Complete]\n6= [Game Over]\n7= [Entering Area]\n9= growing\n0xA= shrinking\n0xB= \ud83d\udc80\n0xC= powering up\n\nLookup:Quest\n0x0=1st\n0x1=2nd\n\nDisplay:\n@Mode(0xh770)@Paused(0xh776)@Star(0xM79f_0xN79f_0xo79f_0xP79f_0xQ79f_0xR79f)@Powerup(0xh0756) Mario in @Digit(0xh75f_v1)-@Digit(0xh75c_v1)@Swimming(0xh704)@Status(0xhe), \ud83d\udeb6:@Digit(0xh75a_v1), @Quest(0xh7fc) Quest\n\n\n\n\nIt breaks down into a series of Lookup objects, Format objects and one Display object. \n\n\nLookups\n\n\nLookups are defined like this: \n\n\nLookup:NameOfLookup\nValue1=Text When This Value\nValue2=Text When Another Value\n...\n\n\n\n\nWe give the Lookup a value, consisting of a series of memory addresses and modifiers. More about this later. \n\n\nFormat\n\n\nFormat tables are defined like this:\n\n\nFormat:Score\nFormatType=VALUE\n\n\n\n\nBegin with \nFormat:\n, then the name of the format type. On the next line, give \nFormatType=\n, then one of the following: \nVALUE\n, \nSCORE\n (or \nPOINTS\n), \nTIME\n (or \nFRAMES\n), \nSECS\n, \nMILLISECS\n, or \nOTHER\n. \n\n\n\n\nVALUE\n: generic value, no leading zeroes. \n\n\nSCORE\n/\nPOINTS\n: \"000130 points\" \n\n\nTIME\n/\nFRAMES\n: value describes the number of frames elapsed, and will be turned into 00:00.00 \n\n\nSECS\n: value describes the number of seconds elapsed, and will be turned into 00:00 \n\n\nMILLISECS\n: value describes the number of millisecs elapsed, and will be turned into 00:00.00 \n\n\n\n\nDisplay\n\n\nDisplay will be a string that gets shown in the 'Active Players' box on the front page. It refers to the previously defined Lookup and Format objects using a single '@'. It then specifies a name for the lookup or format (case sensitive!), and immediately after, in brackets, a series of memory values specifying what to send to that lookup or format object.\n\n\n@Powerup(0xh756)\n \n\n\nThis means use the Lookup or Format that's called \nPowerup\n, and give it whatever value is in 0xh756. \n\n\nExample Lookup Breakdown\n\n\n\n\n@Mode(0xh770)\n - Lookup for the address that shows if the game is in demo mode or a world has been completed.  \n\n\n@Paused(0xh776)\n - Lookup for the address that shows if the game is paused (3 values are used, two of them are for pausing and unpausing).  \n\n\n@Star(0xM79f_0xN79f_0xo79f_0xP79f_0xQ79f_0xR79f)\n - Lookup for the address of if Mario has Star invincibility. More on this later.  \n\n\n@Powerup(0xh756)\n - Lookup for the address that show if Mairo is Small, big or has fire power.  \n\n\nMario in\n - Static text to string lookup and format objects together.  \n\n\n@Digit(0xh75f_v1)\n - \nDigit\n is a format object defined as a value. The address 0xh75f is the World minus 1 (because it it 0 based, as in it starts counting at 0). \n_v1\n Means + value 1. \n_v+1\n is also correct.  \n\n\n-\n - More static text to split World and Level. as in the hypen in World 1-1.  \n\n\n@Digit(0xh75c_v1)\n - Another use of the \nDigit\n format object. This time It's looking up the stage. World 1-X.  \n\n\n@Swimming(0xh704)\n - Lookup for the address that shows if the player is swimming.  \n\n\n@Status(0xhe)\n - Lookup for the address that shows Mario's status, such as going through pipes.  \n\n\n, \ud83d\udeb6:\n - More static text. \ud83d\udeb6 is a symbol for lives.  \n\n\n@Digit(0xh75a_v1)\n - Third use of the \nDigit\n format object. This time it's checking the player lives address.  \n\n\n,\n - Static text.  \n\n\n@Quest(0xh7fc)\n A lookup to see if the player is in normal or on the 2nd quest, hardmode.  \n\n\nQuest\n - Static Text.  \n\n\n\n\nAddress size\n\n\nTo specify what size of address you are are checking there are various characters used. (capitalization is ignored)\n\n\n\n\nA 16bit address is default and has no character designation. At 0x10 the address is two bytes - 16 bits.\n\n\nAn 8bit address's character is \nh\n (or \nH\n). At 0xh10 the address is one byte - 8 bits. \nxxxx xxxx\n  \n\n\nAn upper4 address's character is \nu\n (or \nU\n). At 0xu10 the address is one nibble - 4 bits. \nxxxx 0000\n  \n\n\nA lower4 address's character is \nl\n (or \nL\n). At 0xl10 the address is one nibble - 4 bits. \n0000 xxxx\n  \n\n\nA bit0 address's character is \nm\n (or \nM\n). At 0xm10 the address is one bit, the lowest bit: \n0000 000x\n  \n\n\nA bit1 address's character is \nn\n (or \nN\n). At 0xn10 the address is one bit, the second bit: \n0000 00x0\n  \n\n\nA bit2 address's character is \no\n (or \nO\n). At 0xn10 the address is one bit, the third bit: \n0000 0x00\n  \n\n\nA bit3 address's character is \np\n (or \nP\n). At 0xp10 the address is one bit, the fourth bit: \n0000 x000\n  \n\n\nA bit4 address's character is \nq\n (or \nQ\n). At 0xq10 the address is one bit, the fifth bit: \n000x 0000\n  \n\n\nA bit5 address's character is \nr\n (or \nR\n). At 0xr10 the address is one bit, the sixth bit: \n00x0 0000\n  \n\n\nA bit6 address's character is \ns\n (or \nS\n). At 0xs10 the address is one bit, the seventh bit: \n0x00 0000\n  \n\n\nA bit7 address's character is \nt\n (or \nT\n). At 0xt10 the address is one bit, the top bit: \nx000 0000\n  \n\n\nA 32bit address's character is \nx\n (or \nX\n). At 0xx10 the address is four bytes and 32 bits.\n\n\n\n\nSummarizing on a table:\n\n\n\n\n\n\n\n\nlocation/size\n\n\nprefix (the letters can be in lower case)\n\n\nexample\n\n\n\n\n\n\n\n\n\n\nbit0\n\n\n0xM\n\n\n0xM01234\n\n\n\n\n\n\nbit1\n\n\n0xN\n\n\n0xN01234\n\n\n\n\n\n\nbit2\n\n\n0xO\n\n\n0xO01234\n\n\n\n\n\n\nbit3\n\n\n0xP\n\n\n0xP01234\n\n\n\n\n\n\nbit4\n\n\n0xQ\n\n\n0xQ01234\n\n\n\n\n\n\nbit5\n\n\n0xR\n\n\n0xR01234\n\n\n\n\n\n\nbit6\n\n\n0xS\n\n\n0xS01234\n\n\n\n\n\n\nbit7\n\n\n0xT\n\n\n0xT01234\n\n\n\n\n\n\nLower4\n\n\n0xL\n\n\n0xL01234\n\n\n\n\n\n\nUpper4\n\n\n0xU\n\n\n0xU01234\n\n\n\n\n\n\n8bit\n\n\n0xH\n\n\n0xH01234\n\n\n\n\n\n\n16bit\n\n\n0x\n\n\n0x01234\n\n\n\n\n\n\n32bit\n\n\n0xX\n\n\n0xX01234\n\n\n\n\n\n\n\n\nBinary Coded Decimal (BCD)\n\n\nBCD is when the values are store in an address from as 0-9 (one digit) or 0-99 (two digits). Keep in most often values are stored in hexidecimal, but sometime games will store them in this way and here's the best way to handle these addresses in your display.\n\n\nFor value objects you can use the BCD prefix, as in \nb0x1\n.\nA BCD address is assumed to be 8bit, h is unnecessary but also won't cause problems. Other character prefixes work? (untested).\nWhen you use the b prefix and the address is stored as a BCD your out put for an address that is 10 will be 10 instead of 16 (which is 10 in hex).\n\n\nThis is most commonly used for score and time, but often other types of display values.\n\n\nLimits\n\n\n\n\n2500 character limit for script  \n\n\n100 character limit for what is displayed  \n\n\nUnicode characters are allowed  \n\n\nUsing \n in text will cut off the script after the \n  \n\n\nUsing the character \n+\n Will not display  \n\n\n\n\nSyntax Details\n\n\n\n\nThe RPS ignores trailing 0s in hex address lookups and values \n0x00001\n == \n0x1\n, \n0xh0000245\n == \n0xh245\n, \n0x0a\n == \n0xa\n.\n\n\nLookup values are Decimal by default and hex if you place the prefix of \n0x\n. This mean \n1\n == \n0x1\n, \n2\n == \n0x2\n, \n9\n == \n0x9\n, \n10\n == \n0xa\n, \n100\n == \n0x64\n, etc.  \n\n\n\n\nTips and Tricks\n\n\n\n\nLookups must be case specific with their corresponding @ in the display and not contain spaces after the lookup is defined.\n\n\nLookup names can be as short as a single character if you need to squeeze in a few extra characters.\n\n\nTurning all your values from hex into decimal will take up less characters.\n\n\nUnicode characters don't always \"take up less space\" they often take up to four system characters.\n\n\nIf you do not define your lookups they will be left blank (no space). This is only true for NES, SNES, Gen, RAVBA. N64, Meka and Lynx will leave the word \"Unknown\" each time you don't define a lookup.\n\n\nYou only need one value format object. You can reference it with multiple addresses. (is this always true?)\n\n\nPutting spaces in your lookups sometimes before or after can allow you to hide certain lookups when they are not needed, like how \n@Pause\n, \n@Star\n, \n@Swimming\n, and @Mode do. \n\n\n\n\nValue Properties\n\n\nWhen using lookup and format objects \n@object()\n it's possible to combine and perform calculations. This can be used to correctly display a score, in game time, etc. or make more advanced lookups.\n\n\nExample\n\n\n@Score(0x28*10_0x29*1000_0x26*100000) points\n \n\n\nThis means use the Lookup or Format \nScore\n, and give it the sum of:\n\n- 0x28 times 10, ADD\n\n- 0x29 times 1000, ADD\n\n- 0x26 times 100000  \n\n\n\n\n_\n adds the addresses together.  \n\n\nOr you can add a static value \n0x28_v10\n. This adds 10 to your total, as in whatever the value of \n0x28\n + 10 will be displayed. You can also subtract \n0x28_v-10.\n  \n\n\nIf you'd like to subtract an address you need to multiply the address by -1. \n0x29*-1\n. \n0x29\n is now negative.  \n\n\nIf you'd like to perform division you'll need to multiply by a decimal.  \n0x26*.5\n. \n0x26\n will output 1/2 of the value at \n0x26\n.  \n\n\nAnd you can string everything together: \n0x28*10_0x29*-1_0x26*.625_v-10\n.\n\n\nYou can also add addresses together to give you lookups based on the sums of various addresses. This is used in the example in @Star. It's looking up sum the 6 lowest bits of the address 0xh79f. The way this address works is that so long as there is a value there Mario is invincible star mario and it counts down from hex value 0x23 (35 decimal) to 0. 23 in binary is 0010 0011 meaning the max sum of these bits could 5 during 0001 1111 when the count down reaches hex value 0x1f (31 decimal).\n\n\n\n\nUnicode Standard Symbols\n\n\n\u258c\u258c=Paused\n\n\ud83d\udd01=Loop number\n\n\ud83d\udeb6=Lives. Other symbols that represent the game clearly are also suitable. \ud83d\udc30=in a Bugs bunny Game, \ud83d\udc35=in a Donkey Kong Country game, \u2708=In a jet plane game,\n\n\ud83d\udc9e=Continues\n\n\ud83d\udcaf=Points\n\n\u23f0=In Game Time/Game Clock\n\n\ud83d\udd11=Keys\n\n\ud83d\udca3=Bombs\n\u2630=Menu\n\n \u2764\ufe0f or \u2764=In a game with hearts (e.g. Zelda) \n\n\ud83d\udcb0=Money\n\n\u2696=Difficulty", 
            "title": "Rich Presence"
        }, 
        {
            "location": "/Rich-Presence/#introduction", 
            "text": "Rich Presence  (RP)  is brief overview of what active players are currently doing in their game. To have RP in a game you need a Rich Presence Script  (RPS)  which is created by Developers. The Script check the player's game memory and as programmed reports the values of certain addresses with definitions assigned by the Developer such as which stage the player is on, how many lives they have, if the game is paused, what game mode they are playing, what the player has accomplished, etc. This information is reported back to the website.  Every game published needs at least a basic RPS.  Example of RP in action:      To see the RP live in a game click on the RetroAchievements menu in your emulator and then click on Rich Presence Monitor. A small window will show you your active RP. (Good for debugging)   The best way to understand Rich Presence is to look at various examples in game, look at the addresses used and look at how the text is displayed in the Rich Presence Monitor and on site.", 
            "title": "Introduction"
        }, 
        {
            "location": "/Rich-Presence/#how-does-it-work", 
            "text": "Every time a game is launched, it fetches the achievements in a 'patch' file for the ROM which details all the achievements and memory addresses (and leaderboards) that can be watched for. It will also request a Rich Presence Script for the currently loaded ROM. The emulator will report back to the website every 120 seconds. Similarly, every 120 seconds or so, the 'active players' box on the frontpage will refresh, detailing the last known activity of all active players. If there isn't a rich presence script given, the text will be 'earning achievements' if playing a game with achievements, 'playing [game]' if playing a game without achievements, or 'developing achievements' if the memory dialog is open and visible.   The RPS for each game can be found under the development section on each game's page:", 
            "title": "How Does it work?"
        }, 
        {
            "location": "/Rich-Presence/#example-super-mario-bros", 
            "text": "Format:Digit\nFormatType=VALUE\n\nLookup:Mode\n0=[Demo] \n2=[World Complete] \n\nLookup:Paused\n0x81=\u258c\u258c \n0x80=\u258c\u258c \n1=\u258c\u258c \n\nLookup:Star\n5=\ud83c\udf1f \n4=\ud83c\udf1f \n3=\ud83c\udf1f \n2=\ud83c\udf1f \n1=\ud83c\udf1f \n\nLookup:Powerup\n0=Small\n1=Super\n2=Fire\n\nLookup:Swimming\n1= swimming\n\nLookup:Status\n0= [Loading]\n1= taking a vine warp\n2= entering a warp pipe\n3= entering a warp pipe\n4= \ud83d\udea9\n5= [Stage Complete]\n6= [Game Over]\n7= [Entering Area]\n9= growing\n0xA= shrinking\n0xB= \ud83d\udc80\n0xC= powering up\n\nLookup:Quest\n0x0=1st\n0x1=2nd\n\nDisplay:\n@Mode(0xh770)@Paused(0xh776)@Star(0xM79f_0xN79f_0xo79f_0xP79f_0xQ79f_0xR79f)@Powerup(0xh0756) Mario in @Digit(0xh75f_v1)-@Digit(0xh75c_v1)@Swimming(0xh704)@Status(0xhe), \ud83d\udeb6:@Digit(0xh75a_v1), @Quest(0xh7fc) Quest  It breaks down into a series of Lookup objects, Format objects and one Display object.", 
            "title": "Example (Super Mario Bros.)"
        }, 
        {
            "location": "/Rich-Presence/#lookups", 
            "text": "Lookups are defined like this:   Lookup:NameOfLookup\nValue1=Text When This Value\nValue2=Text When Another Value\n...  We give the Lookup a value, consisting of a series of memory addresses and modifiers. More about this later.", 
            "title": "Lookups"
        }, 
        {
            "location": "/Rich-Presence/#format", 
            "text": "Format tables are defined like this:  Format:Score\nFormatType=VALUE  Begin with  Format: , then the name of the format type. On the next line, give  FormatType= , then one of the following:  VALUE ,  SCORE  (or  POINTS ),  TIME  (or  FRAMES ),  SECS ,  MILLISECS , or  OTHER .    VALUE : generic value, no leading zeroes.   SCORE / POINTS : \"000130 points\"   TIME / FRAMES : value describes the number of frames elapsed, and will be turned into 00:00.00   SECS : value describes the number of seconds elapsed, and will be turned into 00:00   MILLISECS : value describes the number of millisecs elapsed, and will be turned into 00:00.00", 
            "title": "Format"
        }, 
        {
            "location": "/Rich-Presence/#display", 
            "text": "Display will be a string that gets shown in the 'Active Players' box on the front page. It refers to the previously defined Lookup and Format objects using a single '@'. It then specifies a name for the lookup or format (case sensitive!), and immediately after, in brackets, a series of memory values specifying what to send to that lookup or format object.  @Powerup(0xh756)    This means use the Lookup or Format that's called  Powerup , and give it whatever value is in 0xh756.", 
            "title": "Display"
        }, 
        {
            "location": "/Rich-Presence/#example-lookup-breakdown", 
            "text": "@Mode(0xh770)  - Lookup for the address that shows if the game is in demo mode or a world has been completed.    @Paused(0xh776)  - Lookup for the address that shows if the game is paused (3 values are used, two of them are for pausing and unpausing).    @Star(0xM79f_0xN79f_0xo79f_0xP79f_0xQ79f_0xR79f)  - Lookup for the address of if Mario has Star invincibility. More on this later.    @Powerup(0xh756)  - Lookup for the address that show if Mairo is Small, big or has fire power.    Mario in  - Static text to string lookup and format objects together.    @Digit(0xh75f_v1)  -  Digit  is a format object defined as a value. The address 0xh75f is the World minus 1 (because it it 0 based, as in it starts counting at 0).  _v1  Means + value 1.  _v+1  is also correct.    -  - More static text to split World and Level. as in the hypen in World 1-1.    @Digit(0xh75c_v1)  - Another use of the  Digit  format object. This time It's looking up the stage. World 1-X.    @Swimming(0xh704)  - Lookup for the address that shows if the player is swimming.    @Status(0xhe)  - Lookup for the address that shows Mario's status, such as going through pipes.    , \ud83d\udeb6:  - More static text. \ud83d\udeb6 is a symbol for lives.    @Digit(0xh75a_v1)  - Third use of the  Digit  format object. This time it's checking the player lives address.    ,  - Static text.    @Quest(0xh7fc)  A lookup to see if the player is in normal or on the 2nd quest, hardmode.    Quest  - Static Text.", 
            "title": "Example Lookup Breakdown"
        }, 
        {
            "location": "/Rich-Presence/#address-size", 
            "text": "To specify what size of address you are are checking there are various characters used. (capitalization is ignored)   A 16bit address is default and has no character designation. At 0x10 the address is two bytes - 16 bits.  An 8bit address's character is  h  (or  H ). At 0xh10 the address is one byte - 8 bits.  xxxx xxxx     An upper4 address's character is  u  (or  U ). At 0xu10 the address is one nibble - 4 bits.  xxxx 0000     A lower4 address's character is  l  (or  L ). At 0xl10 the address is one nibble - 4 bits.  0000 xxxx     A bit0 address's character is  m  (or  M ). At 0xm10 the address is one bit, the lowest bit:  0000 000x     A bit1 address's character is  n  (or  N ). At 0xn10 the address is one bit, the second bit:  0000 00x0     A bit2 address's character is  o  (or  O ). At 0xn10 the address is one bit, the third bit:  0000 0x00     A bit3 address's character is  p  (or  P ). At 0xp10 the address is one bit, the fourth bit:  0000 x000     A bit4 address's character is  q  (or  Q ). At 0xq10 the address is one bit, the fifth bit:  000x 0000     A bit5 address's character is  r  (or  R ). At 0xr10 the address is one bit, the sixth bit:  00x0 0000     A bit6 address's character is  s  (or  S ). At 0xs10 the address is one bit, the seventh bit:  0x00 0000     A bit7 address's character is  t  (or  T ). At 0xt10 the address is one bit, the top bit:  x000 0000     A 32bit address's character is  x  (or  X ). At 0xx10 the address is four bytes and 32 bits.   Summarizing on a table:     location/size  prefix (the letters can be in lower case)  example      bit0  0xM  0xM01234    bit1  0xN  0xN01234    bit2  0xO  0xO01234    bit3  0xP  0xP01234    bit4  0xQ  0xQ01234    bit5  0xR  0xR01234    bit6  0xS  0xS01234    bit7  0xT  0xT01234    Lower4  0xL  0xL01234    Upper4  0xU  0xU01234    8bit  0xH  0xH01234    16bit  0x  0x01234    32bit  0xX  0xX01234", 
            "title": "Address size"
        }, 
        {
            "location": "/Rich-Presence/#binary-coded-decimal-bcd", 
            "text": "BCD is when the values are store in an address from as 0-9 (one digit) or 0-99 (two digits). Keep in most often values are stored in hexidecimal, but sometime games will store them in this way and here's the best way to handle these addresses in your display.  For value objects you can use the BCD prefix, as in  b0x1 .\nA BCD address is assumed to be 8bit, h is unnecessary but also won't cause problems. Other character prefixes work? (untested).\nWhen you use the b prefix and the address is stored as a BCD your out put for an address that is 10 will be 10 instead of 16 (which is 10 in hex).  This is most commonly used for score and time, but often other types of display values.", 
            "title": "Binary Coded Decimal (BCD)"
        }, 
        {
            "location": "/Rich-Presence/#limits", 
            "text": "2500 character limit for script    100 character limit for what is displayed    Unicode characters are allowed    Using   in text will cut off the script after the      Using the character  +  Will not display", 
            "title": "Limits"
        }, 
        {
            "location": "/Rich-Presence/#syntax-details", 
            "text": "The RPS ignores trailing 0s in hex address lookups and values  0x00001  ==  0x1 ,  0xh0000245  ==  0xh245 ,  0x0a  ==  0xa .  Lookup values are Decimal by default and hex if you place the prefix of  0x . This mean  1  ==  0x1 ,  2  ==  0x2 ,  9  ==  0x9 ,  10  ==  0xa ,  100  ==  0x64 , etc.", 
            "title": "Syntax Details"
        }, 
        {
            "location": "/Rich-Presence/#tips-and-tricks", 
            "text": "Lookups must be case specific with their corresponding @ in the display and not contain spaces after the lookup is defined.  Lookup names can be as short as a single character if you need to squeeze in a few extra characters.  Turning all your values from hex into decimal will take up less characters.  Unicode characters don't always \"take up less space\" they often take up to four system characters.  If you do not define your lookups they will be left blank (no space). This is only true for NES, SNES, Gen, RAVBA. N64, Meka and Lynx will leave the word \"Unknown\" each time you don't define a lookup.  You only need one value format object. You can reference it with multiple addresses. (is this always true?)  Putting spaces in your lookups sometimes before or after can allow you to hide certain lookups when they are not needed, like how  @Pause ,  @Star ,  @Swimming , and @Mode do.", 
            "title": "Tips and Tricks"
        }, 
        {
            "location": "/Rich-Presence/#value-properties", 
            "text": "When using lookup and format objects  @object()  it's possible to combine and perform calculations. This can be used to correctly display a score, in game time, etc. or make more advanced lookups.  Example  @Score(0x28*10_0x29*1000_0x26*100000) points    This means use the Lookup or Format  Score , and give it the sum of: \n- 0x28 times 10, ADD \n- 0x29 times 1000, ADD \n- 0x26 times 100000     _  adds the addresses together.    Or you can add a static value  0x28_v10 . This adds 10 to your total, as in whatever the value of  0x28  + 10 will be displayed. You can also subtract  0x28_v-10.     If you'd like to subtract an address you need to multiply the address by -1.  0x29*-1 .  0x29  is now negative.    If you'd like to perform division you'll need to multiply by a decimal.   0x26*.5 .  0x26  will output 1/2 of the value at  0x26 .    And you can string everything together:  0x28*10_0x29*-1_0x26*.625_v-10 .  You can also add addresses together to give you lookups based on the sums of various addresses. This is used in the example in @Star. It's looking up sum the 6 lowest bits of the address 0xh79f. The way this address works is that so long as there is a value there Mario is invincible star mario and it counts down from hex value 0x23 (35 decimal) to 0. 23 in binary is 0010 0011 meaning the max sum of these bits could 5 during 0001 1111 when the count down reaches hex value 0x1f (31 decimal).", 
            "title": "Value Properties"
        }, 
        {
            "location": "/Rich-Presence/#unicode-standard-symbols", 
            "text": "\u258c\u258c=Paused \n\ud83d\udd01=Loop number \n\ud83d\udeb6=Lives. Other symbols that represent the game clearly are also suitable. \ud83d\udc30=in a Bugs bunny Game, \ud83d\udc35=in a Donkey Kong Country game, \u2708=In a jet plane game, \n\ud83d\udc9e=Continues \n\ud83d\udcaf=Points \n\u23f0=In Game Time/Game Clock \n\ud83d\udd11=Keys \n\ud83d\udca3=Bombs\n\u2630=Menu \n \u2764\ufe0f or \u2764=In a game with hearts (e.g. Zelda)  \n\ud83d\udcb0=Money \n\u2696=Difficulty", 
            "title": "Unicode Standard Symbols"
        }, 
        {
            "location": "/Set-Development-Roadmap/", 
            "text": "The following is a detailed road-map of most things you would want to consider while making an achievement set. It's not required to follow this exactly but is meant as a guide.\n\n\nInitial Research\n\n\n\n\nGame manual\n: Review\n\n\nGame Faqs\n: Read/check\n\n\nGame Cheats\n: Find, note\n\n\nLongplay\n: Review/watch\n\n\nSimilar sets\n: Compare, note favorite ideas\n\n\nPartimes\n: check if they exist\n\n\nSpeedruns\n: check if they exist\n\n\n\n\nConceptual Design\n\n\n\n\nAchievements 1\n: Brainstorm, include ideas from similar sets, manual, etc.\n\n\nNote secrets, progress, key events, collectibles, scores \n    benchmarks, Easter eggs, bosses, key items, par times, internal rewards.\n\n\nResearch 2\n: Check/test that designs are possible.\n\n\nMemory 1\n: Estimate needed addresses for achievements.\n\n\n\n\nMemory hunt\n\n\n\n\nMemory 2\n: Search for needed memory addresses.\n\n\n\n\nAchievement Design\n\n\n\n\nBalance 1\n: Balance set for difficulty distribution, remove or redesign \n  those that don't fit.\n\n\nAchievements 2\n: Build the list, push complete to unofficial (not required).\n\n\nMemory 3\n: Search for solutions missing, depending on the game's memory.\n\n\nAchievements 3\n: Add new ideas as they come.\n\n\nAchievements 4\n: Rework or remove ideas that are impossible.\n\n\n\n\nPre-release Final steps\n\n\n\n\nTitles \n Descriptions\n: Finalize\n\n\nBugs 1\n: Test achievements for bugs, possibly make/use movies.\n\n\nGame page\n: Update. Game icon, images, info, resources, similar games.\n\n\nLeaderboards\n (optional): Code\n\n\nRich presence\n (optional): Code\n\n\nBadges\n: Create\n\n\n\n\nRelease\n\n\n\n\nAchievements 7\n: Push to core\n\n\nPoints\n: Balance to your cap\n\n\nOrdering\n: Do it\n\n\nForum post\n: Make announcement\n\n\n\n\nPost Release\n\n\n\n\nBugs 2\n: Fix those that come.\n\n\nBalance 2\n: Re-balance set difficulty based on feedback.", 
            "title": "Set Development Roadmap"
        }, 
        {
            "location": "/Set-Development-Roadmap/#initial-research", 
            "text": "Game manual : Review  Game Faqs : Read/check  Game Cheats : Find, note  Longplay : Review/watch  Similar sets : Compare, note favorite ideas  Partimes : check if they exist  Speedruns : check if they exist", 
            "title": "Initial Research"
        }, 
        {
            "location": "/Set-Development-Roadmap/#conceptual-design", 
            "text": "Achievements 1 : Brainstorm, include ideas from similar sets, manual, etc.  Note secrets, progress, key events, collectibles, scores \n    benchmarks, Easter eggs, bosses, key items, par times, internal rewards.  Research 2 : Check/test that designs are possible.  Memory 1 : Estimate needed addresses for achievements.", 
            "title": "Conceptual Design"
        }, 
        {
            "location": "/Set-Development-Roadmap/#memory-hunt", 
            "text": "Memory 2 : Search for needed memory addresses.", 
            "title": "Memory hunt"
        }, 
        {
            "location": "/Set-Development-Roadmap/#achievement-design", 
            "text": "Balance 1 : Balance set for difficulty distribution, remove or redesign \n  those that don't fit.  Achievements 2 : Build the list, push complete to unofficial (not required).  Memory 3 : Search for solutions missing, depending on the game's memory.  Achievements 3 : Add new ideas as they come.  Achievements 4 : Rework or remove ideas that are impossible.", 
            "title": "Achievement Design"
        }, 
        {
            "location": "/Set-Development-Roadmap/#pre-release-final-steps", 
            "text": "Titles   Descriptions : Finalize  Bugs 1 : Test achievements for bugs, possibly make/use movies.  Game page : Update. Game icon, images, info, resources, similar games.  Leaderboards  (optional): Code  Rich presence  (optional): Code  Badges : Create", 
            "title": "Pre-release Final steps"
        }, 
        {
            "location": "/Set-Development-Roadmap/#release", 
            "text": "Achievements 7 : Push to core  Points : Balance to your cap  Ordering : Do it  Forum post : Make announcement", 
            "title": "Release"
        }, 
        {
            "location": "/Set-Development-Roadmap/#post-release", 
            "text": "Bugs 2 : Fix those that come.  Balance 2 : Re-balance set difficulty based on feedback.", 
            "title": "Post Release"
        }, 
        {
            "location": "/Achievement-Design/", 
            "text": "This is a guide on how to think about and design good achievements. Not the technical side but the conceptual.\n\n\nThis content is a summary of what was \noriginally written by RA user cirellio on a forum topic\n.\n\n\nProgression Based Achievements\n\n\nThere are 3 types of progression based achievements: simple progression, story-based progression, and progression/collection achievements.\n\n\nSimple Progression\n\n\nProgression-based achievements are usually simplest ones, especially if the game you are doing is nothing but linear stages. Or doesn't have much going on in the way of storylines. In this case, let's look at some GOOD and BAD examples of this:\n\n\n\n\nGood: Clear stage 1. \n\n\nBad: Reach stage 2. \n\n\n\n\nIt takes slightly more work to code an achievement where the player is required to clear the stage rather than simply reach the next one. But it is also much more satisfying for the player, and it is much more professional-looking. It is also \nless susceptible to problems with players loading save games or savestates for freebie achievements en masse\n. \n\n\n\n\nGood: Complete the game. \n\n\nBad: Start the game. \n\n\n\n\nWhile it is true progression-based achievements are often freebies, it is generally agreed upon here that an achievement to start the game is a bit too easy, and not at all memorable for the player. It's just a formality. The ending of the game, however, is often the most memorable part of a game for a player, and completing a game is definitely an achievement in itself. It's a good practice to make such achievement work like \"Beat last stage and beat the game\".\n\n\n\n\nGood: Cleared the ice theme stages, or Cleared the first five stages, or Cleared the first ten stages. \n\n\nBad: Complete Stage 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11-200 (all separate achievements) \n\n\n\n\nOne of the worst things you can do is create achievement spam. Puzzle games are notorious for these kinds of problems, because the stages are short and often, there are one-hundred of them or more. As a result, the main page feed ends up with a lot of micro-updates, which spams other folks' achievements down and off the front page quickly. The way to come off as more professional in this matter is to space out the achievements a bit more, into groups of stages. For instance, if stages 1-10 are all fire themed, and stages 11-20 are all outer-space themed, you can create achievements around these themes. Be creative. \n\n\nStory Based Progression:\n\n\nThe most memorable moments in gaming history are often not related to item collection or sidequests, but to specific scenes relating to the story. \n\n\nExamples:\n\n- First encounter with Pyramid Head in the Silent Hill series. \n- Finding out the truth about Darth Revan in Knights of the Old Republic. \n- Finding out what will happen in the future in Chrono Trigger. \n- Launching the Cow in Earthworm Jim. \n- Pretty much any character death. \n\n\nThe thing you have to be extra-careful with here is spoilers. If you catch a progression-based achievement that has a spoiler in it, by all means contact the dev about it. And devs, please be receptive when it comes to constructive criticism! Also, the number and even percentage of these will vary from game to game--The dependance lies heavily upon how story-driven the game is. \n\n\nProgression/Collection\n\n\nProgression/Collection is a common hybrid. Not only are you collecting an item, but it also launches into a memorable (and mandatory) scene. \n\n\nExamples:\n\n- Obtaining the Master Sword in Link to the Past, which lifts the curse in the Lost Woods. \n- Finding the sword on the beach in Link's Awakening, which launches into the first scene where the wise owl speaks to you. \n- Picking your starter Pokemon, which happens during a beginning scene, but is a 'rite of passage' for most gamers. \n\n\nAchievements in this hybrid category are often more satisfying because they are pulling double-duty. The player is not only obtaining an item, but watching a memorable scene and nabbing an achievement all at once. Quite the rush of endorphins! \n\n\nProgression Pros and Cons\n\n\nProgression Achievements are guaranteed to the player on a normal play-through. So why even have them? \n\n\nPros\n\n\n\n\n\n\nA player deserves points for playing through a game! They do! Remember, a lot of folks are playing through these games for the very first time, and most games are quite hard to beat. Why shouldn't we reward players for a good ol' normal play-through? \n\n\n\n\n\n\nPeriodic progression awards go a long way to encourage players to complete a game. \n\n\n\n\n\n\nSome players are more casual and don't intend to do much more than beat games on this website. Not everyone feels the need to Master every game in Hardcore mode. Many are perfectly happy grabbing whatever convenient side-achievements they can during a normal play-through, and there's nothing wrong with that. \n\n\n\n\n\n\nSome scenes are so memorable, they deserve achievements all their own! People who grew up with these games and love them look for these scenes in achievement lists, and it might just warm their heart when they see it was acknowledged. \n\n\n\n\n\n\nProgression Achievements help other people on the website gauge how far along a player is in a game, a bit like Rich Presence. We can drop a line to the player and say, \"Good luck!\" because we know the next section is pretty tricky. It encourages the community to interact. \n\n\n\n\n\n\nOrder matters! Progression Achievements can tell us a lot about a play-through just by the order they occurred. If you pop that optional boss achievement and saved up a million dollars AFTER you've already done all the sidequests, that's much less impressive than if you manage to pull it off well before the mid-point of the game. In other words, Progression Achievements allow us to show-off a bit! We can show the world that we can beat that final boss before we've reached level 10, or that we can beat Expert mode on our first go before Easy and Normal. \nIt can even reveal if we've used glitches or cheats to skip certain portions of the game\n. So, as you can see, Progression Achievements have great SYNERGY with other kinds of achievements.\n\n\n\n\n\n\nThese kinds of achievements are the easiest to code and are generally error-free. \n\n\n\n\n\n\nCons\n\n\n\n\n\n\nToo many Progression Achievements can over-saturate a game with 'freebies', and that's a Very Bad Thing. \n\n\n\n\n\n\nIf your entire game has nothing but these kinds of achievements, it's just another boring run through the game for players. Reach stage 2, Reach stage 3, Reach stage 4, Complete the Game. This is a great 'base' for you to start adding achievements from the other categories, but \ndon't leave your list at just Progression Achievements\n if you can help it. Otherwise you're just rewarding players full points for going through the motions like they've done a million times before. \n\n\n\n\n\n\nSidequest/Optional Achievements\n\n\nVintage games, on their own, offer little-to-no incentive to beat a bonus mode, other than that it's something to do on a rainy day after you've beaten the game. Old games didn't have internet connectivity. And they had no social aspects other than 2-player mode, and maybe telling your friends at school that you beat something. But now, with RetroAchievements.org, we can display our vintage trophies (even though it requires us to redo what we've probably already done many years ago). These trophies are badges of honor. You can look at another member's Challenge Achievements and begin to understand how far they went, how skilled they are. Along with that comes respect from the other members. We socialize, we congratulate each other on a job well done. We feel like we belong, and we are in good company.\n\n\nSidequests\n\n\nThere are often things the player can do that are confined to the rules of the game, but aren't necessary to complete it. In other words, a challenge built into the game by the original game developers. Usually they are fun, or sometimes not so fun, but deserve an award because they require hard work and persistence to achieve. You have to walk a fine tightrope between if dedicated players are likely to do something, vs. if the goal is stupid. People will have differing views over this, so steel yourself.\n\n\nOften times, these types of achievements are even Easter Eggs or things the player never knew existed in their entire lives! Many players adore these types of achievements. I think it's because they learn something new about a game they grew up with, or feel like maybe they were the only ones who knew about a given secret and were excited to see it supported here. \nIt's important for us developers to REALLY know a game inside-and-out before creating an achievement set.\n\n\nExamples of Sidequests:\n\n- Delivering tails to the Tail Collector in Final Fantasy IV. \n- Finding the owner of the Insignificant Item in Earthbound. \n- Giving the Jerky to the King in Guardia Castle. \n- Anju sidequest in Majora's Mask. \n- Learning about Wrex's past in Mass Effect. \n- Diplomat/VIP escort missions in Flashback: The Quest for Identity. \n- Discovering a secret room. \n\n\nSidequests are most often found in RPGs, but especially these days, sidequests are finding their way into just about every genre. Keep your eyes peeled - Even the unsuspecting platformer may have a sidequest or three. The Kirby series, for instance, has many hidden rooms and areas. Often times, sidequests end up awarding an item, which falls under a hybrid: Sidequest/Collection.\n\n\nOptional Achievements\n\n\nExamples of Optional Achievements:\n\n- Optional bosses. \n- Clearing a challenge dungeon (which is a hybrid of Sidequest). \n- Completing Expert Mode (which is a hybrid of Progression). \n- Completing a secret challenge level. \n- Getting an exceptionally rare drop off of a monster. \n- Clearing the game with an optional character. \n- Getting a high score. \n- Completing features only unlocked on a second playthrough. \n- Game modes that are only unlocked on multiple playthroughs. \n- Optional game endings. \n- Codes you can enter during the title screen to make the game harder. \n\n\nThis is the game makers hoping you'll like their game enough to keep coming back for more, even after those ending credits scroll by. They are trying to reward the player for completing their game, and create some form of satisfying re-playability. If the game makers went to the trouble making things like this an integral part of the game, we as achievement developers should recognize these challenges and create appropriate achievements for at least a few of them.\n\n\nChrono Trigger, Chrono Cross, and Star Ocean: The Second Story are famous for this. The Game Boy Advance Castlevania entries also do this. In fact, many games do this. If you aren't sure if your game has any extra modes or challenges, be sure to do some research and check out some FAQs. Or ask the community here, many of us are experts on the games supported here. \n\n\nSidequest/Optional Pros and Cons\n\n\nSidequest/Optional Achievements make fantastic supplements to Progression Achievements. \n\n\nPros\n\n\n\n\n\n\nThis is the bread-and-butter of achievement making. Chances are, a good deal of your achievements will come from this category. All games have optional things to do. Collect all the coins in a stage! Gain 9 lives! Creating achievements for this stuff is easy, and it rewards the player for their dedication. \n\n\n\n\n\n\nGame makers love appreciative players. They like it when players bother to dig deeper into their games, appreciating their hard work, otherwise we wouldn't see hidden 'fun' things in games like Easter Eggs, bonus scenes, etc. If game makers reward the players for doing it, why shouldn't we? Us devs should also recognize that the player has gone the extra mile.\n\n\n\n\n\n\nGame players love telling their friends when they find something unusual and off the beaten path in a game. With this site, they can show their friends that they did indeed slay the elusive 'yellow frog' rarely seen in the marsh, or found the warp to the 'mystery dimension'. If we include these curiosities in our achievement lists, we show the players that we are 'in the know', which builds confidence that we can competently guide them through the game. \n\n\n\n\n\n\nSidequest/Optional Achievements give players something to strive for after they've beaten the game.\n\n\n\n\n\n\nThese kinds of achievements can often be earned at any time and are not on a predictable schedule. Players feel an extra rush of endorphins when an achievement pops that they weren't expecting, but it was earned. \n\n\n\n\n\n\nThese kinds of achievements are usually easy to code, second only to progression-style achievements. \n\n\n\n\n\n\nCons\n\n\n\n\n\n\nSome players don't care to explore beyond what a typical play-through has to offer, so a high percentage of these types of achievements in a game can leave a player under-rewarded. (Granted, this type of gamer is a bit of a rare bird on a website centered around achievements.) \n\n\n\n\n\n\nSome people may feel a specific challenge is too hard, even if it's something the original game developers included in-game for players to achieve. \n\n\n\n\n\n\nWhen you create a Sidequest/Optional Achievement for, say, running away from 999 battles (or other stat-maxing achievements), you risk that the people on this website may not feel this particular achievement offers a challenge and is just a 'grind-fest'. Achievements like this may very well end up getting demoted unless they serve a second purpose, like in Final Fantasy V where running away from battles actually powers up a weapon called the 'Chicken Knife'. This has SYNERGY with the game, as opposed to creating an achievement based upon raising a stat that has no other use.\n\n\n\n\n\n\nCollection Based Achievements\n\n\nMost collection-based achievements are optional, unless the items themselves are MacGuffins, which in that case they would fall squarely under Progression/Collection.\n\n\nExamples:\n\n- Finding the Mickey hats hidden in the background to obtain 1-ups in Genesis Aladdin. \n- Finding exceptionally well-hidden items. \n- Bestiaries. \n- Unlocking an optional character. \n- Maxing out Money/kills/stats. \n- Finding all the different ways to die in games like Prince of Persia or Shadowgate. \n- Opening every treasure chest in a game/finding every powerup. \n- All items/Collecting 99 or 255 (etc.) of an item. \n- Catching them all in Pokemon (any monster collection, really.) \n\n\nIf the game keeps track of a stat, the game developer is practically daring you to max it out. Now you might be that kind of player, and you might not. You have to ask yourself, as a dev, whether or not other players are likely to get 9999 vampire bat kills, even if you wouldn't. The advantages to this are that people who wouldn't normally do this always have something to come back and work for when they feel like playing the game again. The disadvantage is that other players who wouldn't normally go that far and never would, but also feel like they have to MASTER every game quickly (a rare breed), will complain. If you get enough complaints, you might want to bring down that 9999 to something more reasonable, like 500. If no one's having fun with an achievement, it's not in the spirit of playing games or making achievements. \n\n\nYou have to use your better judgment here and think of what the player would enjoy the most. As a rule of thumb, it's better to have a few Sidequest/Optional Achievements than none at all. But with a little extra effort, these achievements can make your list very memorable. \n\n\nNext, it's time to roll up our sleeves as devs and get REALLY creative when the devs themselves challenge the player beyond the rules of the game.\n\n\nFor-Fun achievements\n\n\nThis kind of achievements usually worths just a few points, but they are still fun\n\n\nExamples of For Fun:\n\n- Letting the clock hit 99:59 in Valkyrie Profile. \n- Interactive backgrounds, such as poking the hanging dead body in stage 1 of Castlevania: Bloodlines. \n- Cooking the hamster in the microwave in Maniac Mansion. \n- Watching the apocalypse in Majora's Mask. \n- Finding John Romero in Doom 2. \n\n\nSometimes, game makers add fun easter eggs. They went the extra mile to entertain the player with 'what if's'. Again, it is our job as devs to recognize and support these as much as we can.\n\n\nChallenges\n\n\nOne thing that you have to remember about retro gamers - and the games they play - is that most of us have played these games a million times before. This is the same old song and dance for most of us, and we often need motivation to do it again. Some of us can clear Contra without losing a single life. Well, now is our chance to prove it! \n\n\nI mean, think about it: Before this website, about the only way to prove you can do a flawless run of Contra was to invite a friend over, sit him down, and show him, or figure out recording software and make a YouTube video. But even then, a lot of those videos are doctored to look like flawless playthroughs. This site, however, has Hardcore mode, which help to indicate no one is cheating. \n\n\nYou may have Progression Achievements and Sidequest/Optional Achievements, but if you want to create an achievement list that's truly great, you need at least a few Challenge Achievements. Try to think back to all the games you've played here at this website. What are some of the most memorable achievements? I can almost guarantee you that they were Challenge Achievements. There are exceptions to the rule, of course, but the typical player isn't going to fondly recall, 'Cleared Stage 2-6', or 'Reached Level 30'. They are more likely to fondly remember achievements that made their play-throughs a unique experience, such as...\n\n\n\n\nget through the entire game without ever picking up a powerup or coin\n\n\ndefeat a boss without getting hit\n\n\nfinish a stage without losing a life\n\n\n\n\nThat is what makes this website so special, and what makes achievements something more than just beating a game. \n\n\nEven the most vocal critics who hate the idea of Achievements may say, \"Well, except for THIS one. This one was okay.\" And I guarantee you that ONE example they're talking about is a Challenge Achievement, something that challenged the player beyond the game itself. \n\n\nA good achievement developer will keep their eyes peeled, their wits about them, and their senses sharp when developing a game, looking for good, unusual challenges. They may notice something in the game that's a difficult feat.\n\n\nSpeedrun Challenges\n\n\nTimers introduce an added pressure players may have never felt before while playing their favorite games. Few things get the heart pumping more than an imposing ticking clock. Add a timer element, and a game that was previously so easy they could beat it blindfolded could suddenly be transformed into the ultimate gaming challenge of their lives. \n\n\nExamples of Speedrun Challenges:\n\n- Completing a game in under one hour. \n- Clearing a specific stage in under three minutes. \n- Undercut the timer by a certain number of seconds. \n- Kill 30 vampire bats during the escape sequence. \n- Collect 99 bonus coins before the bonus screen fades away. \n- Go from point A to point B before day changes to night. \n- Leaderboard - Complete the game with the fastest time possible. \n- Leaderboard - Complete a given stage with the fastest time possible. \n\n\nA dev may want to head out to YouTube or Twitch and see how fast people are finishing a game (And please ignore TAS - \"Tool Assisted Speedruns\"). Some pro speed-runners are so fast, the typical player here won't stand a chance at the times being posted, but you should be able to find a happy medium. And if you can't figure out a good time to challenge the players here, that's what Leaderboards are for - Turn it into a competition! In fact, some of your favorite celebrity speed-runners may come to this very site and submit a time or two. \n\n\nYou'll know when you're facing a pressure achievement when your palms are sweating and you find yourself nervously glancing at the timer. Like I said before, nothing screams, \"Wake up!\" louder than a timer, especially when developers start weaving this kind of achievement with OTHER kinds of achievements (and even leaderboards) during a timed portion of a game. Timer Challenges have an insane amount of synergy with other types of achievements. \n\n\nLimitation Challenges\n\n\nExamples of Limitation Challenges:\n\n- Clear a battle or even an entire game with all characters of a specific job class. (One famous example of this is clearing the original Final Fantasy with a group of White Mages.) \n- Beat a final boss with no equipment on. \n- Clear a stage without ever jumping. \n- Solve a puzzle in only two moves. \n- One-hit KOs. \n- Low level games (LLGs). \n- No hit achievements. \n- Never hit certain button(s) during a challenge. \n- Never lose invincibility through an entire Mario 3 stage by finding enough Starmen. \n- Defeat a certain enemy without using a certain move. \n- Reaching Ganon in Legend of Zelda, sword-less. \n- Defeat a certain enemy ONLY using a certain move. \n- Stumble your way through a maze while drunk/confused. \n- Clear the game with a status ailment. \n\n\nCommunity websites built around certain games are a fantastic resource for these kinds of achievements They'll have a good idea about what's possible and impossible, and have likely written up FAQs discussing alternative and challenging ways to play the entire game. \n\n\nOften times, though, there will be no community. No FAQs. No Message Board. And maybe even no useful videos. In these cases, you'll need to be an idea person to come up with new and interesting ways to challenge the player. Be aware that these kinds of achievements take a lot of practice, time, and experience to create. \n\n\nThe takeaway here is to BE CREATIVE! And remember to keep it FUN! \n\n\nScore Challenges\n\n\nExamples of Score Challenges:\n\n- Completing a game or level with the lowest possible score. \n- Complete a minigame with a perfect score (not just topping the CPU leaderboard). \n- Leaderboard - Complete the game with the highest score/most money/best kill count/etc. possible. \n- Leaderboard - Complete a given stage with the highest score/most money/best kill count/etc. possible. \n\n\nChallenge Pros and Cons\n\n\nChallenge Achievements are your chance to show players how to play their favorite games in different, unique, and even mind-bending ways. While these achievements can breathe life into an otherwise dull achievement set, you generally only want a small handful of these to be in your final list. \n\n\nPros\n\n\n\n\n\n\nHardcore players love sinking their teeth into these kinds of achievements. \n\n\n\n\n\n\nIf some players are too hardcore, you can find a happy medium by implementing Leaderboards, which satisfies both the casual achievement hunters and the hardcore players all at once. \n\n\n\n\n\n\nThis is your chance to be very creative and come up with new challenges for players they never expected. This can be a pleasant surprise and really make your lists memorable. \n\n\n\n\n\n\nCons\n\n\n\n\n\n\nThese types of achievements require a fair amount of creativity to dream up, though there are many ways to research unusual ways to play games by watching things like speed runs. \n\n\n\n\n\n\nMay require a deep research. \n\n\n\n\n\n\nThese can be notoriously difficult to code. They require you to make a lot of code notes, make tons of game mechanic observations, and often times they require bug testing before they even work. In fact, you may not even be ready to tackle achievements like this until you've had a few games under your belt with a set of baseline achievements. Fortunately, Challenge Achievements can always be added later. \n\n\n\n\n\n\nExternal Resources\n\n\n\n\nBest practices achievement creation guide\n written by Jeff Sullivan, Developer Account Manager of XNA Developer Connection (XDC) regarding XBox 360 Achievements.\n\n\nMake them Work for it\n an achievement design guide written by by Darran Jamieson on 1 Jan 2013.\n\n\nThe Achievement Machine: Understanding Xbox 360 Achievements in Gaming Practices\n - by Mikael Jakobsson", 
            "title": "Achievement Design"
        }, 
        {
            "location": "/Achievement-Design/#progression-based-achievements", 
            "text": "There are 3 types of progression based achievements: simple progression, story-based progression, and progression/collection achievements.", 
            "title": "Progression Based Achievements"
        }, 
        {
            "location": "/Achievement-Design/#simple-progression", 
            "text": "Progression-based achievements are usually simplest ones, especially if the game you are doing is nothing but linear stages. Or doesn't have much going on in the way of storylines. In this case, let's look at some GOOD and BAD examples of this:   Good: Clear stage 1.   Bad: Reach stage 2.    It takes slightly more work to code an achievement where the player is required to clear the stage rather than simply reach the next one. But it is also much more satisfying for the player, and it is much more professional-looking. It is also  less susceptible to problems with players loading save games or savestates for freebie achievements en masse .    Good: Complete the game.   Bad: Start the game.    While it is true progression-based achievements are often freebies, it is generally agreed upon here that an achievement to start the game is a bit too easy, and not at all memorable for the player. It's just a formality. The ending of the game, however, is often the most memorable part of a game for a player, and completing a game is definitely an achievement in itself. It's a good practice to make such achievement work like \"Beat last stage and beat the game\".   Good: Cleared the ice theme stages, or Cleared the first five stages, or Cleared the first ten stages.   Bad: Complete Stage 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11-200 (all separate achievements)    One of the worst things you can do is create achievement spam. Puzzle games are notorious for these kinds of problems, because the stages are short and often, there are one-hundred of them or more. As a result, the main page feed ends up with a lot of micro-updates, which spams other folks' achievements down and off the front page quickly. The way to come off as more professional in this matter is to space out the achievements a bit more, into groups of stages. For instance, if stages 1-10 are all fire themed, and stages 11-20 are all outer-space themed, you can create achievements around these themes. Be creative.", 
            "title": "Simple Progression"
        }, 
        {
            "location": "/Achievement-Design/#story-based-progression", 
            "text": "The most memorable moments in gaming history are often not related to item collection or sidequests, but to specific scenes relating to the story.   Examples: \n- First encounter with Pyramid Head in the Silent Hill series. \n- Finding out the truth about Darth Revan in Knights of the Old Republic. \n- Finding out what will happen in the future in Chrono Trigger. \n- Launching the Cow in Earthworm Jim. \n- Pretty much any character death.   The thing you have to be extra-careful with here is spoilers. If you catch a progression-based achievement that has a spoiler in it, by all means contact the dev about it. And devs, please be receptive when it comes to constructive criticism! Also, the number and even percentage of these will vary from game to game--The dependance lies heavily upon how story-driven the game is.", 
            "title": "Story Based Progression:"
        }, 
        {
            "location": "/Achievement-Design/#progressioncollection", 
            "text": "Progression/Collection is a common hybrid. Not only are you collecting an item, but it also launches into a memorable (and mandatory) scene.   Examples: \n- Obtaining the Master Sword in Link to the Past, which lifts the curse in the Lost Woods. \n- Finding the sword on the beach in Link's Awakening, which launches into the first scene where the wise owl speaks to you. \n- Picking your starter Pokemon, which happens during a beginning scene, but is a 'rite of passage' for most gamers.   Achievements in this hybrid category are often more satisfying because they are pulling double-duty. The player is not only obtaining an item, but watching a memorable scene and nabbing an achievement all at once. Quite the rush of endorphins!", 
            "title": "Progression/Collection"
        }, 
        {
            "location": "/Achievement-Design/#progression-pros-and-cons", 
            "text": "Progression Achievements are guaranteed to the player on a normal play-through. So why even have them?", 
            "title": "Progression Pros and Cons"
        }, 
        {
            "location": "/Achievement-Design/#pros", 
            "text": "A player deserves points for playing through a game! They do! Remember, a lot of folks are playing through these games for the very first time, and most games are quite hard to beat. Why shouldn't we reward players for a good ol' normal play-through?     Periodic progression awards go a long way to encourage players to complete a game.     Some players are more casual and don't intend to do much more than beat games on this website. Not everyone feels the need to Master every game in Hardcore mode. Many are perfectly happy grabbing whatever convenient side-achievements they can during a normal play-through, and there's nothing wrong with that.     Some scenes are so memorable, they deserve achievements all their own! People who grew up with these games and love them look for these scenes in achievement lists, and it might just warm their heart when they see it was acknowledged.     Progression Achievements help other people on the website gauge how far along a player is in a game, a bit like Rich Presence. We can drop a line to the player and say, \"Good luck!\" because we know the next section is pretty tricky. It encourages the community to interact.     Order matters! Progression Achievements can tell us a lot about a play-through just by the order they occurred. If you pop that optional boss achievement and saved up a million dollars AFTER you've already done all the sidequests, that's much less impressive than if you manage to pull it off well before the mid-point of the game. In other words, Progression Achievements allow us to show-off a bit! We can show the world that we can beat that final boss before we've reached level 10, or that we can beat Expert mode on our first go before Easy and Normal.  It can even reveal if we've used glitches or cheats to skip certain portions of the game . So, as you can see, Progression Achievements have great SYNERGY with other kinds of achievements.    These kinds of achievements are the easiest to code and are generally error-free.", 
            "title": "Pros"
        }, 
        {
            "location": "/Achievement-Design/#cons", 
            "text": "Too many Progression Achievements can over-saturate a game with 'freebies', and that's a Very Bad Thing.     If your entire game has nothing but these kinds of achievements, it's just another boring run through the game for players. Reach stage 2, Reach stage 3, Reach stage 4, Complete the Game. This is a great 'base' for you to start adding achievements from the other categories, but  don't leave your list at just Progression Achievements  if you can help it. Otherwise you're just rewarding players full points for going through the motions like they've done a million times before.", 
            "title": "Cons"
        }, 
        {
            "location": "/Achievement-Design/#sidequestoptional-achievements", 
            "text": "Vintage games, on their own, offer little-to-no incentive to beat a bonus mode, other than that it's something to do on a rainy day after you've beaten the game. Old games didn't have internet connectivity. And they had no social aspects other than 2-player mode, and maybe telling your friends at school that you beat something. But now, with RetroAchievements.org, we can display our vintage trophies (even though it requires us to redo what we've probably already done many years ago). These trophies are badges of honor. You can look at another member's Challenge Achievements and begin to understand how far they went, how skilled they are. Along with that comes respect from the other members. We socialize, we congratulate each other on a job well done. We feel like we belong, and we are in good company.", 
            "title": "Sidequest/Optional Achievements"
        }, 
        {
            "location": "/Achievement-Design/#sidequests", 
            "text": "There are often things the player can do that are confined to the rules of the game, but aren't necessary to complete it. In other words, a challenge built into the game by the original game developers. Usually they are fun, or sometimes not so fun, but deserve an award because they require hard work and persistence to achieve. You have to walk a fine tightrope between if dedicated players are likely to do something, vs. if the goal is stupid. People will have differing views over this, so steel yourself.  Often times, these types of achievements are even Easter Eggs or things the player never knew existed in their entire lives! Many players adore these types of achievements. I think it's because they learn something new about a game they grew up with, or feel like maybe they were the only ones who knew about a given secret and were excited to see it supported here.  It's important for us developers to REALLY know a game inside-and-out before creating an achievement set.  Examples of Sidequests: \n- Delivering tails to the Tail Collector in Final Fantasy IV. \n- Finding the owner of the Insignificant Item in Earthbound. \n- Giving the Jerky to the King in Guardia Castle. \n- Anju sidequest in Majora's Mask. \n- Learning about Wrex's past in Mass Effect. \n- Diplomat/VIP escort missions in Flashback: The Quest for Identity. \n- Discovering a secret room.   Sidequests are most often found in RPGs, but especially these days, sidequests are finding their way into just about every genre. Keep your eyes peeled - Even the unsuspecting platformer may have a sidequest or three. The Kirby series, for instance, has many hidden rooms and areas. Often times, sidequests end up awarding an item, which falls under a hybrid: Sidequest/Collection.", 
            "title": "Sidequests"
        }, 
        {
            "location": "/Achievement-Design/#optional-achievements", 
            "text": "Examples of Optional Achievements: \n- Optional bosses. \n- Clearing a challenge dungeon (which is a hybrid of Sidequest). \n- Completing Expert Mode (which is a hybrid of Progression). \n- Completing a secret challenge level. \n- Getting an exceptionally rare drop off of a monster. \n- Clearing the game with an optional character. \n- Getting a high score. \n- Completing features only unlocked on a second playthrough. \n- Game modes that are only unlocked on multiple playthroughs. \n- Optional game endings. \n- Codes you can enter during the title screen to make the game harder.   This is the game makers hoping you'll like their game enough to keep coming back for more, even after those ending credits scroll by. They are trying to reward the player for completing their game, and create some form of satisfying re-playability. If the game makers went to the trouble making things like this an integral part of the game, we as achievement developers should recognize these challenges and create appropriate achievements for at least a few of them.  Chrono Trigger, Chrono Cross, and Star Ocean: The Second Story are famous for this. The Game Boy Advance Castlevania entries also do this. In fact, many games do this. If you aren't sure if your game has any extra modes or challenges, be sure to do some research and check out some FAQs. Or ask the community here, many of us are experts on the games supported here.", 
            "title": "Optional Achievements"
        }, 
        {
            "location": "/Achievement-Design/#sidequestoptional-pros-and-cons", 
            "text": "Sidequest/Optional Achievements make fantastic supplements to Progression Achievements.", 
            "title": "Sidequest/Optional Pros and Cons"
        }, 
        {
            "location": "/Achievement-Design/#pros_1", 
            "text": "This is the bread-and-butter of achievement making. Chances are, a good deal of your achievements will come from this category. All games have optional things to do. Collect all the coins in a stage! Gain 9 lives! Creating achievements for this stuff is easy, and it rewards the player for their dedication.     Game makers love appreciative players. They like it when players bother to dig deeper into their games, appreciating their hard work, otherwise we wouldn't see hidden 'fun' things in games like Easter Eggs, bonus scenes, etc. If game makers reward the players for doing it, why shouldn't we? Us devs should also recognize that the player has gone the extra mile.    Game players love telling their friends when they find something unusual and off the beaten path in a game. With this site, they can show their friends that they did indeed slay the elusive 'yellow frog' rarely seen in the marsh, or found the warp to the 'mystery dimension'. If we include these curiosities in our achievement lists, we show the players that we are 'in the know', which builds confidence that we can competently guide them through the game.     Sidequest/Optional Achievements give players something to strive for after they've beaten the game.    These kinds of achievements can often be earned at any time and are not on a predictable schedule. Players feel an extra rush of endorphins when an achievement pops that they weren't expecting, but it was earned.     These kinds of achievements are usually easy to code, second only to progression-style achievements.", 
            "title": "Pros"
        }, 
        {
            "location": "/Achievement-Design/#cons_1", 
            "text": "Some players don't care to explore beyond what a typical play-through has to offer, so a high percentage of these types of achievements in a game can leave a player under-rewarded. (Granted, this type of gamer is a bit of a rare bird on a website centered around achievements.)     Some people may feel a specific challenge is too hard, even if it's something the original game developers included in-game for players to achieve.     When you create a Sidequest/Optional Achievement for, say, running away from 999 battles (or other stat-maxing achievements), you risk that the people on this website may not feel this particular achievement offers a challenge and is just a 'grind-fest'. Achievements like this may very well end up getting demoted unless they serve a second purpose, like in Final Fantasy V where running away from battles actually powers up a weapon called the 'Chicken Knife'. This has SYNERGY with the game, as opposed to creating an achievement based upon raising a stat that has no other use.", 
            "title": "Cons"
        }, 
        {
            "location": "/Achievement-Design/#collection-based-achievements", 
            "text": "Most collection-based achievements are optional, unless the items themselves are MacGuffins, which in that case they would fall squarely under Progression/Collection.  Examples: \n- Finding the Mickey hats hidden in the background to obtain 1-ups in Genesis Aladdin. \n- Finding exceptionally well-hidden items. \n- Bestiaries. \n- Unlocking an optional character. \n- Maxing out Money/kills/stats. \n- Finding all the different ways to die in games like Prince of Persia or Shadowgate. \n- Opening every treasure chest in a game/finding every powerup. \n- All items/Collecting 99 or 255 (etc.) of an item. \n- Catching them all in Pokemon (any monster collection, really.)   If the game keeps track of a stat, the game developer is practically daring you to max it out. Now you might be that kind of player, and you might not. You have to ask yourself, as a dev, whether or not other players are likely to get 9999 vampire bat kills, even if you wouldn't. The advantages to this are that people who wouldn't normally do this always have something to come back and work for when they feel like playing the game again. The disadvantage is that other players who wouldn't normally go that far and never would, but also feel like they have to MASTER every game quickly (a rare breed), will complain. If you get enough complaints, you might want to bring down that 9999 to something more reasonable, like 500. If no one's having fun with an achievement, it's not in the spirit of playing games or making achievements.   You have to use your better judgment here and think of what the player would enjoy the most. As a rule of thumb, it's better to have a few Sidequest/Optional Achievements than none at all. But with a little extra effort, these achievements can make your list very memorable.   Next, it's time to roll up our sleeves as devs and get REALLY creative when the devs themselves challenge the player beyond the rules of the game.", 
            "title": "Collection Based Achievements"
        }, 
        {
            "location": "/Achievement-Design/#for-fun-achievements", 
            "text": "This kind of achievements usually worths just a few points, but they are still fun  Examples of For Fun: \n- Letting the clock hit 99:59 in Valkyrie Profile. \n- Interactive backgrounds, such as poking the hanging dead body in stage 1 of Castlevania: Bloodlines. \n- Cooking the hamster in the microwave in Maniac Mansion. \n- Watching the apocalypse in Majora's Mask. \n- Finding John Romero in Doom 2.   Sometimes, game makers add fun easter eggs. They went the extra mile to entertain the player with 'what if's'. Again, it is our job as devs to recognize and support these as much as we can.", 
            "title": "For-Fun achievements"
        }, 
        {
            "location": "/Achievement-Design/#challenges", 
            "text": "One thing that you have to remember about retro gamers - and the games they play - is that most of us have played these games a million times before. This is the same old song and dance for most of us, and we often need motivation to do it again. Some of us can clear Contra without losing a single life. Well, now is our chance to prove it!   I mean, think about it: Before this website, about the only way to prove you can do a flawless run of Contra was to invite a friend over, sit him down, and show him, or figure out recording software and make a YouTube video. But even then, a lot of those videos are doctored to look like flawless playthroughs. This site, however, has Hardcore mode, which help to indicate no one is cheating.   You may have Progression Achievements and Sidequest/Optional Achievements, but if you want to create an achievement list that's truly great, you need at least a few Challenge Achievements. Try to think back to all the games you've played here at this website. What are some of the most memorable achievements? I can almost guarantee you that they were Challenge Achievements. There are exceptions to the rule, of course, but the typical player isn't going to fondly recall, 'Cleared Stage 2-6', or 'Reached Level 30'. They are more likely to fondly remember achievements that made their play-throughs a unique experience, such as...   get through the entire game without ever picking up a powerup or coin  defeat a boss without getting hit  finish a stage without losing a life   That is what makes this website so special, and what makes achievements something more than just beating a game.   Even the most vocal critics who hate the idea of Achievements may say, \"Well, except for THIS one. This one was okay.\" And I guarantee you that ONE example they're talking about is a Challenge Achievement, something that challenged the player beyond the game itself.   A good achievement developer will keep their eyes peeled, their wits about them, and their senses sharp when developing a game, looking for good, unusual challenges. They may notice something in the game that's a difficult feat.", 
            "title": "Challenges"
        }, 
        {
            "location": "/Achievement-Design/#speedrun-challenges", 
            "text": "Timers introduce an added pressure players may have never felt before while playing their favorite games. Few things get the heart pumping more than an imposing ticking clock. Add a timer element, and a game that was previously so easy they could beat it blindfolded could suddenly be transformed into the ultimate gaming challenge of their lives.   Examples of Speedrun Challenges: \n- Completing a game in under one hour. \n- Clearing a specific stage in under three minutes. \n- Undercut the timer by a certain number of seconds. \n- Kill 30 vampire bats during the escape sequence. \n- Collect 99 bonus coins before the bonus screen fades away. \n- Go from point A to point B before day changes to night. \n- Leaderboard - Complete the game with the fastest time possible. \n- Leaderboard - Complete a given stage with the fastest time possible.   A dev may want to head out to YouTube or Twitch and see how fast people are finishing a game (And please ignore TAS - \"Tool Assisted Speedruns\"). Some pro speed-runners are so fast, the typical player here won't stand a chance at the times being posted, but you should be able to find a happy medium. And if you can't figure out a good time to challenge the players here, that's what Leaderboards are for - Turn it into a competition! In fact, some of your favorite celebrity speed-runners may come to this very site and submit a time or two.   You'll know when you're facing a pressure achievement when your palms are sweating and you find yourself nervously glancing at the timer. Like I said before, nothing screams, \"Wake up!\" louder than a timer, especially when developers start weaving this kind of achievement with OTHER kinds of achievements (and even leaderboards) during a timed portion of a game. Timer Challenges have an insane amount of synergy with other types of achievements.", 
            "title": "Speedrun Challenges"
        }, 
        {
            "location": "/Achievement-Design/#limitation-challenges", 
            "text": "Examples of Limitation Challenges: \n- Clear a battle or even an entire game with all characters of a specific job class. (One famous example of this is clearing the original Final Fantasy with a group of White Mages.) \n- Beat a final boss with no equipment on. \n- Clear a stage without ever jumping. \n- Solve a puzzle in only two moves. \n- One-hit KOs. \n- Low level games (LLGs). \n- No hit achievements. \n- Never hit certain button(s) during a challenge. \n- Never lose invincibility through an entire Mario 3 stage by finding enough Starmen. \n- Defeat a certain enemy without using a certain move. \n- Reaching Ganon in Legend of Zelda, sword-less. \n- Defeat a certain enemy ONLY using a certain move. \n- Stumble your way through a maze while drunk/confused. \n- Clear the game with a status ailment.   Community websites built around certain games are a fantastic resource for these kinds of achievements They'll have a good idea about what's possible and impossible, and have likely written up FAQs discussing alternative and challenging ways to play the entire game.   Often times, though, there will be no community. No FAQs. No Message Board. And maybe even no useful videos. In these cases, you'll need to be an idea person to come up with new and interesting ways to challenge the player. Be aware that these kinds of achievements take a lot of practice, time, and experience to create.   The takeaway here is to BE CREATIVE! And remember to keep it FUN!", 
            "title": "Limitation Challenges"
        }, 
        {
            "location": "/Achievement-Design/#score-challenges", 
            "text": "Examples of Score Challenges: \n- Completing a game or level with the lowest possible score. \n- Complete a minigame with a perfect score (not just topping the CPU leaderboard). \n- Leaderboard - Complete the game with the highest score/most money/best kill count/etc. possible. \n- Leaderboard - Complete a given stage with the highest score/most money/best kill count/etc. possible.", 
            "title": "Score Challenges"
        }, 
        {
            "location": "/Achievement-Design/#challenge-pros-and-cons", 
            "text": "Challenge Achievements are your chance to show players how to play their favorite games in different, unique, and even mind-bending ways. While these achievements can breathe life into an otherwise dull achievement set, you generally only want a small handful of these to be in your final list.", 
            "title": "Challenge Pros and Cons"
        }, 
        {
            "location": "/Achievement-Design/#pros_2", 
            "text": "Hardcore players love sinking their teeth into these kinds of achievements.     If some players are too hardcore, you can find a happy medium by implementing Leaderboards, which satisfies both the casual achievement hunters and the hardcore players all at once.     This is your chance to be very creative and come up with new challenges for players they never expected. This can be a pleasant surprise and really make your lists memorable.", 
            "title": "Pros"
        }, 
        {
            "location": "/Achievement-Design/#cons_2", 
            "text": "These types of achievements require a fair amount of creativity to dream up, though there are many ways to research unusual ways to play games by watching things like speed runs.     May require a deep research.     These can be notoriously difficult to code. They require you to make a lot of code notes, make tons of game mechanic observations, and often times they require bug testing before they even work. In fact, you may not even be ready to tackle achievements like this until you've had a few games under your belt with a set of baseline achievements. Fortunately, Challenge Achievements can always be added later.", 
            "title": "Cons"
        }, 
        {
            "location": "/Achievement-Design/#external-resources", 
            "text": "Best practices achievement creation guide  written by Jeff Sullivan, Developer Account Manager of XNA Developer Connection (XDC) regarding XBox 360 Achievements.  Make them Work for it  an achievement design guide written by by Darran Jamieson on 1 Jan 2013.  The Achievement Machine: Understanding Xbox 360 Achievements in Gaming Practices  - by Mikael Jakobsson", 
            "title": "External Resources"
        }, 
        {
            "location": "/About/", 
            "text": "This project is an attempt to put together the guides, tutorials, tips and tricks about RetroAchievements development.\n\n\nBefore this project started the knowledge about cheevos development was scattered in several RetroAchievements.org forum posts, making the learning experience harder for a novice developer. In fact most part of what we have here were originally taken from those forum posts, but ordered in a somewhat more coherent sequence.\n\n\nThe \nRetroAchievements Documentation Project\n is divided into two parts:\n\n\n\n\nRetroAchievements wiki\n\n\nRetroAchievements docs\n\n\n\n\nThe wiki is where these documents are created and edited. Anyone (with a github account) is able to edit the wiki's content. Then, if you have something to share, please edit the wiki!\n\n\nThe \nRetroAchievements docs\n website has (almost) the same content as the wiki, but with a more pleasant look. The content of this website is generated by its maintainers using the wiki's content as input.\n\n\nWhen a change is made in the wiki this change is NOT instantaneously reflected in the docs.\n The converstion is performed by a maintainer from time to time.", 
            "title": "About"
        }
    ]
}