{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to the \nRetroAchievements documentation project\n!\n\n\nNewcomers, please start with the \nFAQ\n.\n\n\nYou can help to improve these docs editing/creating the pages at \nRetroAchievements wiki\n.", 
            "title": "Home"
        }, 
        {
            "location": "/FAQ/", 
            "text": "What is RetroAchievements.org?\n\n\nRetroAchievements.org\n is a community who collaborate and compete to earn custom-made achievements in classic games through emulation. Achievements are made by and for the community. We provide various custom-built emulators for you to use which will detect when you have completed various challenges. Once logged in, the emulators will post the achievements you've completed back to the site, so you can check and compare your progress to your friends.\n\n\nHere's an example of RAGens, playing Streets of Rage 2. You will see two leaderboard attempt counters (bottom-right), one achievement popping and finally the overlay (press ESC):\n\n\n\n\nWhich emulator do I need to use?\n\n\nThe official RetroAchievements.org emulators are all Windows-based. For other Operational Systems you can use RetroArch. More information below:\n\n\nOfficial RetroAchievements.org emulators\n\n\nPlease download the emulator of your choice from \nthe download page\n, log in using your username and password, then load a ROM and play! See the following video for a demonstration:\n\n\nhttps://www.youtube.com/watch?v=rKY2mZjurJw\n\n\nHow do I access the Achievement Overlay?\n\n\nNormally, this will be set up on 'ESC' keyboard key, or the pause function in the game. In most emulators, a game must be active for it to be functional.\n\n\nSome of the emulators should already be setup assigning a controller button to view the achievement overlay. Generally ESC on the keyboard should activate it, but if you want to assign it to a controller, see \nthis link\n.\n\n\nRetroArch emulators\n\n\nFor non-Windows Operational Systems you need to use \nRetroArch\n.\n\n\nCurrently you can earn achievements via RetroArch on the following platforms:\n\n\n\n\nWindows\n\n\nLinux\n\n\nMac\n\n\nAndroid (yes! you can earn cheevos on-the-go with your Android phone!)\n\n\nPS Vita (needs to be hacked with \nHENkaku\n)\n\n\nWii U (needs to be hacked)\n\n\nRaspberry Pi (recommended systems: \nRetroPie\n, \nlakka\n and \nRecalBox\n\n\n\n\nYou can \nget RetroArch here\n.\n\n\nOnce you installed and did the initial configuration, follow this guide to setup Achievements: \nhttps://buildbot.libretro.com/docs/guides/retroachievements/\n\n\nKeep in mind that not every RetroArch core is compatible with RetroAchievements. \nCheck this list to see wich one to choose\n.\n\n\nMy welcome email has gone missing!\n\n\nUnfortunately sometimes the welcome email has been known to go missing. If this happens, please log in with your username/password you registered with, then visit your settings page. At the top you'll find the option to resend your registration email.\n\n\nWhere can I find ROMs?\n\n\nNot here. Unfortunately it is illegal to host or distribute copyright ROMs. To extract the ROM file from your cartridges, you can use a tool such as the Retrode or similar, then you can use the ROM file with our emulators. Other websites host ROM files that you could use with our emulators, but we do not condone downloading or playing ROMs for games you do not own.\n\n\nWhy is my game not loading up achievement?\n\n\nEither:\n\n\n\n\nIt doesn't have achievements,\n\n\nYou have the incorrect rom.\n\n\n\n\nFor more details read here: \nhttp://retroachievements.org/viewtopic.php?t=5422\nc=27355\n\n\nIf you are a Linux user, you can use this tool to check if your ROM is OK for RetroAchievements: \nhttps://github.com/meleu/hascheevos\n\n\nWhat is hardcore mode?\n\n\nHardcore mode is an additional feature to separate out the good gamers from the great gamers: Hardcore mode disables \nall\n savestate ability in the emulator: you would not be able to save and reload at any time. You would have to complete the game and get the achievements first time, just like it were on the original console. In reward for this, you will earn both the standard and the hardcore achievement, in effect earning double points! A regular game worth 400 points, is now worth 800 if you complete it fully on hardcore! For example: if you complete the game fully for 400 points, you then have the opportunity to earn another 400 on hardcore.\n\n\nThis achievement didn't trigger!\n\n\nWe have a new feature built-in to the emulators now that will allow you to report broken achievements that occur at the wrong time, or not at all. Veteran developer Jackolantern explains how to use it in this video:\n\n\nhttps://www.youtube.com/watch?v=TTHbm700Y-Y\n\n\nI want to make achievements!\n\n\nGood to hear! There are various resources that are available to help; first I'd recommend having a look in \nthe Developer forum\n for further information, specifically \nthis tutorial\n. Also the following video may be useful:\n\n\nhttps://www.youtube.com/watch?v=8nYb_5cgQHY\n\n\nPlease don't hesitate to ask if you need help, don't struggle! The only recommendation I have is to make sure you're enjoying whatever it is you're doing. If you're not having fun, don't do it :) if you get frustrated, just drop a message on the forums or in the chat and someone will get back to you shortly.\n\n\nWhat are the White points?\n\n\nWhite points are secondary based on how hard an achievement is. Explained \nhere in detail\n.\n\n\nWhat's considered cheating (for hardcore)? What if I find evidence of a cheater?\n\n\nAnything that modifies the normal console gameplay experience \nwith the allowed exception of fast forward\n. We live by an honor code most of all. If you find an evidence of a cheater, send the evidence to an active admin member.", 
            "title": "FAQ"
        }, 
        {
            "location": "/FAQ/#what-is-retroachievementsorg", 
            "text": "RetroAchievements.org  is a community who collaborate and compete to earn custom-made achievements in classic games through emulation. Achievements are made by and for the community. We provide various custom-built emulators for you to use which will detect when you have completed various challenges. Once logged in, the emulators will post the achievements you've completed back to the site, so you can check and compare your progress to your friends.  Here's an example of RAGens, playing Streets of Rage 2. You will see two leaderboard attempt counters (bottom-right), one achievement popping and finally the overlay (press ESC):", 
            "title": "What is RetroAchievements.org?"
        }, 
        {
            "location": "/FAQ/#which-emulator-do-i-need-to-use", 
            "text": "The official RetroAchievements.org emulators are all Windows-based. For other Operational Systems you can use RetroArch. More information below:", 
            "title": "Which emulator do I need to use?"
        }, 
        {
            "location": "/FAQ/#official-retroachievementsorg-emulators", 
            "text": "Please download the emulator of your choice from  the download page , log in using your username and password, then load a ROM and play! See the following video for a demonstration:  https://www.youtube.com/watch?v=rKY2mZjurJw", 
            "title": "Official RetroAchievements.org emulators"
        }, 
        {
            "location": "/FAQ/#how-do-i-access-the-achievement-overlay", 
            "text": "Normally, this will be set up on 'ESC' keyboard key, or the pause function in the game. In most emulators, a game must be active for it to be functional.  Some of the emulators should already be setup assigning a controller button to view the achievement overlay. Generally ESC on the keyboard should activate it, but if you want to assign it to a controller, see  this link .", 
            "title": "How do I access the Achievement Overlay?"
        }, 
        {
            "location": "/FAQ/#retroarch-emulators", 
            "text": "For non-Windows Operational Systems you need to use  RetroArch .  Currently you can earn achievements via RetroArch on the following platforms:   Windows  Linux  Mac  Android (yes! you can earn cheevos on-the-go with your Android phone!)  PS Vita (needs to be hacked with  HENkaku )  Wii U (needs to be hacked)  Raspberry Pi (recommended systems:  RetroPie ,  lakka  and  RecalBox   You can  get RetroArch here .  Once you installed and did the initial configuration, follow this guide to setup Achievements:  https://buildbot.libretro.com/docs/guides/retroachievements/  Keep in mind that not every RetroArch core is compatible with RetroAchievements.  Check this list to see wich one to choose .", 
            "title": "RetroArch emulators"
        }, 
        {
            "location": "/FAQ/#my-welcome-email-has-gone-missing", 
            "text": "Unfortunately sometimes the welcome email has been known to go missing. If this happens, please log in with your username/password you registered with, then visit your settings page. At the top you'll find the option to resend your registration email.", 
            "title": "My welcome email has gone missing!"
        }, 
        {
            "location": "/FAQ/#where-can-i-find-roms", 
            "text": "Not here. Unfortunately it is illegal to host or distribute copyright ROMs. To extract the ROM file from your cartridges, you can use a tool such as the Retrode or similar, then you can use the ROM file with our emulators. Other websites host ROM files that you could use with our emulators, but we do not condone downloading or playing ROMs for games you do not own.", 
            "title": "Where can I find ROMs?"
        }, 
        {
            "location": "/FAQ/#why-is-my-game-not-loading-up-achievement", 
            "text": "Either:   It doesn't have achievements,  You have the incorrect rom.   For more details read here:  http://retroachievements.org/viewtopic.php?t=5422 c=27355  If you are a Linux user, you can use this tool to check if your ROM is OK for RetroAchievements:  https://github.com/meleu/hascheevos", 
            "title": "Why is my game not loading up achievement?"
        }, 
        {
            "location": "/FAQ/#what-is-hardcore-mode", 
            "text": "Hardcore mode is an additional feature to separate out the good gamers from the great gamers: Hardcore mode disables  all  savestate ability in the emulator: you would not be able to save and reload at any time. You would have to complete the game and get the achievements first time, just like it were on the original console. In reward for this, you will earn both the standard and the hardcore achievement, in effect earning double points! A regular game worth 400 points, is now worth 800 if you complete it fully on hardcore! For example: if you complete the game fully for 400 points, you then have the opportunity to earn another 400 on hardcore.", 
            "title": "What is hardcore mode?"
        }, 
        {
            "location": "/FAQ/#this-achievement-didnt-trigger", 
            "text": "We have a new feature built-in to the emulators now that will allow you to report broken achievements that occur at the wrong time, or not at all. Veteran developer Jackolantern explains how to use it in this video:  https://www.youtube.com/watch?v=TTHbm700Y-Y", 
            "title": "This achievement didn't trigger!"
        }, 
        {
            "location": "/FAQ/#i-want-to-make-achievements", 
            "text": "Good to hear! There are various resources that are available to help; first I'd recommend having a look in  the Developer forum  for further information, specifically  this tutorial . Also the following video may be useful:  https://www.youtube.com/watch?v=8nYb_5cgQHY  Please don't hesitate to ask if you need help, don't struggle! The only recommendation I have is to make sure you're enjoying whatever it is you're doing. If you're not having fun, don't do it :) if you get frustrated, just drop a message on the forums or in the chat and someone will get back to you shortly.", 
            "title": "I want to make achievements!"
        }, 
        {
            "location": "/FAQ/#what-are-the-white-points", 
            "text": "White points are secondary based on how hard an achievement is. Explained  here in detail .", 
            "title": "What are the White points?"
        }, 
        {
            "location": "/FAQ/#whats-considered-cheating-for-hardcore-what-if-i-find-evidence-of-a-cheater", 
            "text": "Anything that modifies the normal console gameplay experience  with the allowed exception of fast forward . We live by an honor code most of all. If you find an evidence of a cheater, send the evidence to an active admin member.", 
            "title": "What's considered cheating (for hardcore)? What if I find evidence of a cheater?"
        }, 
        {
            "location": "/Achievement-Creation/", 
            "text": "Welcome to the world of Achievement Creation!\n\n\nFirst Steps\n\n\nBefore start ensure you have an RA emulator from the \nRetroAchievements Download Page\n first and \ncreate an account\n so you can log in using the emulator.\n\n\nIn this guide we'll be using RAGens to demonstrate, and the game \nSonic the Hedgehog\n. We are using RAGens but the same applies for the other emulators.\n\n\nTo begin, run the RAGens executable, and login when prompted. Next, use File -\n Open and select whatever ROM you would like to find achievements for.\n\n\nMemory Inspector\n\n\nYou should now have your main window running Sonic. There are 3 other dialogs we'll be using, which can be found under \nRetroAchievements\n in the menu. We'll be dealing with the \nMemory Inspector\n first:\n\n\n\n\nThe Memory Inspector can be used to find addresses in RAM for us to use. Essentially you are on a treasure hunt for memory locations - this dialog will help you examine and filter the game's RAM while the game is running. To start or restart a test, click \nNew 8-bit Test\n near the top middle.\n\n\nTo keep things simple, we'll start by looking for the memory address which holds the number of rings we have collected. Our steps will be the following:\n\n\n\n\n\n\nLoad the ROM and start a new game.\n\n\n\n\n\n\nReset the memory dialog: click \nNew 8-bit Test\n.\n\n\n\n\n\n\nReturn to the game and change the number of rings in memory. For example, collect a ring.\n\n\n\n\n\n\nIn the memory dialog, we now want to filter for values that are 'greater than previous values' (symbol \n). We select this, then hit \nFilter\n.\n\n\n\n\n\n\nEach time you perform 3 then 4, the number of possibilities or 'candidates' will get smaller. We will continue doing this until the number of candidates reaches a very small number (as few as possible), it might take 4-5 attempts. Next we can click in the results window, and monitor the memory address in the memory viewer at the bottom. Continue using the game and you should see the values in memory change as you collect rings. If you don't, or if something doesn't look right, try another value. With the first Sonic the Hedgehog, the memory address for the number of rings should be \n0xfe20\n.\n\n\n\n\n\n\nNote\n: Using save states (F5 to save state, F8 to load state, F6-F7 to toggle which state to use), you can switch back and forth between different states allowing you to alter what is in RAM, and use this to filter out bad candidates. You can search for values that remain the same (I.e. If you know the value didn't change, use \n=\n), or values that are different (use 'not equal', symbol \n!=\n).\n\n\n\n\n\n\nNote\n: There's unfortunately no guarantee from game to game on how the developers have stored their data (4-bit, 8-bit, 16-bit, binary-coded decimals, negative/inverted, i.e. using 0xff/0xffff to represent 'set', or plain randomly), but eventually you should come across some good address. Note if you are struggling to find good values, post \nRetroAchievements.org Development Help forum\n, or \nRetroAchievements Discord server\n, or see the \nExtra Stuff\n at the end of this tutorial. There are plenty of people who will be very happy to help!!\n\n\n\n\n\n\nTip\n: if you'd like to experiment with memory, try entering new values directly into the RAM viewer. This can have devastating effects on the game, or it might do exactly what you expect, (or nothing at all!) It can be useful though, to see if you can enter a value and get the result you expect. Use with caution!\n\n\n\n\n\n\nWhen you've found an address you're happy with, you can write a short note for what it is and hit \nSave Note\n, this will store it on database, and will be automatically restored next time you load up the memory viewer for this game, wherever you are! Note that after clicking 'Save Note', the note will be automatically stored on the database, and shared so all developers will share access to these memory notes. They will all be downloaded afresh when you load a ROM. If you try to overwrite a note, it will check with you first before submitting.\n\n\nAchievement Sets\n\n\nOK so the memory location for the number of rings is stored at \n0xfe20\n - note to a non-programmer, we're dealing in \nhexadecimal numeral system\n which can be daunting, but don't worry, essentially its just numbers and letters instead of only numbers, and not forgetting \n0x\n at the start to show that it's a memory location in hex. We've found an address we're interested in and stored it using \nSave Note\n. We now want to create a new achievement.\n\n\nGo to the \nRetroAchievements\n in the menu, choose \nAchievement Sets\n and you'll see this dialog:\n\n\n\n\nHere we group all the achievements we know about into three sets:\n1. Core Achievements (the main, public Achievement set),\n2. Unofficial/User Achievements (public, but will not award you points: for peer review),\n3. Local Achievements (personal to your PC).\n\n\nIn the Achievements dialog, click \nLocal Achievements\n (top left), then \nAdd New Achievement\n (bottom left). This will add a blank entry to the list in the center. Double click on it: if it's not already open, this should select it and open the \nAchievement Editor\n dialog.\n\n\nAchievement Editor\n\n\nThis is how it looks:\n\n\n\n\nThis is the final dialog where we bring all the data together. Most of the top fields are self explanatory, I.e. Title, Description, Points. The main one is the 'Requirements' part.\n\n\nLet's say we want to add an achievement for collecting a certain number of rings. Let's say 15 rings for simplicity. After filling out the fields at the top and selecting a suitable icon (in this example we used the gold trophy badge (00136), but you can upload a new one), we need to fill out Requirements. We have one requirement, \nthat the number of rings is at least 15\n. Next click is \nAdd New Requirement\n.\n\n\nClicking this button will add several default values to the Requirements list. These defaults just ensure that something relatively sensible is added to the list. For now, ignoring the field 'Special?'. When we clicked create, the default memory value will be whatever value you last left in the memory dialog.\n\n\nNext we will change these values to the following:\n\n\n\n\nSize: \n16-bit\n\n\nMemory: \n0xfe20\n\n\nCmp: \n=\n - this is the comparison to make. We could have any comparison here, but it's sensible to have \"greater than or equal to\". This is important because if we get 10 rings then a super ring box to have 20, we would miss out having \nexactly\n 15 rings.\n\n\nType: \nValue\n - we're comparing this memory value to a fixed value: 15\n\n\nSize: \nEmpty\n - this is only relevant when comparing memory to memory\n\n\nMem/Val: \n15\n - the number of rings required: the value we are comparing the memory to\n\n\nHit Count: \n0\n - ignore this for now, its useful for when something needs to happen a certain number of times\n\n\n\n\nWith that set, we don't have any more conditions to add, so we return to the \nAchievements Dialog\n. To be safe, we should save our progress by hitting \nSave Local\n! This saves everything to file locally to ensure that we won't lose any progress. \n\n\nTesting the Achievement\n\n\nWe can now 'activate' this achievement locally by hitting \nActivate\n on the right-hand side. This will start monitoring these memory locations and will award the achievement once all the conditions are true. Now we can go ahead and test to see if this achievement works!\n\n\n\n\nIf we press ESCAPE in-game, you will see the achievement show up as a demonstration of what it would look like in the in-game overlay!\n\n\n\n\nOK, the Achievement works. Now What?\n\n\nOnce we have tested that the achievement works locally, there is a two-step commit process that's (mostly) pain-free! First in the Achievements Dialog, we select our achievement and press 'Commit Selected', and agree to the dialog. This will push our achievement to the server and store it under 'Unofficial User-submitted Achievements'. Note that our achievement still exists in this dialog, it's just moved to a different tab.\n\n\nFor the achievement to be enjoyed by many, it must be pushed into the Core Achievement set. For your few first achievements, it must be reviewed by a staff member before it can be pushed to Core. Once you have uploaded a set of achievements, you may be given \nDeveloper\n status, in which case you can push any achievement to Core yourself.\n\n\nNaturally, it's best only to submit achievements that are unique and interesting into the Core Achievements group. If there are duplicates in the Core group, the most recently added duplicates will be manually moderated and deleted. If you don't want your achievement in the Core group, or you think it might not be appropriate for the Core group (i.e. if it's incomplete, or if sometimes it appears to trigger when it's not supposed to, like when the game is showing a demo), leave it in the Unofficial/User Submitted section.\n\n\nExtra Stuff\n\n\nWhen finding addresses, there is potentially a bit of a shortcut. PAR files can come in very useful, see \nhttp://bsfree.shadowflareindustries.com/?s=11\nd=5\n for examples of PAR codes. PAR codes are commonly used to force an address in RAM to stay a certain value. The addresses are easily decoded: if it begins 'ff', that means 'keep a value stuck in this address'. The next four digits are the address, and after the colon is the value that should be used. For example:\n\n\nFFFE20:00C8\n\n\nThis code is for Sonic 1, and the Action Replay would ensure that the value 00c8 is stuck in the address 0xfe20. This causes sonic to permanently have (hex)c8 rings, which is 200.\n\n\nNote that it is only Action Replay (PAR) codes that will be useful to get addresses for use with RetroAchievements: Game Genie codes modify ROM rather than RAM and aren't what we're looking for.", 
            "title": "Achievement Creation"
        }, 
        {
            "location": "/Achievement-Creation/#first-steps", 
            "text": "Before start ensure you have an RA emulator from the  RetroAchievements Download Page  first and  create an account  so you can log in using the emulator.  In this guide we'll be using RAGens to demonstrate, and the game  Sonic the Hedgehog . We are using RAGens but the same applies for the other emulators.  To begin, run the RAGens executable, and login when prompted. Next, use File -  Open and select whatever ROM you would like to find achievements for.", 
            "title": "First Steps"
        }, 
        {
            "location": "/Achievement-Creation/#memory-inspector", 
            "text": "You should now have your main window running Sonic. There are 3 other dialogs we'll be using, which can be found under  RetroAchievements  in the menu. We'll be dealing with the  Memory Inspector  first:   The Memory Inspector can be used to find addresses in RAM for us to use. Essentially you are on a treasure hunt for memory locations - this dialog will help you examine and filter the game's RAM while the game is running. To start or restart a test, click  New 8-bit Test  near the top middle.  To keep things simple, we'll start by looking for the memory address which holds the number of rings we have collected. Our steps will be the following:    Load the ROM and start a new game.    Reset the memory dialog: click  New 8-bit Test .    Return to the game and change the number of rings in memory. For example, collect a ring.    In the memory dialog, we now want to filter for values that are 'greater than previous values' (symbol  ). We select this, then hit  Filter .    Each time you perform 3 then 4, the number of possibilities or 'candidates' will get smaller. We will continue doing this until the number of candidates reaches a very small number (as few as possible), it might take 4-5 attempts. Next we can click in the results window, and monitor the memory address in the memory viewer at the bottom. Continue using the game and you should see the values in memory change as you collect rings. If you don't, or if something doesn't look right, try another value. With the first Sonic the Hedgehog, the memory address for the number of rings should be  0xfe20 .    Note : Using save states (F5 to save state, F8 to load state, F6-F7 to toggle which state to use), you can switch back and forth between different states allowing you to alter what is in RAM, and use this to filter out bad candidates. You can search for values that remain the same (I.e. If you know the value didn't change, use  = ), or values that are different (use 'not equal', symbol  != ).    Note : There's unfortunately no guarantee from game to game on how the developers have stored their data (4-bit, 8-bit, 16-bit, binary-coded decimals, negative/inverted, i.e. using 0xff/0xffff to represent 'set', or plain randomly), but eventually you should come across some good address. Note if you are struggling to find good values, post  RetroAchievements.org Development Help forum , or  RetroAchievements Discord server , or see the  Extra Stuff  at the end of this tutorial. There are plenty of people who will be very happy to help!!    Tip : if you'd like to experiment with memory, try entering new values directly into the RAM viewer. This can have devastating effects on the game, or it might do exactly what you expect, (or nothing at all!) It can be useful though, to see if you can enter a value and get the result you expect. Use with caution!    When you've found an address you're happy with, you can write a short note for what it is and hit  Save Note , this will store it on database, and will be automatically restored next time you load up the memory viewer for this game, wherever you are! Note that after clicking 'Save Note', the note will be automatically stored on the database, and shared so all developers will share access to these memory notes. They will all be downloaded afresh when you load a ROM. If you try to overwrite a note, it will check with you first before submitting.", 
            "title": "Memory Inspector"
        }, 
        {
            "location": "/Achievement-Creation/#achievement-sets", 
            "text": "OK so the memory location for the number of rings is stored at  0xfe20  - note to a non-programmer, we're dealing in  hexadecimal numeral system  which can be daunting, but don't worry, essentially its just numbers and letters instead of only numbers, and not forgetting  0x  at the start to show that it's a memory location in hex. We've found an address we're interested in and stored it using  Save Note . We now want to create a new achievement.  Go to the  RetroAchievements  in the menu, choose  Achievement Sets  and you'll see this dialog:   Here we group all the achievements we know about into three sets:\n1. Core Achievements (the main, public Achievement set),\n2. Unofficial/User Achievements (public, but will not award you points: for peer review),\n3. Local Achievements (personal to your PC).  In the Achievements dialog, click  Local Achievements  (top left), then  Add New Achievement  (bottom left). This will add a blank entry to the list in the center. Double click on it: if it's not already open, this should select it and open the  Achievement Editor  dialog.", 
            "title": "Achievement Sets"
        }, 
        {
            "location": "/Achievement-Creation/#achievement-editor", 
            "text": "This is how it looks:   This is the final dialog where we bring all the data together. Most of the top fields are self explanatory, I.e. Title, Description, Points. The main one is the 'Requirements' part.  Let's say we want to add an achievement for collecting a certain number of rings. Let's say 15 rings for simplicity. After filling out the fields at the top and selecting a suitable icon (in this example we used the gold trophy badge (00136), but you can upload a new one), we need to fill out Requirements. We have one requirement,  that the number of rings is at least 15 . Next click is  Add New Requirement .  Clicking this button will add several default values to the Requirements list. These defaults just ensure that something relatively sensible is added to the list. For now, ignoring the field 'Special?'. When we clicked create, the default memory value will be whatever value you last left in the memory dialog.  Next we will change these values to the following:   Size:  16-bit  Memory:  0xfe20  Cmp:  =  - this is the comparison to make. We could have any comparison here, but it's sensible to have \"greater than or equal to\". This is important because if we get 10 rings then a super ring box to have 20, we would miss out having  exactly  15 rings.  Type:  Value  - we're comparing this memory value to a fixed value: 15  Size:  Empty  - this is only relevant when comparing memory to memory  Mem/Val:  15  - the number of rings required: the value we are comparing the memory to  Hit Count:  0  - ignore this for now, its useful for when something needs to happen a certain number of times   With that set, we don't have any more conditions to add, so we return to the  Achievements Dialog . To be safe, we should save our progress by hitting  Save Local ! This saves everything to file locally to ensure that we won't lose any progress.", 
            "title": "Achievement Editor"
        }, 
        {
            "location": "/Achievement-Creation/#testing-the-achievement", 
            "text": "We can now 'activate' this achievement locally by hitting  Activate  on the right-hand side. This will start monitoring these memory locations and will award the achievement once all the conditions are true. Now we can go ahead and test to see if this achievement works!   If we press ESCAPE in-game, you will see the achievement show up as a demonstration of what it would look like in the in-game overlay!", 
            "title": "Testing the Achievement"
        }, 
        {
            "location": "/Achievement-Creation/#ok-the-achievement-works-now-what", 
            "text": "Once we have tested that the achievement works locally, there is a two-step commit process that's (mostly) pain-free! First in the Achievements Dialog, we select our achievement and press 'Commit Selected', and agree to the dialog. This will push our achievement to the server and store it under 'Unofficial User-submitted Achievements'. Note that our achievement still exists in this dialog, it's just moved to a different tab.  For the achievement to be enjoyed by many, it must be pushed into the Core Achievement set. For your few first achievements, it must be reviewed by a staff member before it can be pushed to Core. Once you have uploaded a set of achievements, you may be given  Developer  status, in which case you can push any achievement to Core yourself.  Naturally, it's best only to submit achievements that are unique and interesting into the Core Achievements group. If there are duplicates in the Core group, the most recently added duplicates will be manually moderated and deleted. If you don't want your achievement in the Core group, or you think it might not be appropriate for the Core group (i.e. if it's incomplete, or if sometimes it appears to trigger when it's not supposed to, like when the game is showing a demo), leave it in the Unofficial/User Submitted section.", 
            "title": "OK, the Achievement works. Now What?"
        }, 
        {
            "location": "/Achievement-Creation/#extra-stuff", 
            "text": "When finding addresses, there is potentially a bit of a shortcut. PAR files can come in very useful, see  http://bsfree.shadowflareindustries.com/?s=11 d=5  for examples of PAR codes. PAR codes are commonly used to force an address in RAM to stay a certain value. The addresses are easily decoded: if it begins 'ff', that means 'keep a value stuck in this address'. The next four digits are the address, and after the colon is the value that should be used. For example:  FFFE20:00C8  This code is for Sonic 1, and the Action Replay would ensure that the value 00c8 is stuck in the address 0xfe20. This causes sonic to permanently have (hex)c8 rings, which is 200.  Note that it is only Action Replay (PAR) codes that will be useful to get addresses for use with RetroAchievements: Game Genie codes modify ROM rather than RAM and aren't what we're looking for.", 
            "title": "Extra Stuff"
        }, 
        {
            "location": "/Developer-Toolset/", 
            "text": "There are several tools and options available to a developer. Knowing how to properly utilize them will improve the quality of your sets. For more help regarding these, our \nDiscord server\n is always open for assistance.\n\n\nAchievement Tools\n\n\nGroups\n\n\nAchievements can have groups added to them that can act as alternative requirements to unlock an achievement. These are called \nAlt Groups\n.\n\n\nOne extremely important thing to note: For an achievement to unlock it must have it's \nCore group AND at least one Alt group be true.\n If there are no Alt groups present, then only the Core group's conditions need to be true.\n\n\nTip:\n Because the Core group always need to be active, typically you would put conditions there that is common among all the alternative requirements. However, one trick you can use to basically ignore needing a Core group is to give it a condition that is always true such as: \n\n\nMem 0x0001 = Mem 0x0001\n\n\nSince the Core group is now always true, and you can now focus on differentiating the Alt groups.\n\n\nSpecial Flags\n\n\nA unique property of flagged achievement conditions are that they are always considered \ntrue\n unless their comparison is met. In which case, the condition is now \nfalse\n.\n\n\n\n\nPauseIf\n - This will pause activity for all conditions in the same group. Keep in mind this will \nnot\n pause conditions in other groups.\n\n\nResetIf\n - This will reset the hit value of all conditions. Unlike \nPauseIf\n, this will reset conditions in \nall groups.\n\n\n\n\n\n\nWhen developing for \nN64\n, there are additional \n\"arithmetic flag operations\"\n that can be used. These flags are currently exclusive to N64. Please note, any condition with arithmetic flags are always considered \ntrue\n, regardless of their comparison values.\n\n\n\n\nAdd Source\n - Will add the value of the source in the field labeled \nMemory\n to the next achievement condition. The total value will be used in the next achievement condition.\n\n\nSub Source\n - Works similarly to \nAdd Source\n, but will instead subtract the source value.\n\n\nAdd Hits\n - Will add the current hit count to the next condition. The total hit value will be used in the next achievement condition.\n\n\n\n\n\n\nIn this example, conditions #1 and #2 will have their values (\n5\n and \n3\n respectively) added until they reach condition #3. At that point, the value contained in the \nMemory\n field will be \n5 + 3 + 20\n, and it's new value will be \n28\n. Condition #3 will now be \ntrue\n and read as:\n\n28 \n 20", 
            "title": "Developer Toolset"
        }, 
        {
            "location": "/Developer-Toolset/#achievement-tools", 
            "text": "", 
            "title": "Achievement Tools"
        }, 
        {
            "location": "/Developer-Toolset/#groups", 
            "text": "Achievements can have groups added to them that can act as alternative requirements to unlock an achievement. These are called  Alt Groups .  One extremely important thing to note: For an achievement to unlock it must have it's  Core group AND at least one Alt group be true.  If there are no Alt groups present, then only the Core group's conditions need to be true.  Tip:  Because the Core group always need to be active, typically you would put conditions there that is common among all the alternative requirements. However, one trick you can use to basically ignore needing a Core group is to give it a condition that is always true such as:   Mem 0x0001 = Mem 0x0001  Since the Core group is now always true, and you can now focus on differentiating the Alt groups.", 
            "title": "Groups"
        }, 
        {
            "location": "/Developer-Toolset/#special-flags", 
            "text": "A unique property of flagged achievement conditions are that they are always considered  true  unless their comparison is met. In which case, the condition is now  false .   PauseIf  - This will pause activity for all conditions in the same group. Keep in mind this will  not  pause conditions in other groups.  ResetIf  - This will reset the hit value of all conditions. Unlike  PauseIf , this will reset conditions in  all groups.    When developing for  N64 , there are additional  \"arithmetic flag operations\"  that can be used. These flags are currently exclusive to N64. Please note, any condition with arithmetic flags are always considered  true , regardless of their comparison values.   Add Source  - Will add the value of the source in the field labeled  Memory  to the next achievement condition. The total value will be used in the next achievement condition.  Sub Source  - Works similarly to  Add Source , but will instead subtract the source value.  Add Hits  - Will add the current hit count to the next condition. The total hit value will be used in the next achievement condition.    In this example, conditions #1 and #2 will have their values ( 5  and  3  respectively) added until they reach condition #3. At that point, the value contained in the  Memory  field will be  5 + 3 + 20 , and it's new value will be  28 . Condition #3 will now be  true  and read as: 28   20", 
            "title": "Special Flags"
        }, 
        {
            "location": "/Beginner-Tips/", 
            "text": "These tips were originally posted by \nBrian\n at \nRetroAchievements forums\n\n\n\n\n\n\nAvoid using only one condition as the achievement will most likely pop at the wrong time.\n\n\n\n\n\n\nIf the game has a demo mode (AI plays the game after you wait a while on the title screen), make sure to add \nmode != demo\n or something similar in your achievements.\n\n\n\n\n\n\nYou can input values in the memory viewer to see if it affects the game.\n\n\n\n\n\n\nEven if something is visibly decreasing in-game, like health, the value isn't necessarily decreasing. It's possible for it to be increasing, so since it's uncommon for you to know for sure, you should just filter \n!=\n and \n==\n\n\n\n\n\n\nTry to avoid achievement spam. If a game has 100 levels, do not make an achievement for each level. Do every 10 or so.\n\n\n\n\n\n\nSome emulators send some addresses in RAM a specific value when reset/reloaded. It's only for the first frame, but it can cause achievements to pop up, so you need to prepare for it. It's usually all one value like FF. You can see the value if you use Frame Advance / Next Frame while resetting the game.\n\n\n\n\n\n\nGet as creative as possible with achievements. \"Beat X without using/doing Y\" \"Beat X in 5 seconds\" \"3 heart run\"\n\n\n\n\n\n\nChoose NTSC (U) ROMs if available, because 60 FPS is a smoother experience. (E) is PAL(50 FPS), (J) is also NTSC, but is only used if it was a Japan-exclusive game.\n\n\n\n\n\n\nDo not use a ROM with a modded/custom launch screen like Mode7 and RisingSun -sometimes- have because it messes up RAM.\n\n\n\n\n\n\nUncheck \"Show Decimal Values\" in the Achievement Editor so you can enter the hex values you see in the Memory Viewer.\n\n\n\n\n\n\nAlways use 8-bit view in the Memory Viewer, just remember that when adding a 16-bit address that the address to the right comes first. Example: AB CD WX YZ in 8-bit will becomes CDAB YZWX in 16-bit.\n\n\n\n\n\n\n16-bit requirements do not have to be used on an even number of RAM, they can be used in-between properly, even if 16-bit view doesn't show it right. Ex: 0 1 2 3 4 5, in 16-bit it's usually viewed as 10 32 54, but if you start the address at the 1 here in your requirement, \"21\" will be read by the achievement, even if 16-bit view in the memory viewer isn't showing it. It also works if it's the last address in the line(starting at F, going to 0).\n\n\n\n\n\n\nIn the Editor, the field on the far right side is Hit Count. 0 is default, none. It means the condition must be true when the achievement pops. If you set a manual hit count, like 1, it means the condition must be true for at least 1 frame, and once that hit count is met, it doesn't need to be met again at any other time.\n\n\n\n\n\n\nResetIf\n is much more common to use than \nPauseIf\n it's used to reset hit count for conditions you set a manual hit count for.\n\n\n\n\n\n\nResetIf\n and \nPauseIf\n conditions only work if you set a manual hit count for a condition.\n\n\n\n\n\n\nPauseIf\n is used to pause hit count going up during a specific situation(like pausing the game). It's used when you want to keep previously earned hit count, but don't want to reset it when someone simply pauses, for example.\n\n\n\n\n\n\nDelta\n is the previous frame's value. You can do \nResetIf health \n delta health\n and that would mean \nResetIf health is smaller than the previous frame's health\n (AKA the player lost health). Or you can just make the previous frame's value a requirement. \nhealth delta = 1\n means \"the previous frame's value for health must be 1 when the achievement pops up.\"\n\n\n\n\n\n\nUse single bits(0-7) for things that only change a single bit. In the Memory Viewer, when an address is selected, there will be \"bits 0 1 2 3 4 5 6 7\" above the addresses, and below those numbers will be either \"0\" or \"1\" like \"0 0 0 0 0 0 0 0\" if bit3 has a 1 under it, bit3=1 for that address. Single bit usage is very common for game events/unlocks/etc.. You'll want to use these in games where you can do things in different orders, dialogues, events, unlocks.. If you check for \"8-bit x = 7\" and someone did something different like skip something or get something extra, their 8-bit value will very likely be different because the single bits within are different and the achievement won't unlock, so in this case you check for specific bits inside the 8-bit address. Now if for example, item unlocks use all 8 bits of the 8-bit address, and you want to do \"unlock all items,\" you can just do \"8-bit x = 0xff\" This may be confusing, but it's very important to understand.\n\n\n\n\n\n\nIf you find an address, also search the same region surrounding it and you could find many more useful addresses.\n\n\n\n\n\n\nIf you absolutely cannot reduce the results of a filter, you can try guessing some values or at least how the value is acting(\n or \n). For example, no health is usually \"0\", Stage 1 is usually value \"0\", Stage 2 is usually value \"1\" depending on the type of game.\n\n\n\n\n\n\nAlt groups (left side of editor) are used for \"or\" conditions. The core group is always there and must always be true with at least one alt group being completely true to get the achievement. The entire group is your \"or\" condition. See the forum thread for an image explanation of this.\n\n\n\n\n\n\nThere's a 100 achievement cap, 400 point cap, and a character cap for single achievements(try not to put 50+ conditions in one achievement).\n\n\n\n\n\n\nDo not make achievements requiring glitches. Exploits like using a falling goomba in SMB1 to cross a large gap, or getting infinite lives in SMB3 by bouncing off the goombas coming out of the pipe are allowed, but straight-up glitches aren't.\n\n\n\n\n\n\nAvoid using accented/special characters like the \"\u00e9\" in Pokemon, as they currently break a few things like feed if they appear on feed.", 
            "title": "Beginner Tips"
        }, 
        {
            "location": "/Hit-Counts-and-Delta-Values/", 
            "text": "When you are creating achievements you may want to have a little more flexibility with when your achievements trigger. While features are being added all the time, it's possible to make most achievements using the current feature set.\n\n\nExample 1\n\n\nLet's take \nStreets of Rage 2 (Mega Drive)\n\nas a case study, and \nSteel Grip (20) - Defeat 10 enemies without dropping your weapon\n achievement. This relies on four conditions:\n\n\n\n\n8-bit 0xef33 = 1\n (1 time)\n\n\n16-bit 0xef4e \n delta 16-bit 0xef4e\n (10 times)\n\n\nReset If: 8-bit 0xef37 != delta 0xef37\n\n\nReset If: 8-bit 0xef33 != 1\n\n\n\n\nDetailing each condition:\n\n\n\n\n8-bit 0xef33 = 1\n (1 time)\n\n\n\n\nThis value is the flag to say whether the player is holding a weapon. We require this to be true, once. This is actually not necessary, but it's useful to show the progression. We are saying that require the player to hold a weapon, at least once.\n\n\nPLEASE NOTE\n: if a condition has a hit count, and reaches the number required, this condition is no longer tested. It is true and remains true, \nUNLESS\n you have a \nReset If\n, which we will discuss below.\n\n\n\n\n16-bit 0xef4e \n delta 16-bit 0xef4e\n (10 times)\n\n\n\n\nThe memory value shown twice here is the number of KOs that the player has made. It's 16-bit (meaning the value can be more than 255), and by using the delta and 'greater than' symbols, we are saying that we require the number of KOs to be bigger than the previous value, and we need this to happen 10 unique times.\n\n\nEvery time the current value is bigger than the previous value, the hit count will go up by one. The next frame, the 'delta' value will have increased to be the same as the current value, this ensures that after every kill, the KO counter will go up by one, and the hit count will go up by one.\n\n\nThere is a slight caviat with this... if the number of KOs goes up by two in the same frame, the hit count will only go up by one. It's a slight flaw that does happen a little more often than expected... in future there may be a way around this but for now it's a fairly close estimate to your number of kills.\n\n\n\n\nReset If: 8-bit 0xef37 != delta 0xef37\n\n\n\n\nThe \nReset If\n special flag essentially tells the emulator, if I read a 'reset if' condition, and this condition is true, please reset ALL my hit counts on this achievement.\n\n\nFor this condition, we are saying that we wish to reset all our progress, if the \nweapon type\n is different to the last known weapon type.\n\n\n\n\nReset If: 8-bit 0xef33 != 1\n\n\n\n\nHere we are saying reset \nall\n our progress, if the player is no longer carrying a weapon.\n\n\nExample 2\n\n\nAnother notable example is the \nSuper Hang-On\n's achievement \nSpeed Freak (15) - Maintain at least 300kph for 10 seconds\n. In this achievement, we wish for there to be a fact or condition that is true 600 times consecutively. The reason for this is that the genesis is locked into processing 60 frames of logic per second (NTSC at least?). And the fact we're looking for is 'that the speed is over 300'.\n\n\n\n\n16-bit 0x055a \n= 0x300\n (600)\n\n\nReset If 0x055a \n 0x300\n\n\n\n\nSo once 600 frames or 10 seconds have passed, and the player's speed is above 300, the achievement will trigger.\n\n\nThere are other more complicated approaches to hit counts that can be used to encourage the player through certain limits, but it'll be discussed in a further tutorial.\n\n\nSo to sum up - hit counts are useful for when you wish to test that a condition has reached a certain value a certain number of times. Currently hit counts cannot be used across conditions (this is definitely something for the future though), so they must be used when a certain fact or condition reaches a certain value or memory address. Combine hit counts with \nReset If\n and you'll be able to reset if the player hasn't reached a certain hit count, forcing them to start again from the beginning.", 
            "title": "Hit Counts and Delta Values"
        }, 
        {
            "location": "/Hit-Counts-and-Delta-Values/#example-1", 
            "text": "Let's take  Streets of Rage 2 (Mega Drive) \nas a case study, and  Steel Grip (20) - Defeat 10 enemies without dropping your weapon  achievement. This relies on four conditions:   8-bit 0xef33 = 1  (1 time)  16-bit 0xef4e   delta 16-bit 0xef4e  (10 times)  Reset If: 8-bit 0xef37 != delta 0xef37  Reset If: 8-bit 0xef33 != 1   Detailing each condition:   8-bit 0xef33 = 1  (1 time)   This value is the flag to say whether the player is holding a weapon. We require this to be true, once. This is actually not necessary, but it's useful to show the progression. We are saying that require the player to hold a weapon, at least once.  PLEASE NOTE : if a condition has a hit count, and reaches the number required, this condition is no longer tested. It is true and remains true,  UNLESS  you have a  Reset If , which we will discuss below.   16-bit 0xef4e   delta 16-bit 0xef4e  (10 times)   The memory value shown twice here is the number of KOs that the player has made. It's 16-bit (meaning the value can be more than 255), and by using the delta and 'greater than' symbols, we are saying that we require the number of KOs to be bigger than the previous value, and we need this to happen 10 unique times.  Every time the current value is bigger than the previous value, the hit count will go up by one. The next frame, the 'delta' value will have increased to be the same as the current value, this ensures that after every kill, the KO counter will go up by one, and the hit count will go up by one.  There is a slight caviat with this... if the number of KOs goes up by two in the same frame, the hit count will only go up by one. It's a slight flaw that does happen a little more often than expected... in future there may be a way around this but for now it's a fairly close estimate to your number of kills.   Reset If: 8-bit 0xef37 != delta 0xef37   The  Reset If  special flag essentially tells the emulator, if I read a 'reset if' condition, and this condition is true, please reset ALL my hit counts on this achievement.  For this condition, we are saying that we wish to reset all our progress, if the  weapon type  is different to the last known weapon type.   Reset If: 8-bit 0xef33 != 1   Here we are saying reset  all  our progress, if the player is no longer carrying a weapon.", 
            "title": "Example 1"
        }, 
        {
            "location": "/Hit-Counts-and-Delta-Values/#example-2", 
            "text": "Another notable example is the  Super Hang-On 's achievement  Speed Freak (15) - Maintain at least 300kph for 10 seconds . In this achievement, we wish for there to be a fact or condition that is true 600 times consecutively. The reason for this is that the genesis is locked into processing 60 frames of logic per second (NTSC at least?). And the fact we're looking for is 'that the speed is over 300'.   16-bit 0x055a  = 0x300  (600)  Reset If 0x055a   0x300   So once 600 frames or 10 seconds have passed, and the player's speed is above 300, the achievement will trigger.  There are other more complicated approaches to hit counts that can be used to encourage the player through certain limits, but it'll be discussed in a further tutorial.  So to sum up - hit counts are useful for when you wish to test that a condition has reached a certain value a certain number of times. Currently hit counts cannot be used across conditions (this is definitely something for the future though), so they must be used when a certain fact or condition reaches a certain value or memory address. Combine hit counts with  Reset If  and you'll be able to reset if the player hasn't reached a certain hit count, forcing them to start again from the beginning.", 
            "title": "Example 2"
        }, 
        {
            "location": "/Badge-Creation/", 
            "text": "Badges are the images associated to each achievement from each game, and are used across the site and in the app.\n\n\nFormat\n\n\nWhen uploaded, your file is converted into the following:\n\n\n\n\n128x128 32-bit colour PNG\n\n\n64x64 32-bit colour PNG\n\n\n64x64 greyscale and blurred PNG\n\n\n32x32 32-bit colour PNG\n\n\n32x32 greyscale and blurred PNG \n\n\n\n\nIt's not entirely important how the file is formatted before uploading, but as long as it's square, the file will upload and be converted pretty easily. Naturally it is important not to break any copyright law, or upload anything vulgar, offensive or pornographic, with the possible consequences of being cautioned, potentially reported and potentially removed from RetroAchievements.\n\n\nGuidelines\n\n\n\n\n\n\nBadges should refer in some way to what the achievement is about, i.e. a picture of the boss, level or collectible that the achievement requires the player to get to. \n\n\n\n\n\n\nIn the cases of low-resolution games' achievements, it can be hard to get a badge looking good without it looking \nblocky\n or \nblurry\n, in these cases the \nblocky\n look is often preferable, so that the images have a \nretro\n feel to them.\n\n\n\n\n\n\nChanges and Demotions\n\n\nAs the site does not (in all cases) have a permanent \nchangelog/git-style-rollback/wiki-style-rollback\n for all actions taken on a set it's recommended that when a developer makes changes of any kind to a set that they make a note of it in the forum for that game. \n\n\n\n\nHaving this in considerations, in relation to badges, one of the following:\n- leaving an old copy of the badge in the game thread \n- annotating the old badge ID (number displayed on the badge image's URL) \n\n\nis recommended, to help keep everything orderly so that in cases when rollbacks or change backs are appropriate it is much easier to do them.", 
            "title": "Badge Creation"
        }, 
        {
            "location": "/Badge-Creation/#format", 
            "text": "When uploaded, your file is converted into the following:   128x128 32-bit colour PNG  64x64 32-bit colour PNG  64x64 greyscale and blurred PNG  32x32 32-bit colour PNG  32x32 greyscale and blurred PNG    It's not entirely important how the file is formatted before uploading, but as long as it's square, the file will upload and be converted pretty easily. Naturally it is important not to break any copyright law, or upload anything vulgar, offensive or pornographic, with the possible consequences of being cautioned, potentially reported and potentially removed from RetroAchievements.", 
            "title": "Format"
        }, 
        {
            "location": "/Badge-Creation/#guidelines", 
            "text": "Badges should refer in some way to what the achievement is about, i.e. a picture of the boss, level or collectible that the achievement requires the player to get to.     In the cases of low-resolution games' achievements, it can be hard to get a badge looking good without it looking  blocky  or  blurry , in these cases the  blocky  look is often preferable, so that the images have a  retro  feel to them.", 
            "title": "Guidelines"
        }, 
        {
            "location": "/Badge-Creation/#changes-and-demotions", 
            "text": "As the site does not (in all cases) have a permanent  changelog/git-style-rollback/wiki-style-rollback  for all actions taken on a set it's recommended that when a developer makes changes of any kind to a set that they make a note of it in the forum for that game.    Having this in considerations, in relation to badges, one of the following:\n- leaving an old copy of the badge in the game thread \n- annotating the old badge ID (number displayed on the badge image's URL)   is recommended, to help keep everything orderly so that in cases when rollbacks or change backs are appropriate it is much easier to do them.", 
            "title": "Changes and Demotions"
        }, 
        {
            "location": "/Set-Creation-Guidelines/", 
            "text": "This doc has some suggestions about difficulty, set balance and on keeping a set fun, approachable, and challenging. What you're going to see here are not rules, just suggestions.\n\n\nDifficulty Scale:\n\n\n\n\nFreebie\n\n\nEasy\n\n\nMedium\n\n\nMed-hard\n\n\nHard\n\n\nVery-Hard\n\n\nKaizo\n\n\n\n\nMore details on these \nat the bottom\n.\n\n\nIn general there should be an steady sloping balance of difficulty. One should think of the overall difficulty of a set while building it. One should not make sets excessively difficult.\n\n\nA good set balance on a 50 cheeves in an average set would have roughly: 4 freebies, 6 easy cheeves, 10 medium, 10 med-hard, 14 hard, and 6 very-hard, 0 kaizo.\n\n\nA well balanced difficulty distribution has rewards for every type of player. It gives each skill level something to accomplish until mastery.\n\n\nAchievements should not just be a check-mark of completing a game\n, (too easy) but create fun new memories for the game (diversity of challenges).\n\n\nIt leaves space for freebies that are featuring curious or fun elements of the game. It expects enough difficulty that once you've mastered the set you are a master of the game. But it doesn't ask too much from the player either.\n\n\nIt also shouldn't ask the player to be doing seemingly endless repetitive grinding to make a set seem harder. Doing the same task over and over isn't hard, it's typically dull. It should almost always avoid making marathon types with a hill at the end (ones that require long setup times with low or repetitive difficulty and then a spike of high difficulty at the end. Don't do it!).\n\n\nSets should be mastereable by a skilled player who gives a dedicated effort.\n\n\nSets should reflect the content of the game. Grinding cheeves in games that require grinding are reasonable, where in other places they would often be inappropriate.\n\n\nSets should also break out of just what is expected from a game, pushing the player to need to find new solutions for problems a veteran player never considered.\n\n\nSet Quantity:\n\n\nSet quantity should not have such hard rules. Quality is the key factor.\n\n\nThe set quantity strongly depends on how much fun and challenges the game can give. That's why the set developer must know the game very well.\n\n\nSet Variety:\n\n\nKeep it fun, give it variety, challenge the player, give the player new things to do.\n\n\nSome achievements can give much fun to the player when they are like a meta-game. Where the player is required to rethink the game entirely.\n\n\nSome notable examples:\n\n\n\n\n\n\nFabulous ComboFabulous Combo (15)\n - it turns the game into a puzzle game, completing this can be really satifying\n\n\n\n\n\n\nSwordless Adventurer (20)\n - with no sword you are forced to rethink the entire game. You can discover how useful all the subweapons are. Very fun!\n\n\n\n\n\n\nThere Are No Bullets in the Energy Zone (10)\n - pacifist challenges, when possible force a lot more agility from the player and break old habits. Very fun!\n\n\n\n\n\n\nDefinitions of Difficulty\n\n\n0 - freebie\n\n\nTakes almost no effort for basically all players to achieve this OR the player gets it without any conscious effort. The player gets these on accident and they pop up on the screen. Sometimes the player will have no idea why they earned them. Some freebies are good some are bad.\n\n\nExamples:\n Starting the game, picking a character, collecting an easily accessible item, killing your first enemy. Stumbling on a cheeve that took no forethought but highlights elements of the game.\n\n\n1 - Easy\n\n\nMost players could get these on their first attempt, Some on their second or third attempt. Rarely players can mess it up.\n\n\nExamples:\n Progress on easy stages, getting 100 coins, collecting a feather, collecting 20 rings. Getting the first upgrade, getting to a well known secret stage. Fighting a simple boss: most bosses in Super Mario World, completing early stages in Sonic.\n\n\n2 - Medium\n\n\nMany players could get this on their first attempt. Many could after a few attempts. Some will need to practice. Very few will struggle with them.\n\n\nExamples:\n Getting all the colored switches in Super Mario World, collecting all of the items in a Castlevania stage, getting a bonus item in a more hidden area, like moons in SMW. Beating Contra with the Konami code.\n\n\n3 - Medium-Hard\n\n\nA low amount of players could get this on their first attempt. Some after a few attempts and most will take some effort and practice to complete these. A few will find them very challenging, and give up.\n\n\nExamples:\n Getting some of the chaos emeralds in Sonic 2. Beating Super Mario World.\n\n\n4 - Hard\n\n\nVery few player can get these on their first attempt, perhaps if they already know the game (not really a first attempt is it?) Most can complete these with a solid effort, many attempts and some practice, and some need to practice other games first.\n\n\nExamples:\n Getting all of the Chaos emeralds in Sonic 1,2,3. Beating Contra without the Konami code.\n\n\n5 - Very Hard\n\n\nOnly the rarest of players can complete these on a first attempt. Most can complete it after many attempts, Many players will drop off here and won't be willing to complete the set unless they are completionists or fans of the game. Many are not able to complete this after very many attempts. Usually takes significant practice, high skills, experience, research, or guides to complete.\n\n\nExamples:\n Beating Contra in one life. Escaping Zebes (Super Metroid) in under two minutes. Beating many of the Megaman bosses without taking damage. Many damagless stages, depending on the game.\n\n\n6 - Kaizo\n\n\nMost players are not able to complete this after dozens of attempts. Many players will never be able to complete it as it could require beyond normal reaction speeds. The top-most skilled players still consider these blisteringly hard. It may take marathon efforts to restart.\n\n\nExamples:\n Completing a game without taking damage especially if the player has a lifebar, challenges that drastically restrict the player and require near frame perfect accuracy tor success. Beating contra twice in one life. Penniless plumber. Beating Megaman without taking damage.", 
            "title": "Set Creation Guidelines"
        }, 
        {
            "location": "/Set-Creation-Guidelines/#difficulty-scale", 
            "text": "Freebie  Easy  Medium  Med-hard  Hard  Very-Hard  Kaizo   More details on these  at the bottom .  In general there should be an steady sloping balance of difficulty. One should think of the overall difficulty of a set while building it. One should not make sets excessively difficult.  A good set balance on a 50 cheeves in an average set would have roughly: 4 freebies, 6 easy cheeves, 10 medium, 10 med-hard, 14 hard, and 6 very-hard, 0 kaizo.  A well balanced difficulty distribution has rewards for every type of player. It gives each skill level something to accomplish until mastery.  Achievements should not just be a check-mark of completing a game , (too easy) but create fun new memories for the game (diversity of challenges).  It leaves space for freebies that are featuring curious or fun elements of the game. It expects enough difficulty that once you've mastered the set you are a master of the game. But it doesn't ask too much from the player either.  It also shouldn't ask the player to be doing seemingly endless repetitive grinding to make a set seem harder. Doing the same task over and over isn't hard, it's typically dull. It should almost always avoid making marathon types with a hill at the end (ones that require long setup times with low or repetitive difficulty and then a spike of high difficulty at the end. Don't do it!).  Sets should be mastereable by a skilled player who gives a dedicated effort.  Sets should reflect the content of the game. Grinding cheeves in games that require grinding are reasonable, where in other places they would often be inappropriate.  Sets should also break out of just what is expected from a game, pushing the player to need to find new solutions for problems a veteran player never considered.", 
            "title": "Difficulty Scale:"
        }, 
        {
            "location": "/Set-Creation-Guidelines/#set-quantity", 
            "text": "Set quantity should not have such hard rules. Quality is the key factor.  The set quantity strongly depends on how much fun and challenges the game can give. That's why the set developer must know the game very well.", 
            "title": "Set Quantity:"
        }, 
        {
            "location": "/Set-Creation-Guidelines/#set-variety", 
            "text": "Keep it fun, give it variety, challenge the player, give the player new things to do.  Some achievements can give much fun to the player when they are like a meta-game. Where the player is required to rethink the game entirely.  Some notable examples:    Fabulous ComboFabulous Combo (15)  - it turns the game into a puzzle game, completing this can be really satifying    Swordless Adventurer (20)  - with no sword you are forced to rethink the entire game. You can discover how useful all the subweapons are. Very fun!    There Are No Bullets in the Energy Zone (10)  - pacifist challenges, when possible force a lot more agility from the player and break old habits. Very fun!", 
            "title": "Set Variety:"
        }, 
        {
            "location": "/Set-Creation-Guidelines/#definitions-of-difficulty", 
            "text": "", 
            "title": "Definitions of Difficulty"
        }, 
        {
            "location": "/Set-Creation-Guidelines/#0-freebie", 
            "text": "Takes almost no effort for basically all players to achieve this OR the player gets it without any conscious effort. The player gets these on accident and they pop up on the screen. Sometimes the player will have no idea why they earned them. Some freebies are good some are bad.  Examples:  Starting the game, picking a character, collecting an easily accessible item, killing your first enemy. Stumbling on a cheeve that took no forethought but highlights elements of the game.", 
            "title": "0 - freebie"
        }, 
        {
            "location": "/Set-Creation-Guidelines/#1-easy", 
            "text": "Most players could get these on their first attempt, Some on their second or third attempt. Rarely players can mess it up.  Examples:  Progress on easy stages, getting 100 coins, collecting a feather, collecting 20 rings. Getting the first upgrade, getting to a well known secret stage. Fighting a simple boss: most bosses in Super Mario World, completing early stages in Sonic.", 
            "title": "1 - Easy"
        }, 
        {
            "location": "/Set-Creation-Guidelines/#2-medium", 
            "text": "Many players could get this on their first attempt. Many could after a few attempts. Some will need to practice. Very few will struggle with them.  Examples:  Getting all the colored switches in Super Mario World, collecting all of the items in a Castlevania stage, getting a bonus item in a more hidden area, like moons in SMW. Beating Contra with the Konami code.", 
            "title": "2 - Medium"
        }, 
        {
            "location": "/Set-Creation-Guidelines/#3-medium-hard", 
            "text": "A low amount of players could get this on their first attempt. Some after a few attempts and most will take some effort and practice to complete these. A few will find them very challenging, and give up.  Examples:  Getting some of the chaos emeralds in Sonic 2. Beating Super Mario World.", 
            "title": "3 - Medium-Hard"
        }, 
        {
            "location": "/Set-Creation-Guidelines/#4-hard", 
            "text": "Very few player can get these on their first attempt, perhaps if they already know the game (not really a first attempt is it?) Most can complete these with a solid effort, many attempts and some practice, and some need to practice other games first.  Examples:  Getting all of the Chaos emeralds in Sonic 1,2,3. Beating Contra without the Konami code.", 
            "title": "4 - Hard"
        }, 
        {
            "location": "/Set-Creation-Guidelines/#5-very-hard", 
            "text": "Only the rarest of players can complete these on a first attempt. Most can complete it after many attempts, Many players will drop off here and won't be willing to complete the set unless they are completionists or fans of the game. Many are not able to complete this after very many attempts. Usually takes significant practice, high skills, experience, research, or guides to complete.  Examples:  Beating Contra in one life. Escaping Zebes (Super Metroid) in under two minutes. Beating many of the Megaman bosses without taking damage. Many damagless stages, depending on the game.", 
            "title": "5 - Very Hard"
        }, 
        {
            "location": "/Set-Creation-Guidelines/#6-kaizo", 
            "text": "Most players are not able to complete this after dozens of attempts. Many players will never be able to complete it as it could require beyond normal reaction speeds. The top-most skilled players still consider these blisteringly hard. It may take marathon efforts to restart.  Examples:  Completing a game without taking damage especially if the player has a lifebar, challenges that drastically restrict the player and require near frame perfect accuracy tor success. Beating contra twice in one life. Penniless plumber. Beating Megaman without taking damage.", 
            "title": "6 - Kaizo"
        }, 
        {
            "location": "/Console-Specific-Tips/", 
            "text": "When excavating the memory of these old consoles it helps to know what the original creators of the games were working with in the first place. If you familiarize yourself with the quirks of your favorite console then set making will be easier and more accurate.\n\n\nNES (RANes)\n\n\nMemory Mirroring\n\n\n\n\nWhen using the memory inspector to find variables for NES games, there will be 4 copies of everything you find. If you're wondering \"which one do I use?\" or \"should I check for all of them?\" it's not as complicated as it seems.\n\n\nThis is a feature of the NES that gave developers more ways of looking at memory. Because the NES itself only has 2KB of RAM, the first result (the one below 0x800) should be used for consistency, and applying additional conditions on the others will do nothing.\n\n\nThis applies to RPS and leaderboards as well.\n\n\nGame Boy (RAVBA)\n\n\nMemory Map\n\n\nCertain ranges of values mean different things in the context of the Game Boy hardware, so having a map of what's where can help you with eliminating useless addresses. Here's the lowdown:\n\n\n\n\n\u274c \n0x0000 - 0x7FFF: ROM Data\n (Typically no reason to use. If you're a super-dedicated developer you could use the 16-bit value at 0x14E along with alt groups to support multiple ROM versions/regions)\n\n\n\u274c \n0x8000 - 0x9FFF: Graphics Data\n (Some things here might correlate with what you're looking for if you're trying to find a map ID or animation, but there will always be a better way of going about what you're doing than using any of these)\n\n\n\u2714\ufe0f \n0xA000 - 0xBFFF: Cartridge RAM\n (IE. save data. Sometimes using these addresses will be unavoidable but then your set could be prone to cheating by loading 100% save files. More info on protecting against save files to come)\n\n\n\u2714\ufe0f \n0xC000 - 0xDFFF: Work RAM\n (The good stuff; almost everything you should use will fall inside this range)\n\n\n\u274c \n0xE000 - 0xFDFF: ECHO RAM\n (Do not use, see below)\n\n\n\u274c \n0xFE00 - 0xFE9F: More Graphics Data\n (same as Graphics Data above)\n\n\n\u274c \n0xFEA0 - 0xFFFF: Miscellaneous\n (Do not use)\n\n\n\n\nFor more info see: http://gameboy.mongenel.com/dmg/asmmemmap.html\n\n\nECHO RAM\n\n\n\n\nSimilarly to the NES, certain variables may show up twice when searching in the Memory Inspector. The second result is in what's called the ECHO RAM, which is a mirror of the actual memory. Since some emulators tend to ignore this area or emulate it incorrectly, it's recommended to NOT use it at all and always use the first result.\n\n\nThe Game Boy has 4KB of RAM starting at 0xC000. ECHO RAM starts at 0xE000, so if your address begins with an E you'll want to replace the first non-zero character with a C. Remember: C is correct, E is echo!\n\n\nNintendo 64 (RAP64)\n\n\nUsing GameShark Codes for Addresses\n\n\nGameShark codes can be a valuable resource for finding addresses you can't or don't feel like finding. They have 12 characters per line and are fairly easy to parse.\n\n\n[AA][BBBBBB] [CCCC]\n\n\n[AA] is the codetype. This is a short instruction to the GameShark that defines what to do with the next value. If you understand what the GameShark code does you can use it to help with condition-making.\n\n\n\n\n80, 88:\n The address is 8-bit. Sets the value [00CC] to the address [BBBBBB].\n\n\n81, 89:\n The address is 16-bit. Sets the value [CCCC] to the address [BBBBBB].\n\n\nD0:\n The address is 8-bit. Checks if [00CC] is equal to the value at address [BBBBBB] then executes the next line if it is.\n\n\nD2:\n The address is 8-bit. Checks if [00CC] is DIFFERENT to the value at address [BBBBBB] then executes the next line if it is.\n\n\nD1:\n The address is 16-bit. Checks if [CCCC] is equal to the value at address [BBBBBB] then executes the next line if it is.\n\n\nD3:\n The address is 16-bit. Checks if [CCCC] is DIFFERENT to the value at address [BBBBBB] then executes the next line if it is.\n\n\n\n\nHere are some examples:\n* Paper Mario: Infinite HP:\n\n\n[80][10F292] [0032]\n\n\nSets the 8-bit value at 0x10F292 to 0x32 (50). So this means Mario's HP is an 8-bit value at 0x10F292.\n\n\n\n\nDonkey Kong 64: Play as Rambi: \n\n\n\n\n[80][74E77C] [0006]\n\n\nSets the 8-bit value at 0x74E77C to 6. So this means the character you're playing as is an 8-bit value at 0x74E77C.\n\n\n\n\nChameleon Twist 2: Hold L to Moon Jump:\n\n\n\n\n[D0][18BAB5] [0020] \n- Looking at this one\n\n\n[81][18B9E0] [4200]\n\n\nChecks if the 8-bit value at 0x18BAB5 is equal to 0x20. This means 0x18BAB5 contains a button press variable and Bit5 (0x20) corresponds to L.\n\n\nAnti-GSC\n and \nGameHacking\n are both good resources for finding GameShark codes.", 
            "title": "Console Specific Tips"
        }, 
        {
            "location": "/Console-Specific-Tips/#nes-ranes", 
            "text": "", 
            "title": "NES (RANes)"
        }, 
        {
            "location": "/Console-Specific-Tips/#memory-mirroring", 
            "text": "When using the memory inspector to find variables for NES games, there will be 4 copies of everything you find. If you're wondering \"which one do I use?\" or \"should I check for all of them?\" it's not as complicated as it seems.  This is a feature of the NES that gave developers more ways of looking at memory. Because the NES itself only has 2KB of RAM, the first result (the one below 0x800) should be used for consistency, and applying additional conditions on the others will do nothing.  This applies to RPS and leaderboards as well.", 
            "title": "Memory Mirroring"
        }, 
        {
            "location": "/Console-Specific-Tips/#game-boy-ravba", 
            "text": "", 
            "title": "Game Boy (RAVBA)"
        }, 
        {
            "location": "/Console-Specific-Tips/#memory-map", 
            "text": "Certain ranges of values mean different things in the context of the Game Boy hardware, so having a map of what's where can help you with eliminating useless addresses. Here's the lowdown:   \u274c  0x0000 - 0x7FFF: ROM Data  (Typically no reason to use. If you're a super-dedicated developer you could use the 16-bit value at 0x14E along with alt groups to support multiple ROM versions/regions)  \u274c  0x8000 - 0x9FFF: Graphics Data  (Some things here might correlate with what you're looking for if you're trying to find a map ID or animation, but there will always be a better way of going about what you're doing than using any of these)  \u2714\ufe0f  0xA000 - 0xBFFF: Cartridge RAM  (IE. save data. Sometimes using these addresses will be unavoidable but then your set could be prone to cheating by loading 100% save files. More info on protecting against save files to come)  \u2714\ufe0f  0xC000 - 0xDFFF: Work RAM  (The good stuff; almost everything you should use will fall inside this range)  \u274c  0xE000 - 0xFDFF: ECHO RAM  (Do not use, see below)  \u274c  0xFE00 - 0xFE9F: More Graphics Data  (same as Graphics Data above)  \u274c  0xFEA0 - 0xFFFF: Miscellaneous  (Do not use)   For more info see: http://gameboy.mongenel.com/dmg/asmmemmap.html", 
            "title": "Memory Map"
        }, 
        {
            "location": "/Console-Specific-Tips/#echo-ram", 
            "text": "Similarly to the NES, certain variables may show up twice when searching in the Memory Inspector. The second result is in what's called the ECHO RAM, which is a mirror of the actual memory. Since some emulators tend to ignore this area or emulate it incorrectly, it's recommended to NOT use it at all and always use the first result.  The Game Boy has 4KB of RAM starting at 0xC000. ECHO RAM starts at 0xE000, so if your address begins with an E you'll want to replace the first non-zero character with a C. Remember: C is correct, E is echo!", 
            "title": "ECHO RAM"
        }, 
        {
            "location": "/Console-Specific-Tips/#nintendo-64-rap64", 
            "text": "", 
            "title": "Nintendo 64 (RAP64)"
        }, 
        {
            "location": "/Console-Specific-Tips/#using-gameshark-codes-for-addresses", 
            "text": "GameShark codes can be a valuable resource for finding addresses you can't or don't feel like finding. They have 12 characters per line and are fairly easy to parse.  [AA][BBBBBB] [CCCC]  [AA] is the codetype. This is a short instruction to the GameShark that defines what to do with the next value. If you understand what the GameShark code does you can use it to help with condition-making.   80, 88:  The address is 8-bit. Sets the value [00CC] to the address [BBBBBB].  81, 89:  The address is 16-bit. Sets the value [CCCC] to the address [BBBBBB].  D0:  The address is 8-bit. Checks if [00CC] is equal to the value at address [BBBBBB] then executes the next line if it is.  D2:  The address is 8-bit. Checks if [00CC] is DIFFERENT to the value at address [BBBBBB] then executes the next line if it is.  D1:  The address is 16-bit. Checks if [CCCC] is equal to the value at address [BBBBBB] then executes the next line if it is.  D3:  The address is 16-bit. Checks if [CCCC] is DIFFERENT to the value at address [BBBBBB] then executes the next line if it is.   Here are some examples:\n* Paper Mario: Infinite HP:  [80][10F292] [0032]  Sets the 8-bit value at 0x10F292 to 0x32 (50). So this means Mario's HP is an 8-bit value at 0x10F292.   Donkey Kong 64: Play as Rambi:    [80][74E77C] [0006]  Sets the 8-bit value at 0x74E77C to 6. So this means the character you're playing as is an 8-bit value at 0x74E77C.   Chameleon Twist 2: Hold L to Moon Jump:   [D0][18BAB5] [0020]  - Looking at this one  [81][18B9E0] [4200]  Checks if the 8-bit value at 0x18BAB5 is equal to 0x20. This means 0x18BAB5 contains a button press variable and Bit5 (0x20) corresponds to L.  Anti-GSC  and  GameHacking  are both good resources for finding GameShark codes.", 
            "title": "Using GameShark Codes for Addresses"
        }, 
        {
            "location": "/Custom-Leaderboards/", 
            "text": "Currently Leaderboards can be edited by developers on the website. It's a pretty hefty interface and a difficult job to get a leaderboard working just right. It genuinely takes some care and attention to get a good leaderboard working, so in this doc we'll try to understand how it works.\n\n\nOverview\n\n\nThis is how a game's Leaderboard List looks like on the website:\n\n\n\n\nIn the center you can see every already made Leaderboard, and in the right column you can see the \nCode Notes\n for the game. The Code Notes are here to help with some conditions we'll see below.\n\n\nHere's a brief explanation of each field of a single Leaderboard:\n\n\n\n\nTitle\n: the leaderboard's title.\n\n\nDescription\n: the leaderboard's description.\n\n\nFormat\n: it can be \nScore\n, \nTime (Frames)\n, \nTime (Milliseconds)\n or \nValue\n. It's used to distinguish what sort of leaderboard this is (we'll go into this below).\n\n\n\"LowerIsBetter\" checkbox\n: when checked, it means that a lower value is a better thing. It's usually the case for time based leaderboards, whereas a larger score generally is better.\n\n\nStart\n: start conditions, aka \nSTA\n.\n\n\nCancel\n: cancel conditions, aka \nCAN\n.\n\n\nSubmit\n: submit conditions, aka \nSUB\n.\n\n\nValue\n: a value interpreter, aka \nVAL\n.\n\n\n\n\nNote\n: A valid leaderboard MUST have all four of these conditions.\n\n\nThose last 4 fields are really important and \nLOTS\n of care must be taken over the entry of any characters into these strings. That's why they deserve a further explanation:\n\n\nThe \nSTA\n or \nStart\n condition is a series of values, like an achievement, that must be true in order to start looking for a leaderboard submission. Once the \nSTA\n is true, the game will activate the other three, and will keep processing them constantly.\n\n\nIf a \nCancel\n (\nCAN\n) condition is true, then it will cancel all progress towards the leaderboard submission. If however the \nSubmit\n (\nSUB\n) condition is true, then the leaderboard entry will be submitted.\n\n\nFinally, the \nValue\n (\nVAL\n) is a special case, and will be taken from memory using the formula stated in the memory box.\n\n\nExample\n\n\nThe best place to start is to look at one of the existing leaderboards \nhttp://retroachievements.org/leaderboardList.php\n and break it down to see how it works. We're going to use the \nGreen Hill Act 1 (Sonic the Hedgehog) Leaderboard\n for this purpose. Then let's see that again:\n\n\n\n\nThe \nTitle/Description\n fields are quite obvious.\n\n\nThe \nType\n is \"Time (Frames)\". In Sonic every 60 frames is 1 second, then we'll monitor the time using the frames.\n\n\nThe \nLower Is Better\n flag is checked, than the one who makes the shortest time will be the #1.\n\n\nNow we're going to break down the most important parts.\n\n\nStart Conditions\n\n\nSTA\n: \n0xfe10=h0000_0xhf601=h0c_d0xhf601!=h0c_0xfff0=0\n\n\n\n\n0xfe10=h0000\n: If RAM address 0xfe10 is equivalent to hex 0000,\n\n\n_\n: AND,\n\n\n0xhf601=h0c\n: If 8-bit RAM address 0xf601 is equivalent to hex 0c,\n\n\n_\n: AND,\n\n\nd0xhf601!=h0c\n: If the previous 8-bit RAM address 0xf601 is NOT equivalent to hex 0c,\n\n\n_\n: AND,\n\n\n0xfff0=0\n If RAM address 0xfff0 is equivalent to 0.\n\n\n\n\nThis might seem daunting, because we don't know what these addresses mean. That's why the \nCode Notes\n in the right column are pretty handy! You can see how these addresses are labelled in memory:\n\n\n\n\n0xfe10 is the level, and is expected to be 0 (the first level).\n\n\n0xf601 is an 8-bit memory address, and we use the prefix '0xh' instead of '0x' to signify this. 0xf601 is the screen mode. The second and third parts of this start statement are saying 'the current mode should be 'ingame' (0c), and the previous mode should NOT be 'ingame'. Note that 'd' represents delta, or \"the previous frame's value\". In other words, trigger this if we've JUST arrived in a level (the start of the level, when we want to start testing their time).\n\n\nFinally we also expect 0xfff0 to be equivalent to 0, because 0xfff0 is the demo mode, and we don't want to award a leaderboard entry when the demo is active!\n\n\n\n\nCancel Conditions\n\n\nCAN\n: \n0xhfe13\nd0xhfe13\n\n\n\n\n0xfe13 is the number of lives.\n\n\n\n\nThe cancel section checks if the player's LIVES counter ever becomes lower. Literally, it says \"Cancel if the CURRENT value at 0xfe13 is less than the PREVIOUS value at 0xfe13\". We want to do this because you could reach the final checkpoint and run out of time, resetting your timer to 0:00. We don't want to allow this, because it's not the correct way of completing the level. So if the player dies, we reset their leaderboard progress.\n\n\nSubmit Conditions\n\n\nSUB\n: \n0xf7cc!=0_d0xf7cc=0\n\n\n\n\n0xf7cc is the endlevel flag, non-interactive.\n\n\n\n\nThe submit section checks if the current frame has the 'endlevel' flag set to true (or \n!=0\n, 'nonzero'), and the previous frame (delta) has it set to false (or \n=0\n, 'zero'). This suggests that the player has reached the end of the level, and has proven to be a fairly sturdy benchmark.\n\n\nTip\n: it can be useful to watch these values in memory to see how they perform, and what sort of values they end up at in different circumstances.\n\n\nValue Interpreter\n\n\nVAL\n: \n0xhfe24*1_0xhfe25*60_0xhfe22*3600\n\n\nFinally, value. Once the player has reached the start condition, they will be shown a popup which remains on-screen, showing their progress so far. If it's a time leaderboard, it will be a clock, and if it's a score, it will just be the value. If they fulfill the cancel condition, they will be told that they have failed, and the popup will be removed. If they successfully reach the submit condition, the current value will be taken and submitted as their score, and on successful submission, an ingame popup will inform the player of the leaderboard so far, and their position in the leaderboard.\n\n\nThe value condition is special in a few ways. It is evaluated constantly and shown on-screen all the time when the leaderboard is active. It doesn't work like the other conditions, it expects addresses in the following way:\n\n\naddress*modifier\n (address times modifier)\n\n\nand it uses the \n_\n underscore operator as a 'plus'. The \n*\n asterisk signifies 'multiply', so in the value\n\n\n0xhfe24*1_0xhfe25*60_0xhfe22*3600\n\n\nrepresents:\n\n\n8-bit 0xfe24 times 1, PLUS\n8-bit 0xfe25 times 60, PLUS\n8-bit 0xfe22 times 3600\n\n\nThe reason for this is that the values in each of these addresses signifies frames, seconds, and minutes respectively. When we add these values together, we get a grand total in frames that we submit to the database.\n\n\nRemember that 'Format' field that can be either \nScore\n, \nTime (Frames)\n, \nTime (Milliseconds)\n or \nValue\n? \nTime (Frames)\n is the most common one, and represents 'frames'. \nTime (Milliseconds)\n expects a value that we can convert directly into millisecs (Super Mario Kart uses this). However to convert a value in frames into a human-readible format, we should divide the value by 60 to get an accurate representation of seconds, and a value in millisecs should be divided by 100 to get the number of seconds. This is used both on the website and in the app to display the value properly, and is important to distinguish so we can be sure we get the most accurate value out of the emulator, by using whatever format they use to record time.\n\n\nFurther help\n\n\nThere are unfortunately \nMANY\n ways to get this process wrong, so if you are having any trouble feel free to ask for help in our \nDiscord server\n.\n\n\nIf you want to practice, it's highly recommended to create your own leaderboard and attempting something on a new game, rather than using an existing leaderboard.\n\n\nPlease remember that these files are pulled directly into someone's game if they decide to play it, and a badly formed memory address or string could cause their emulator to crash, so please test your leaderboard code!", 
            "title": "Custom Leaderboards"
        }, 
        {
            "location": "/Custom-Leaderboards/#overview", 
            "text": "This is how a game's Leaderboard List looks like on the website:   In the center you can see every already made Leaderboard, and in the right column you can see the  Code Notes  for the game. The Code Notes are here to help with some conditions we'll see below.  Here's a brief explanation of each field of a single Leaderboard:   Title : the leaderboard's title.  Description : the leaderboard's description.  Format : it can be  Score ,  Time (Frames) ,  Time (Milliseconds)  or  Value . It's used to distinguish what sort of leaderboard this is (we'll go into this below).  \"LowerIsBetter\" checkbox : when checked, it means that a lower value is a better thing. It's usually the case for time based leaderboards, whereas a larger score generally is better.  Start : start conditions, aka  STA .  Cancel : cancel conditions, aka  CAN .  Submit : submit conditions, aka  SUB .  Value : a value interpreter, aka  VAL .   Note : A valid leaderboard MUST have all four of these conditions.  Those last 4 fields are really important and  LOTS  of care must be taken over the entry of any characters into these strings. That's why they deserve a further explanation:  The  STA  or  Start  condition is a series of values, like an achievement, that must be true in order to start looking for a leaderboard submission. Once the  STA  is true, the game will activate the other three, and will keep processing them constantly.  If a  Cancel  ( CAN ) condition is true, then it will cancel all progress towards the leaderboard submission. If however the  Submit  ( SUB ) condition is true, then the leaderboard entry will be submitted.  Finally, the  Value  ( VAL ) is a special case, and will be taken from memory using the formula stated in the memory box.", 
            "title": "Overview"
        }, 
        {
            "location": "/Custom-Leaderboards/#example", 
            "text": "The best place to start is to look at one of the existing leaderboards  http://retroachievements.org/leaderboardList.php  and break it down to see how it works. We're going to use the  Green Hill Act 1 (Sonic the Hedgehog) Leaderboard  for this purpose. Then let's see that again:   The  Title/Description  fields are quite obvious.  The  Type  is \"Time (Frames)\". In Sonic every 60 frames is 1 second, then we'll monitor the time using the frames.  The  Lower Is Better  flag is checked, than the one who makes the shortest time will be the #1.  Now we're going to break down the most important parts.", 
            "title": "Example"
        }, 
        {
            "location": "/Custom-Leaderboards/#start-conditions", 
            "text": "STA :  0xfe10=h0000_0xhf601=h0c_d0xhf601!=h0c_0xfff0=0   0xfe10=h0000 : If RAM address 0xfe10 is equivalent to hex 0000,  _ : AND,  0xhf601=h0c : If 8-bit RAM address 0xf601 is equivalent to hex 0c,  _ : AND,  d0xhf601!=h0c : If the previous 8-bit RAM address 0xf601 is NOT equivalent to hex 0c,  _ : AND,  0xfff0=0  If RAM address 0xfff0 is equivalent to 0.   This might seem daunting, because we don't know what these addresses mean. That's why the  Code Notes  in the right column are pretty handy! You can see how these addresses are labelled in memory:   0xfe10 is the level, and is expected to be 0 (the first level).  0xf601 is an 8-bit memory address, and we use the prefix '0xh' instead of '0x' to signify this. 0xf601 is the screen mode. The second and third parts of this start statement are saying 'the current mode should be 'ingame' (0c), and the previous mode should NOT be 'ingame'. Note that 'd' represents delta, or \"the previous frame's value\". In other words, trigger this if we've JUST arrived in a level (the start of the level, when we want to start testing their time).  Finally we also expect 0xfff0 to be equivalent to 0, because 0xfff0 is the demo mode, and we don't want to award a leaderboard entry when the demo is active!", 
            "title": "Start Conditions"
        }, 
        {
            "location": "/Custom-Leaderboards/#cancel-conditions", 
            "text": "CAN :  0xhfe13 d0xhfe13   0xfe13 is the number of lives.   The cancel section checks if the player's LIVES counter ever becomes lower. Literally, it says \"Cancel if the CURRENT value at 0xfe13 is less than the PREVIOUS value at 0xfe13\". We want to do this because you could reach the final checkpoint and run out of time, resetting your timer to 0:00. We don't want to allow this, because it's not the correct way of completing the level. So if the player dies, we reset their leaderboard progress.", 
            "title": "Cancel Conditions"
        }, 
        {
            "location": "/Custom-Leaderboards/#submit-conditions", 
            "text": "SUB :  0xf7cc!=0_d0xf7cc=0   0xf7cc is the endlevel flag, non-interactive.   The submit section checks if the current frame has the 'endlevel' flag set to true (or  !=0 , 'nonzero'), and the previous frame (delta) has it set to false (or  =0 , 'zero'). This suggests that the player has reached the end of the level, and has proven to be a fairly sturdy benchmark.  Tip : it can be useful to watch these values in memory to see how they perform, and what sort of values they end up at in different circumstances.", 
            "title": "Submit Conditions"
        }, 
        {
            "location": "/Custom-Leaderboards/#value-interpreter", 
            "text": "VAL :  0xhfe24*1_0xhfe25*60_0xhfe22*3600  Finally, value. Once the player has reached the start condition, they will be shown a popup which remains on-screen, showing their progress so far. If it's a time leaderboard, it will be a clock, and if it's a score, it will just be the value. If they fulfill the cancel condition, they will be told that they have failed, and the popup will be removed. If they successfully reach the submit condition, the current value will be taken and submitted as their score, and on successful submission, an ingame popup will inform the player of the leaderboard so far, and their position in the leaderboard.  The value condition is special in a few ways. It is evaluated constantly and shown on-screen all the time when the leaderboard is active. It doesn't work like the other conditions, it expects addresses in the following way:  address*modifier  (address times modifier)  and it uses the  _  underscore operator as a 'plus'. The  *  asterisk signifies 'multiply', so in the value  0xhfe24*1_0xhfe25*60_0xhfe22*3600  represents:  8-bit 0xfe24 times 1, PLUS\n8-bit 0xfe25 times 60, PLUS\n8-bit 0xfe22 times 3600  The reason for this is that the values in each of these addresses signifies frames, seconds, and minutes respectively. When we add these values together, we get a grand total in frames that we submit to the database.  Remember that 'Format' field that can be either  Score ,  Time (Frames) ,  Time (Milliseconds)  or  Value ?  Time (Frames)  is the most common one, and represents 'frames'.  Time (Milliseconds)  expects a value that we can convert directly into millisecs (Super Mario Kart uses this). However to convert a value in frames into a human-readible format, we should divide the value by 60 to get an accurate representation of seconds, and a value in millisecs should be divided by 100 to get the number of seconds. This is used both on the website and in the app to display the value properly, and is important to distinguish so we can be sure we get the most accurate value out of the emulator, by using whatever format they use to record time.", 
            "title": "Value Interpreter"
        }, 
        {
            "location": "/Custom-Leaderboards/#further-help", 
            "text": "There are unfortunately  MANY  ways to get this process wrong, so if you are having any trouble feel free to ask for help in our  Discord server .  If you want to practice, it's highly recommended to create your own leaderboard and attempting something on a new game, rather than using an existing leaderboard.  Please remember that these files are pulled directly into someone's game if they decide to play it, and a badly formed memory address or string could cause their emulator to crash, so please test your leaderboard code!", 
            "title": "Further help"
        }, 
        {
            "location": "/About/", 
            "text": "This project is an attempt to put together the guides, tutorials, tips and tricks about RetroAchievements development.\n\n\nBefore this project started the knowledge about cheevos development was scattered in several RetroAchievements.org forum posts, making the learning experience harder for a novice developer. In fact most part of what we have here were originally taken from those forum posts, but ordered in a somewhat more coherent sequence.\n\n\nThe \nRetroAchievements Documentation Project\n is divided into two parts:\n\n\n\n\nRetroAchievements wiki\n\n\nRetroAchievements docs\n\n\n\n\nThe wiki is where these documents are created and edited. Anyone (with a github account) is able to edit the wiki's content. Then, if you have something to share, please edit the wiki!\n\n\nThe \nRetroAchievements docs\n website has (almost) the same content as the wiki, but with a more pleasant look. The content of this website is generated by its maintainers using the wiki's content as input.\n\n\nWhen a change is made in the wiki this change is NOT instantaneously reflected in the docs.\n The converstion is performed by a maintainer from time to time.", 
            "title": "About"
        }
    ]
}